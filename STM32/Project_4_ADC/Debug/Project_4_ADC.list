
Project_4_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08007ed8  08007ed8  00017ed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800830c  0800830c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800830c  0800830c  0001830c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008314  08008314  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008314  08008314  00018314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008318  08008318  00018318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800831c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200001dc  080084f8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  080084f8  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4b2  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0d  00000000  00000000  0002f6be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  000315d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00032318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002834b  00000000  00000000  00032f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed20  00000000  00000000  0005b2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc0d1  00000000  00000000  0006a003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001660d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000482c  00000000  00000000  00166124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ec0 	.word	0x08007ec0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007ec0 	.word	0x08007ec0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b0a      	cmp	r3, #10
 8000eb8:	d102      	bne.n	8000ec0 <__io_putchar+0x14>
    __io_putchar('\r');
 8000eba:	200d      	movs	r0, #13
 8000ebc:	f7ff fff6 	bl	8000eac <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000ec0:	1d39      	adds	r1, r7, #4
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <__io_putchar+0x2c>)
 8000eca:	f003 fd9d 	bl	8004a08 <HAL_UART_Transmit>

  return 1;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	2000025c 	.word	0x2000025c

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee2:	f000 fba3 	bl	800162c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee6:	f000 f83d 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eea:	f000 f935 	bl	8001158 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000eee:	f000 f88b 	bl	8001008 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000ef2:	f000 f901 	bl	80010f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000ef6:	217f      	movs	r1, #127	; 0x7f
 8000ef8:	4816      	ldr	r0, [pc, #88]	; (8000f54 <main+0x78>)
 8000efa:	f001 fe5f 	bl	8002bbc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8000efe:	4815      	ldr	r0, [pc, #84]	; (8000f54 <main+0x78>)
 8000f00:	f000 ff94 	bl	8001e2c <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_Start(&hadc1);
 8000f04:	4813      	ldr	r0, [pc, #76]	; (8000f54 <main+0x78>)
 8000f06:	f000 ff91 	bl	8001e2c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f0a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0e:	4811      	ldr	r0, [pc, #68]	; (8000f54 <main+0x78>)
 8000f10:	f001 f846 	bl	8001fa0 <HAL_ADC_PollForConversion>

	  uint32_t value = HAL_ADC_GetValue(&hadc1);
 8000f14:	480f      	ldr	r0, [pc, #60]	; (8000f54 <main+0x78>)
 8000f16:	f001 f91b 	bl	8002150 <HAL_ADC_GetValue>
 8000f1a:	6078      	str	r0, [r7, #4]
	  float voltage = 3.3f * value / 4096.0f;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	ee07 3a90 	vmov	s15, r3
 8000f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f26:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000f58 <main+0x7c>
 8000f2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f2e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000f5c <main+0x80>
 8000f32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f36:	edc7 7a00 	vstr	s15, [r7]

	  printf("ADC = %lu (%.3f V)\n", value, voltage);
 8000f3a:	6838      	ldr	r0, [r7, #0]
 8000f3c:	f7ff fb04 	bl	8000548 <__aeabi_f2d>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	4806      	ldr	r0, [pc, #24]	; (8000f60 <main+0x84>)
 8000f48:	f004 fef6 	bl	8005d38 <iprintf>
	  HAL_Delay(250);
 8000f4c:	20fa      	movs	r0, #250	; 0xfa
 8000f4e:	f000 fbe9 	bl	8001724 <HAL_Delay>
  {
 8000f52:	e7d7      	b.n	8000f04 <main+0x28>
 8000f54:	200001f8 	.word	0x200001f8
 8000f58:	40533333 	.word	0x40533333
 8000f5c:	45800000 	.word	0x45800000
 8000f60:	08007ed8 	.word	0x08007ed8

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b096      	sub	sp, #88	; 0x58
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	2244      	movs	r2, #68	; 0x44
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f004 fa6e 	bl	8005454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	463b      	mov	r3, r7
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f8a:	f002 f9dd 	bl	8003348 <HAL_PWREx_ControlVoltageScaling>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f94:	f000 f92e 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa2:	2310      	movs	r3, #16
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000faa:	2302      	movs	r3, #2
 8000fac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fb2:	230a      	movs	r3, #10
 8000fb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f002 fa14 	bl	80033f4 <HAL_RCC_OscConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fd2:	f000 f90f 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	2104      	movs	r1, #4
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 fddc 	bl	8003bac <HAL_RCC_ClockConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ffa:	f000 f8fb 	bl	80011f4 <Error_Handler>
  }
}
 8000ffe:	bf00      	nop
 8001000:	3758      	adds	r7, #88	; 0x58
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800102a:	4b30      	ldr	r3, [pc, #192]	; (80010ec <MX_ADC1_Init+0xe4>)
 800102c:	4a30      	ldr	r2, [pc, #192]	; (80010f0 <MX_ADC1_Init+0xe8>)
 800102e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001030:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <MX_ADC1_Init+0xe4>)
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <MX_ADC1_Init+0xe4>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103c:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <MX_ADC1_Init+0xe4>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001042:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <MX_ADC1_Init+0xe4>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001048:	4b28      	ldr	r3, [pc, #160]	; (80010ec <MX_ADC1_Init+0xe4>)
 800104a:	2204      	movs	r2, #4
 800104c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800104e:	4b27      	ldr	r3, [pc, #156]	; (80010ec <MX_ADC1_Init+0xe4>)
 8001050:	2200      	movs	r2, #0
 8001052:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001054:	4b25      	ldr	r3, [pc, #148]	; (80010ec <MX_ADC1_Init+0xe4>)
 8001056:	2201      	movs	r2, #1
 8001058:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800105a:	4b24      	ldr	r3, [pc, #144]	; (80010ec <MX_ADC1_Init+0xe4>)
 800105c:	2201      	movs	r2, #1
 800105e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001060:	4b22      	ldr	r3, [pc, #136]	; (80010ec <MX_ADC1_Init+0xe4>)
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001068:	4b20      	ldr	r3, [pc, #128]	; (80010ec <MX_ADC1_Init+0xe4>)
 800106a:	2200      	movs	r2, #0
 800106c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <MX_ADC1_Init+0xe4>)
 8001070:	2200      	movs	r2, #0
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <MX_ADC1_Init+0xe4>)
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <MX_ADC1_Init+0xe4>)
 800107e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001082:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001084:	4b19      	ldr	r3, [pc, #100]	; (80010ec <MX_ADC1_Init+0xe4>)
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800108c:	4817      	ldr	r0, [pc, #92]	; (80010ec <MX_ADC1_Init+0xe4>)
 800108e:	f000 fd77 	bl	8001b80 <HAL_ADC_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001098:	f000 f8ac 	bl	80011f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	4811      	ldr	r0, [pc, #68]	; (80010ec <MX_ADC1_Init+0xe4>)
 80010a8:	f001 fde8 	bl	8002c7c <HAL_ADCEx_MultiModeConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80010b2:	f000 f89f 	bl	80011f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_ADC1_Init+0xec>)
 80010b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ba:	2306      	movs	r3, #6
 80010bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010c2:	237f      	movs	r3, #127	; 0x7f
 80010c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010c6:	2304      	movs	r3, #4
 80010c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	4806      	ldr	r0, [pc, #24]	; (80010ec <MX_ADC1_Init+0xe4>)
 80010d4:	f001 f84a 	bl	800216c <HAL_ADC_ConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80010de:	f000 f889 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	; 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200001f8 	.word	0x200001f8
 80010f0:	50040000 	.word	0x50040000
 80010f4:	04300002 	.word	0x04300002

080010f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_USART2_UART_Init+0x58>)
 80010fe:	4a15      	ldr	r2, [pc, #84]	; (8001154 <MX_USART2_UART_Init+0x5c>)
 8001100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_USART2_UART_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_USART2_UART_Init+0x58>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_USART2_UART_Init+0x58>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_USART2_UART_Init+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_USART2_UART_Init+0x58>)
 800113c:	f003 fc16 	bl	800496c <HAL_UART_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001146:	f000 f855 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000025c 	.word	0x2000025c
 8001154:	40004400 	.word	0x40004400

08001158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <MX_GPIO_Init+0x94>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <MX_GPIO_Init+0x94>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <MX_GPIO_Init+0x94>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_GPIO_Init+0x94>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a18      	ldr	r2, [pc, #96]	; (80011ec <MX_GPIO_Init+0x94>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_GPIO_Init+0x94>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	2120      	movs	r1, #32
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a6:	f002 f8a9 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80011aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	4619      	mov	r1, r3
 80011be:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_GPIO_Init+0x98>)
 80011c0:	f001 fef2 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011c4:	2320      	movs	r3, #32
 80011c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	4619      	mov	r1, r3
 80011da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011de:	f001 fee3 	bl	8002fa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e2:	bf00      	nop
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000
 80011f0:	48000800 	.word	0x48000800

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fc:	e7fe      	b.n	80011fc <Error_Handler+0x8>
	...

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <HAL_MspInit+0x44>)
 8001208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120a:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <HAL_MspInit+0x44>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6613      	str	r3, [r2, #96]	; 0x60
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <HAL_MspInit+0x44>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_MspInit+0x44>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_MspInit+0x44>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6593      	str	r3, [r2, #88]	; 0x58
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_MspInit+0x44>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000

08001248 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0ac      	sub	sp, #176	; 0xb0
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2288      	movs	r2, #136	; 0x88
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f004 f8f3 	bl	8005454 <memset>
  if(hadc->Instance==ADC1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a27      	ldr	r2, [pc, #156]	; (8001310 <HAL_ADC_MspInit+0xc8>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d146      	bne.n	8001306 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001278:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800127c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800127e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001282:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001286:	2302      	movs	r3, #2
 8001288:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800128a:	2301      	movs	r3, #1
 800128c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800128e:	2308      	movs	r3, #8
 8001290:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001292:	2307      	movs	r3, #7
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001296:	2302      	movs	r3, #2
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 800129a:	2304      	movs	r3, #4
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800129e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 fea3 	bl	8003ff4 <HAL_RCCEx_PeriphCLKConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80012b4:	f7ff ff9e 	bl	80011f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <HAL_ADC_MspInit+0xcc>)
 80012ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012bc:	4a15      	ldr	r2, [pc, #84]	; (8001314 <HAL_ADC_MspInit+0xcc>)
 80012be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <HAL_ADC_MspInit+0xcc>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d0:	4b10      	ldr	r3, [pc, #64]	; (8001314 <HAL_ADC_MspInit+0xcc>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <HAL_ADC_MspInit+0xcc>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012dc:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <HAL_ADC_MspInit+0xcc>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012ee:	230b      	movs	r3, #11
 80012f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <HAL_ADC_MspInit+0xd0>)
 8001302:	f001 fe51 	bl	8002fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001306:	bf00      	nop
 8001308:	37b0      	adds	r7, #176	; 0xb0
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	50040000 	.word	0x50040000
 8001314:	40021000 	.word	0x40021000
 8001318:	48000800 	.word	0x48000800

0800131c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b0ac      	sub	sp, #176	; 0xb0
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2288      	movs	r2, #136	; 0x88
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f004 f889 	bl	8005454 <memset>
  if(huart->Instance==USART2)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a21      	ldr	r2, [pc, #132]	; (80013cc <HAL_UART_MspInit+0xb0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d13b      	bne.n	80013c4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800134c:	2302      	movs	r3, #2
 800134e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001350:	2300      	movs	r3, #0
 8001352:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4618      	mov	r0, r3
 800135a:	f002 fe4b 	bl	8003ff4 <HAL_RCCEx_PeriphCLKConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001364:	f7ff ff46 	bl	80011f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <HAL_UART_MspInit+0xb4>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <HAL_UART_MspInit+0xb4>)
 800136e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001372:	6593      	str	r3, [r2, #88]	; 0x58
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_UART_MspInit+0xb4>)
 8001376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_UART_MspInit+0xb4>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001384:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <HAL_UART_MspInit+0xb4>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_UART_MspInit+0xb4>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001398:	230c      	movs	r3, #12
 800139a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013b0:	2307      	movs	r3, #7
 80013b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013ba:	4619      	mov	r1, r3
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c0:	f001 fdf2 	bl	8002fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013c4:	bf00      	nop
 80013c6:	37b0      	adds	r7, #176	; 0xb0
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40004400 	.word	0x40004400
 80013d0:	40021000 	.word	0x40021000

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <NMI_Handler+0x4>

080013da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler+0x4>

080013e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001420:	f000 f960 	bl	80016e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return 1;
 800142c:	2301      	movs	r3, #1
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_kill>:

int _kill(int pid, int sig)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001442:	f003 ffdd 	bl	8005400 <__errno>
 8001446:	4603      	mov	r3, r0
 8001448:	2216      	movs	r2, #22
 800144a:	601a      	str	r2, [r3, #0]
  return -1;
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <_exit>:

void _exit (int status)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ffe7 	bl	8001438 <_kill>
  while (1) {}    /* Make sure we hang here */
 800146a:	e7fe      	b.n	800146a <_exit+0x12>

0800146c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	e00a      	b.n	8001494 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800147e:	f3af 8000 	nop.w
 8001482:	4601      	mov	r1, r0
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	60ba      	str	r2, [r7, #8]
 800148a:	b2ca      	uxtb	r2, r1
 800148c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3301      	adds	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	429a      	cmp	r2, r3
 800149a:	dbf0      	blt.n	800147e <_read+0x12>
  }

  return len;
 800149c:	687b      	ldr	r3, [r7, #4]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e009      	b.n	80014cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	60ba      	str	r2, [r7, #8]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fcf3 	bl	8000eac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbf1      	blt.n	80014b8 <_write+0x12>
  }
  return len;
 80014d4:	687b      	ldr	r3, [r7, #4]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <_close>:

int _close(int file)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001506:	605a      	str	r2, [r3, #4]
  return 0;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <_isatty>:

int _isatty(int file)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <_sbrk+0x5c>)
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <_sbrk+0x60>)
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <_sbrk+0x64>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <_sbrk+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	d207      	bcs.n	8001588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001578:	f003 ff42 	bl	8005400 <__errno>
 800157c:	4603      	mov	r3, r0
 800157e:	220c      	movs	r2, #12
 8001580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	e009      	b.n	800159c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <_sbrk+0x64>)
 8001598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20018000 	.word	0x20018000
 80015a8:	00000400 	.word	0x00000400
 80015ac:	200002e0 	.word	0x200002e0
 80015b0:	200002f8 	.word	0x200002f8

080015b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <SystemInit+0x20>)
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <SystemInit+0x20>)
 80015c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001610 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015dc:	f7ff ffea 	bl	80015b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e0:	480c      	ldr	r0, [pc, #48]	; (8001614 <LoopForever+0x6>)
  ldr r1, =_edata
 80015e2:	490d      	ldr	r1, [pc, #52]	; (8001618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e4:	4a0d      	ldr	r2, [pc, #52]	; (800161c <LoopForever+0xe>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e8:	e002      	b.n	80015f0 <LoopCopyDataInit>

080015ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ee:	3304      	adds	r3, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f4:	d3f9      	bcc.n	80015ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015f8:	4c0a      	ldr	r4, [pc, #40]	; (8001624 <LoopForever+0x16>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015fc:	e001      	b.n	8001602 <LoopFillZerobss>

080015fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001600:	3204      	adds	r2, #4

08001602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001604:	d3fb      	bcc.n	80015fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001606:	f003 ff01 	bl	800540c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800160a:	f7ff fc67 	bl	8000edc <main>

0800160e <LoopForever>:

LoopForever:
    b LoopForever
 800160e:	e7fe      	b.n	800160e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001610:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800161c:	0800831c 	.word	0x0800831c
  ldr r2, =_sbss
 8001620:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001624:	200002f8 	.word	0x200002f8

08001628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC1_2_IRQHandler>
	...

0800162c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_Init+0x3c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <HAL_Init+0x3c>)
 800163c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001640:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001642:	2003      	movs	r0, #3
 8001644:	f001 fc7c 	bl	8002f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001648:	2000      	movs	r0, #0
 800164a:	f000 f80f 	bl	800166c <HAL_InitTick>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	e001      	b.n	800165e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800165a:	f7ff fdd1 	bl	8001200 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800165e:	79fb      	ldrb	r3, [r7, #7]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40022000 	.word	0x40022000

0800166c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_InitTick+0x6c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d023      	beq.n	80016c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_InitTick+0x70>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <HAL_InitTick+0x6c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f001 fc79 	bl	8002f8e <HAL_SYSTICK_Config>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10f      	bne.n	80016c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b0f      	cmp	r3, #15
 80016a6:	d809      	bhi.n	80016bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a8:	2200      	movs	r2, #0
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f001 fc51 	bl	8002f56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016b4:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <HAL_InitTick+0x74>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	e007      	b.n	80016cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	e004      	b.n	80016cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	e001      	b.n	80016cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000008 	.word	0x20000008
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000004 	.word	0x20000004

080016e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x20>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x24>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4413      	add	r3, r2
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_IncTick+0x24>)
 80016f6:	6013      	str	r3, [r2, #0]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000008 	.word	0x20000008
 8001708:	200002e4 	.word	0x200002e4

0800170c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_GetTick+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	200002e4 	.word	0x200002e4

08001724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff ffee 	bl	800170c <HAL_GetTick>
 8001730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800173c:	d005      	beq.n	800174a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_Delay+0x44>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800174a:	bf00      	nop
 800174c:	f7ff ffde 	bl	800170c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d8f7      	bhi.n	800174c <HAL_Delay+0x28>
  {
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000008 	.word	0x20000008

0800176c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	609a      	str	r2, [r3, #8]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	609a      	str	r2, [r3, #8]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3360      	adds	r3, #96	; 0x60
 80017e6:	461a      	mov	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <LL_ADC_SetOffset+0x44>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	4313      	orrs	r3, r2
 8001804:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800180c:	bf00      	nop
 800180e:	371c      	adds	r7, #28
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	03fff000 	.word	0x03fff000

0800181c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3360      	adds	r3, #96	; 0x60
 800182a:	461a      	mov	r2, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3360      	adds	r3, #96	; 0x60
 8001858:	461a      	mov	r2, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	431a      	orrs	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001872:	bf00      	nop
 8001874:	371c      	adds	r7, #28
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	3330      	adds	r3, #48	; 0x30
 80018b4:	461a      	mov	r2, r3
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	4413      	add	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	211f      	movs	r1, #31
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	401a      	ands	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	0e9b      	lsrs	r3, r3, #26
 80018dc:	f003 011f 	and.w	r1, r3, #31
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f003 031f 	and.w	r3, r3, #31
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	431a      	orrs	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018f0:	bf00      	nop
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3314      	adds	r3, #20
 800190c:	461a      	mov	r2, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	0e5b      	lsrs	r3, r3, #25
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	4413      	add	r3, r2
 800191a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	0d1b      	lsrs	r3, r3, #20
 8001924:	f003 031f 	and.w	r3, r3, #31
 8001928:	2107      	movs	r1, #7
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	401a      	ands	r2, r3
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	0d1b      	lsrs	r3, r3, #20
 8001936:	f003 031f 	and.w	r3, r3, #31
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	431a      	orrs	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001946:	bf00      	nop
 8001948:	371c      	adds	r7, #28
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196c:	43db      	mvns	r3, r3
 800196e:	401a      	ands	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0318 	and.w	r3, r3, #24
 8001976:	4908      	ldr	r1, [pc, #32]	; (8001998 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001978:	40d9      	lsrs	r1, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	400b      	ands	r3, r1
 800197e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001982:	431a      	orrs	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	0007ffff 	.word	0x0007ffff

0800199c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 031f 	and.w	r3, r3, #31
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80019e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6093      	str	r3, [r2, #8]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a0c:	d101      	bne.n	8001a12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a5c:	d101      	bne.n	8001a62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a84:	f043 0201 	orr.w	r2, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001aa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aac:	f043 0202 	orr.w	r2, r3, #2
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <LL_ADC_IsEnabled+0x18>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <LL_ADC_IsEnabled+0x1a>
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d101      	bne.n	8001afe <LL_ADC_IsDisableOngoing+0x18>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <LL_ADC_IsDisableOngoing+0x1a>
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b20:	f043 0204 	orr.w	r2, r3, #4
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d101      	bne.n	8001b4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d101      	bne.n	8001b72 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e136      	b.n	8001e08 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fb4d 	bl	8001248 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff19 	bl	80019f8 <LL_ADC_IsDeepPowerDownEnabled>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d004      	beq.n	8001bd6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff feff 	bl	80019d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ff34 	bl	8001a48 <LL_ADC_IsInternalRegulatorEnabled>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d115      	bne.n	8001c12 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ff18 	bl	8001a20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bf0:	4b87      	ldr	r3, [pc, #540]	; (8001e10 <HAL_ADC_Init+0x290>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	099b      	lsrs	r3, r3, #6
 8001bf6:	4a87      	ldr	r2, [pc, #540]	; (8001e14 <HAL_ADC_Init+0x294>)
 8001bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfc:	099b      	lsrs	r3, r3, #6
 8001bfe:	3301      	adds	r3, #1
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c04:	e002      	b.n	8001c0c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f9      	bne.n	8001c06 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff16 	bl	8001a48 <LL_ADC_IsInternalRegulatorEnabled>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10d      	bne.n	8001c3e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c26:	f043 0210 	orr.w	r2, r3, #16
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	f043 0201 	orr.w	r2, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff76 	bl	8001b34 <LL_ADC_REG_IsConversionOngoing>
 8001c48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 80cf 	bne.w	8001df6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 80cb 	bne.w	8001df6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c64:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c68:	f043 0202 	orr.w	r2, r3, #2
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff23 	bl	8001ac0 <LL_ADC_IsEnabled>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d115      	bne.n	8001cac <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c80:	4865      	ldr	r0, [pc, #404]	; (8001e18 <HAL_ADC_Init+0x298>)
 8001c82:	f7ff ff1d 	bl	8001ac0 <LL_ADC_IsEnabled>
 8001c86:	4604      	mov	r4, r0
 8001c88:	4864      	ldr	r0, [pc, #400]	; (8001e1c <HAL_ADC_Init+0x29c>)
 8001c8a:	f7ff ff19 	bl	8001ac0 <LL_ADC_IsEnabled>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	431c      	orrs	r4, r3
 8001c92:	4863      	ldr	r0, [pc, #396]	; (8001e20 <HAL_ADC_Init+0x2a0>)
 8001c94:	f7ff ff14 	bl	8001ac0 <LL_ADC_IsEnabled>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4323      	orrs	r3, r4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d105      	bne.n	8001cac <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	485f      	ldr	r0, [pc, #380]	; (8001e24 <HAL_ADC_Init+0x2a4>)
 8001ca8:	f7ff fd60 	bl	800176c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7e5b      	ldrb	r3, [r3, #25]
 8001cb0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cb6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001cbc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001cc2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cca:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d106      	bne.n	8001ce8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	045b      	lsls	r3, r3, #17
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	4b47      	ldr	r3, [pc, #284]	; (8001e28 <HAL_ADC_Init+0x2a8>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	69b9      	ldr	r1, [r7, #24]
 8001d14:	430b      	orrs	r3, r1
 8001d16:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff09 	bl	8001b34 <LL_ADC_REG_IsConversionOngoing>
 8001d22:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff16 	bl	8001b5a <LL_ADC_INJ_IsConversionOngoing>
 8001d2e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d13d      	bne.n	8001db2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d13a      	bne.n	8001db2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d40:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d48:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d58:	f023 0302 	bic.w	r3, r3, #2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	69b9      	ldr	r1, [r7, #24]
 8001d62:	430b      	orrs	r3, r1
 8001d64:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d118      	bne.n	8001da2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d7a:	f023 0304 	bic.w	r3, r3, #4
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d86:	4311      	orrs	r1, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d8c:	4311      	orrs	r1, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d92:	430a      	orrs	r2, r1
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	611a      	str	r2, [r3, #16]
 8001da0:	e007      	b.n	8001db2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0201 	bic.w	r2, r2, #1
 8001db0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d10c      	bne.n	8001dd4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	f023 010f 	bic.w	r1, r3, #15
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	1e5a      	subs	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd2:	e007      	b.n	8001de4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 020f 	bic.w	r2, r2, #15
 8001de2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de8:	f023 0303 	bic.w	r3, r3, #3
 8001dec:	f043 0201 	orr.w	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	655a      	str	r2, [r3, #84]	; 0x54
 8001df4:	e007      	b.n	8001e06 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	f043 0210 	orr.w	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e06:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3724      	adds	r7, #36	; 0x24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd90      	pop	{r4, r7, pc}
 8001e10:	20000000 	.word	0x20000000
 8001e14:	053e2d63 	.word	0x053e2d63
 8001e18:	50040000 	.word	0x50040000
 8001e1c:	50040100 	.word	0x50040100
 8001e20:	50040200 	.word	0x50040200
 8001e24:	50040300 	.word	0x50040300
 8001e28:	fff0c007 	.word	0xfff0c007

08001e2c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e34:	4857      	ldr	r0, [pc, #348]	; (8001f94 <HAL_ADC_Start+0x168>)
 8001e36:	f7ff fdb1 	bl	800199c <LL_ADC_GetMultimode>
 8001e3a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fe77 	bl	8001b34 <LL_ADC_REG_IsConversionOngoing>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f040 809c 	bne.w	8001f86 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_ADC_Start+0x30>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e097      	b.n	8001f8c <HAL_ADC_Start+0x160>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 fd71 	bl	800294c <ADC_Enable>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f040 8083 	bne.w	8001f7c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a42      	ldr	r2, [pc, #264]	; (8001f98 <HAL_ADC_Start+0x16c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d002      	beq.n	8001e9a <HAL_ADC_Start+0x6e>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	e000      	b.n	8001e9c <HAL_ADC_Start+0x70>
 8001e9a:	4b40      	ldr	r3, [pc, #256]	; (8001f9c <HAL_ADC_Start+0x170>)
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d002      	beq.n	8001eaa <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d105      	bne.n	8001eb6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec2:	d106      	bne.n	8001ed2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	f023 0206 	bic.w	r2, r3, #6
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	659a      	str	r2, [r3, #88]	; 0x58
 8001ed0:	e002      	b.n	8001ed8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	221c      	movs	r2, #28
 8001ede:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a2a      	ldr	r2, [pc, #168]	; (8001f98 <HAL_ADC_Start+0x16c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d002      	beq.n	8001ef8 <HAL_ADC_Start+0xcc>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	e000      	b.n	8001efa <HAL_ADC_Start+0xce>
 8001ef8:	4b28      	ldr	r3, [pc, #160]	; (8001f9c <HAL_ADC_Start+0x170>)
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d008      	beq.n	8001f14 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	d002      	beq.n	8001f14 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	2b09      	cmp	r3, #9
 8001f12:	d114      	bne.n	8001f3e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fde8 	bl	8001b0c <LL_ADC_REG_StartConversion>
 8001f3c:	e025      	b.n	8001f8a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <HAL_ADC_Start+0x16c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d002      	beq.n	8001f5a <HAL_ADC_Start+0x12e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	e000      	b.n	8001f5c <HAL_ADC_Start+0x130>
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <HAL_ADC_Start+0x170>)
 8001f5c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00f      	beq.n	8001f8a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
 8001f7a:	e006      	b.n	8001f8a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f84:	e001      	b.n	8001f8a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f86:	2302      	movs	r3, #2
 8001f88:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	50040300 	.word	0x50040300
 8001f98:	50040100 	.word	0x50040100
 8001f9c:	50040000 	.word	0x50040000

08001fa0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001faa:	4866      	ldr	r0, [pc, #408]	; (8002144 <HAL_ADC_PollForConversion+0x1a4>)
 8001fac:	f7ff fcf6 	bl	800199c <LL_ADC_GetMultimode>
 8001fb0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d102      	bne.n	8001fc0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001fba:	2308      	movs	r3, #8
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	e02a      	b.n	8002016 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d002      	beq.n	8001fd2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2b09      	cmp	r3, #9
 8001fd0:	d111      	bne.n	8001ff6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe4:	f043 0220 	orr.w	r2, r3, #32
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0a4      	b.n	800213a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001ff4:	e00f      	b.n	8002016 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001ff6:	4853      	ldr	r0, [pc, #332]	; (8002144 <HAL_ADC_PollForConversion+0x1a4>)
 8001ff8:	f7ff fcde 	bl	80019b8 <LL_ADC_GetMultiDMATransfer>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e093      	b.n	800213a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002012:	2304      	movs	r3, #4
 8002014:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002016:	f7ff fb79 	bl	800170c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800201c:	e021      	b.n	8002062 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002024:	d01d      	beq.n	8002062 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002026:	f7ff fb71 	bl	800170c <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d302      	bcc.n	800203c <HAL_ADC_PollForConversion+0x9c>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d112      	bne.n	8002062 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	4013      	ands	r3, r2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10b      	bne.n	8002062 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	f043 0204 	orr.w	r2, r3, #4
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e06b      	b.n	800213a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	4013      	ands	r3, r2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0d6      	beq.n	800201e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002074:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fbfc 	bl	800187e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01c      	beq.n	80020c6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	7e5b      	ldrb	r3, [r3, #25]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d118      	bne.n	80020c6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d111      	bne.n	80020c6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d105      	bne.n	80020c6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020be:	f043 0201 	orr.w	r2, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <HAL_ADC_PollForConversion+0x1a8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d002      	beq.n	80020d6 <HAL_ADC_PollForConversion+0x136>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	e000      	b.n	80020d8 <HAL_ADC_PollForConversion+0x138>
 80020d6:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HAL_ADC_PollForConversion+0x1ac>)
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	4293      	cmp	r3, r2
 80020de:	d008      	beq.n	80020f2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d002      	beq.n	80020f2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b09      	cmp	r3, #9
 80020f0:	d104      	bne.n	80020fc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	61bb      	str	r3, [r7, #24]
 80020fa:	e00c      	b.n	8002116 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a11      	ldr	r2, [pc, #68]	; (8002148 <HAL_ADC_PollForConversion+0x1a8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d002      	beq.n	800210c <HAL_ADC_PollForConversion+0x16c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	e000      	b.n	800210e <HAL_ADC_PollForConversion+0x16e>
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <HAL_ADC_PollForConversion+0x1ac>)
 800210e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	2b08      	cmp	r3, #8
 800211a:	d104      	bne.n	8002126 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2208      	movs	r2, #8
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	e008      	b.n	8002138 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d103      	bne.n	8002138 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	220c      	movs	r2, #12
 8002136:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3720      	adds	r7, #32
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	50040300 	.word	0x50040300
 8002148:	50040100 	.word	0x50040100
 800214c:	50040000 	.word	0x50040000

08002150 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b0b6      	sub	sp, #216	; 0xd8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_ADC_ConfigChannel+0x22>
 800218a:	2302      	movs	r3, #2
 800218c:	e3c7      	b.n	800291e <HAL_ADC_ConfigChannel+0x7b2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fcca 	bl	8001b34 <LL_ADC_REG_IsConversionOngoing>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 83a8 	bne.w	80028f8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d824      	bhi.n	80021fa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	3b02      	subs	r3, #2
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d81b      	bhi.n	80021f2 <HAL_ADC_ConfigChannel+0x86>
 80021ba:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <HAL_ADC_ConfigChannel+0x54>)
 80021bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c0:	080021d1 	.word	0x080021d1
 80021c4:	080021d9 	.word	0x080021d9
 80021c8:	080021e1 	.word	0x080021e1
 80021cc:	080021e9 	.word	0x080021e9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	220c      	movs	r2, #12
 80021d4:	605a      	str	r2, [r3, #4]
          break;
 80021d6:	e011      	b.n	80021fc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2212      	movs	r2, #18
 80021dc:	605a      	str	r2, [r3, #4]
          break;
 80021de:	e00d      	b.n	80021fc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2218      	movs	r2, #24
 80021e4:	605a      	str	r2, [r3, #4]
          break;
 80021e6:	e009      	b.n	80021fc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ee:	605a      	str	r2, [r3, #4]
          break;
 80021f0:	e004      	b.n	80021fc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2206      	movs	r2, #6
 80021f6:	605a      	str	r2, [r3, #4]
          break;
 80021f8:	e000      	b.n	80021fc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80021fa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6859      	ldr	r1, [r3, #4]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	f7ff fb4b 	bl	80018a4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fc8e 	bl	8001b34 <LL_ADC_REG_IsConversionOngoing>
 8002218:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fc9a 	bl	8001b5a <LL_ADC_INJ_IsConversionOngoing>
 8002226:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800222a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800222e:	2b00      	cmp	r3, #0
 8002230:	f040 81a6 	bne.w	8002580 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002234:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002238:	2b00      	cmp	r3, #0
 800223a:	f040 81a1 	bne.w	8002580 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6819      	ldr	r1, [r3, #0]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	461a      	mov	r2, r3
 800224c:	f7ff fb56 	bl	80018fc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	695a      	ldr	r2, [r3, #20]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	08db      	lsrs	r3, r3, #3
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b04      	cmp	r3, #4
 8002270:	d00a      	beq.n	8002288 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	6919      	ldr	r1, [r3, #16]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002282:	f7ff faa7 	bl	80017d4 <LL_ADC_SetOffset>
 8002286:	e17b      	b.n	8002580 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fac4 	bl	800181c <LL_ADC_GetOffsetChannel>
 8002294:	4603      	mov	r3, r0
 8002296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10a      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x148>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fab9 	bl	800181c <LL_ADC_GetOffsetChannel>
 80022aa:	4603      	mov	r3, r0
 80022ac:	0e9b      	lsrs	r3, r3, #26
 80022ae:	f003 021f 	and.w	r2, r3, #31
 80022b2:	e01e      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x186>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff faae 	bl	800181c <LL_ADC_GetOffsetChannel>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80022d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80022e2:	2320      	movs	r3, #32
 80022e4:	e004      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80022e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d105      	bne.n	800230a <HAL_ADC_ConfigChannel+0x19e>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	0e9b      	lsrs	r3, r3, #26
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	e018      	b.n	800233c <HAL_ADC_ConfigChannel+0x1d0>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800231e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002322:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002326:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800232e:	2320      	movs	r3, #32
 8002330:	e004      	b.n	800233c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002332:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800233c:	429a      	cmp	r2, r3
 800233e:	d106      	bne.n	800234e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2200      	movs	r2, #0
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fa7d 	bl	8001848 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2101      	movs	r1, #1
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fa61 	bl	800181c <LL_ADC_GetOffsetChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10a      	bne.n	800237a <HAL_ADC_ConfigChannel+0x20e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2101      	movs	r1, #1
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fa56 	bl	800181c <LL_ADC_GetOffsetChannel>
 8002370:	4603      	mov	r3, r0
 8002372:	0e9b      	lsrs	r3, r3, #26
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	e01e      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x24c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2101      	movs	r1, #1
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fa4b 	bl	800181c <LL_ADC_GetOffsetChannel>
 8002386:	4603      	mov	r3, r0
 8002388:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002398:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800239c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80023a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80023a8:	2320      	movs	r3, #32
 80023aa:	e004      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80023ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d105      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x264>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	0e9b      	lsrs	r3, r3, #26
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	e018      	b.n	8002402 <HAL_ADC_ConfigChannel+0x296>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80023e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80023ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80023f4:	2320      	movs	r3, #32
 80023f6:	e004      	b.n	8002402 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80023f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023fc:	fab3 f383 	clz	r3, r3
 8002400:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002402:	429a      	cmp	r2, r3
 8002404:	d106      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2200      	movs	r2, #0
 800240c:	2101      	movs	r1, #1
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fa1a 	bl	8001848 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2102      	movs	r1, #2
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff f9fe 	bl	800181c <LL_ADC_GetOffsetChannel>
 8002420:	4603      	mov	r3, r0
 8002422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10a      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x2d4>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2102      	movs	r1, #2
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff f9f3 	bl	800181c <LL_ADC_GetOffsetChannel>
 8002436:	4603      	mov	r3, r0
 8002438:	0e9b      	lsrs	r3, r3, #26
 800243a:	f003 021f 	and.w	r2, r3, #31
 800243e:	e01e      	b.n	800247e <HAL_ADC_ConfigChannel+0x312>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2102      	movs	r1, #2
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff f9e8 	bl	800181c <LL_ADC_GetOffsetChannel>
 800244c:	4603      	mov	r3, r0
 800244e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800245e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002462:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002466:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800246e:	2320      	movs	r3, #32
 8002470:	e004      	b.n	800247c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002472:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002486:	2b00      	cmp	r3, #0
 8002488:	d105      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x32a>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0e9b      	lsrs	r3, r3, #26
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	e016      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x358>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80024a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80024ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80024b6:	2320      	movs	r3, #32
 80024b8:	e004      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80024ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d106      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2200      	movs	r2, #0
 80024ce:	2102      	movs	r1, #2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff f9b9 	bl	8001848 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2103      	movs	r1, #3
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff f99d 	bl	800181c <LL_ADC_GetOffsetChannel>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10a      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x396>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2103      	movs	r1, #3
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff f992 	bl	800181c <LL_ADC_GetOffsetChannel>
 80024f8:	4603      	mov	r3, r0
 80024fa:	0e9b      	lsrs	r3, r3, #26
 80024fc:	f003 021f 	and.w	r2, r3, #31
 8002500:	e017      	b.n	8002532 <HAL_ADC_ConfigChannel+0x3c6>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2103      	movs	r1, #3
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff f987 	bl	800181c <LL_ADC_GetOffsetChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800251a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800251c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800251e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002524:	2320      	movs	r3, #32
 8002526:	e003      	b.n	8002530 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253a:	2b00      	cmp	r3, #0
 800253c:	d105      	bne.n	800254a <HAL_ADC_ConfigChannel+0x3de>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	0e9b      	lsrs	r3, r3, #26
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	e011      	b.n	800256e <HAL_ADC_ConfigChannel+0x402>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800255a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800255c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002562:	2320      	movs	r3, #32
 8002564:	e003      	b.n	800256e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002568:	fab3 f383 	clz	r3, r3
 800256c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800256e:	429a      	cmp	r2, r3
 8002570:	d106      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2200      	movs	r2, #0
 8002578:	2103      	movs	r1, #3
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff f964 	bl	8001848 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fa9b 	bl	8001ac0 <LL_ADC_IsEnabled>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	f040 813f 	bne.w	8002810 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6819      	ldr	r1, [r3, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	461a      	mov	r2, r3
 80025a0:	f7ff f9d8 	bl	8001954 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4a8e      	ldr	r2, [pc, #568]	; (80027e4 <HAL_ADC_ConfigChannel+0x678>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	f040 8130 	bne.w	8002810 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10b      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x46c>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	0e9b      	lsrs	r3, r3, #26
 80025c6:	3301      	adds	r3, #1
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	2b09      	cmp	r3, #9
 80025ce:	bf94      	ite	ls
 80025d0:	2301      	movls	r3, #1
 80025d2:	2300      	movhi	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	e019      	b.n	800260c <HAL_ADC_ConfigChannel+0x4a0>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80025e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025e8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80025ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e003      	b.n	80025fc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80025f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	2b09      	cmp	r3, #9
 8002604:	bf94      	ite	ls
 8002606:	2301      	movls	r3, #1
 8002608:	2300      	movhi	r3, #0
 800260a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800260c:	2b00      	cmp	r3, #0
 800260e:	d079      	beq.n	8002704 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002618:	2b00      	cmp	r3, #0
 800261a:	d107      	bne.n	800262c <HAL_ADC_ConfigChannel+0x4c0>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0e9b      	lsrs	r3, r3, #26
 8002622:	3301      	adds	r3, #1
 8002624:	069b      	lsls	r3, r3, #26
 8002626:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800262a:	e015      	b.n	8002658 <HAL_ADC_ConfigChannel+0x4ec>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800263a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800263c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800263e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002644:	2320      	movs	r3, #32
 8002646:	e003      	b.n	8002650 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	3301      	adds	r3, #1
 8002652:	069b      	lsls	r3, r3, #26
 8002654:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002660:	2b00      	cmp	r3, #0
 8002662:	d109      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x50c>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	0e9b      	lsrs	r3, r3, #26
 800266a:	3301      	adds	r3, #1
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	2101      	movs	r1, #1
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	e017      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x53c>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002688:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800268a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002690:	2320      	movs	r3, #32
 8002692:	e003      	b.n	800269c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002696:	fab3 f383 	clz	r3, r3
 800269a:	b2db      	uxtb	r3, r3
 800269c:	3301      	adds	r3, #1
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	2101      	movs	r1, #1
 80026a4:	fa01 f303 	lsl.w	r3, r1, r3
 80026a8:	ea42 0103 	orr.w	r1, r2, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10a      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x562>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	3301      	adds	r3, #1
 80026c0:	f003 021f 	and.w	r2, r3, #31
 80026c4:	4613      	mov	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	4413      	add	r3, r2
 80026ca:	051b      	lsls	r3, r3, #20
 80026cc:	e018      	b.n	8002700 <HAL_ADC_ConfigChannel+0x594>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80026e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80026e6:	2320      	movs	r3, #32
 80026e8:	e003      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80026ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	3301      	adds	r3, #1
 80026f4:	f003 021f 	and.w	r2, r3, #31
 80026f8:	4613      	mov	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4413      	add	r3, r2
 80026fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002700:	430b      	orrs	r3, r1
 8002702:	e080      	b.n	8002806 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270c:	2b00      	cmp	r3, #0
 800270e:	d107      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x5b4>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	0e9b      	lsrs	r3, r3, #26
 8002716:	3301      	adds	r3, #1
 8002718:	069b      	lsls	r3, r3, #26
 800271a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800271e:	e015      	b.n	800274c <HAL_ADC_ConfigChannel+0x5e0>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800272e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002730:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002738:	2320      	movs	r3, #32
 800273a:	e003      	b.n	8002744 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800273c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	3301      	adds	r3, #1
 8002746:	069b      	lsls	r3, r3, #26
 8002748:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002754:	2b00      	cmp	r3, #0
 8002756:	d109      	bne.n	800276c <HAL_ADC_ConfigChannel+0x600>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	0e9b      	lsrs	r3, r3, #26
 800275e:	3301      	adds	r3, #1
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	2101      	movs	r1, #1
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	e017      	b.n	800279c <HAL_ADC_ConfigChannel+0x630>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	61fb      	str	r3, [r7, #28]
  return result;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002784:	2320      	movs	r3, #32
 8002786:	e003      	b.n	8002790 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	3301      	adds	r3, #1
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	2101      	movs	r1, #1
 8002798:	fa01 f303 	lsl.w	r3, r1, r3
 800279c:	ea42 0103 	orr.w	r1, r2, r3
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10d      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x65c>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	0e9b      	lsrs	r3, r3, #26
 80027b2:	3301      	adds	r3, #1
 80027b4:	f003 021f 	and.w	r2, r3, #31
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	3b1e      	subs	r3, #30
 80027c0:	051b      	lsls	r3, r3, #20
 80027c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027c6:	e01d      	b.n	8002804 <HAL_ADC_ConfigChannel+0x698>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	613b      	str	r3, [r7, #16]
  return result;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d103      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80027e0:	2320      	movs	r3, #32
 80027e2:	e005      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x684>
 80027e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	3301      	adds	r3, #1
 80027f2:	f003 021f 	and.w	r2, r3, #31
 80027f6:	4613      	mov	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4413      	add	r3, r2
 80027fc:	3b1e      	subs	r3, #30
 80027fe:	051b      	lsls	r3, r3, #20
 8002800:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002804:	430b      	orrs	r3, r1
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	6892      	ldr	r2, [r2, #8]
 800280a:	4619      	mov	r1, r3
 800280c:	f7ff f876 	bl	80018fc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b44      	ldr	r3, [pc, #272]	; (8002928 <HAL_ADC_ConfigChannel+0x7bc>)
 8002816:	4013      	ands	r3, r2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d07a      	beq.n	8002912 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800281c:	4843      	ldr	r0, [pc, #268]	; (800292c <HAL_ADC_ConfigChannel+0x7c0>)
 800281e:	f7fe ffcb 	bl	80017b8 <LL_ADC_GetCommonPathInternalCh>
 8002822:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a41      	ldr	r2, [pc, #260]	; (8002930 <HAL_ADC_ConfigChannel+0x7c4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d12c      	bne.n	800288a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002830:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002834:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d126      	bne.n	800288a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a3c      	ldr	r2, [pc, #240]	; (8002934 <HAL_ADC_ConfigChannel+0x7c8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d004      	beq.n	8002850 <HAL_ADC_ConfigChannel+0x6e4>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a3b      	ldr	r2, [pc, #236]	; (8002938 <HAL_ADC_ConfigChannel+0x7cc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d15d      	bne.n	800290c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002854:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002858:	4619      	mov	r1, r3
 800285a:	4834      	ldr	r0, [pc, #208]	; (800292c <HAL_ADC_ConfigChannel+0x7c0>)
 800285c:	f7fe ff99 	bl	8001792 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002860:	4b36      	ldr	r3, [pc, #216]	; (800293c <HAL_ADC_ConfigChannel+0x7d0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	099b      	lsrs	r3, r3, #6
 8002866:	4a36      	ldr	r2, [pc, #216]	; (8002940 <HAL_ADC_ConfigChannel+0x7d4>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	099b      	lsrs	r3, r3, #6
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800287a:	e002      	b.n	8002882 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3b01      	subs	r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f9      	bne.n	800287c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002888:	e040      	b.n	800290c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a2d      	ldr	r2, [pc, #180]	; (8002944 <HAL_ADC_ConfigChannel+0x7d8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d118      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x75a>
 8002894:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d112      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a23      	ldr	r2, [pc, #140]	; (8002934 <HAL_ADC_ConfigChannel+0x7c8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_ADC_ConfigChannel+0x748>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a22      	ldr	r2, [pc, #136]	; (8002938 <HAL_ADC_ConfigChannel+0x7cc>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d12d      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028bc:	4619      	mov	r1, r3
 80028be:	481b      	ldr	r0, [pc, #108]	; (800292c <HAL_ADC_ConfigChannel+0x7c0>)
 80028c0:	f7fe ff67 	bl	8001792 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028c4:	e024      	b.n	8002910 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a1f      	ldr	r2, [pc, #124]	; (8002948 <HAL_ADC_ConfigChannel+0x7dc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d120      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d11a      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a14      	ldr	r2, [pc, #80]	; (8002934 <HAL_ADC_ConfigChannel+0x7c8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d115      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028ee:	4619      	mov	r1, r3
 80028f0:	480e      	ldr	r0, [pc, #56]	; (800292c <HAL_ADC_ConfigChannel+0x7c0>)
 80028f2:	f7fe ff4e 	bl	8001792 <LL_ADC_SetCommonPathInternalCh>
 80028f6:	e00c      	b.n	8002912 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fc:	f043 0220 	orr.w	r2, r3, #32
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800290a:	e002      	b.n	8002912 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800290c:	bf00      	nop
 800290e:	e000      	b.n	8002912 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002910:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800291a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800291e:	4618      	mov	r0, r3
 8002920:	37d8      	adds	r7, #216	; 0xd8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	80080000 	.word	0x80080000
 800292c:	50040300 	.word	0x50040300
 8002930:	c7520000 	.word	0xc7520000
 8002934:	50040000 	.word	0x50040000
 8002938:	50040200 	.word	0x50040200
 800293c:	20000000 	.word	0x20000000
 8002940:	053e2d63 	.word	0x053e2d63
 8002944:	cb840000 	.word	0xcb840000
 8002948:	80000001 	.word	0x80000001

0800294c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002954:	2300      	movs	r3, #0
 8002956:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff f8af 	bl	8001ac0 <LL_ADC_IsEnabled>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d169      	bne.n	8002a3c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <ADC_Enable+0xfc>)
 8002970:	4013      	ands	r3, r2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00d      	beq.n	8002992 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297a:	f043 0210 	orr.w	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e055      	b.n	8002a3e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff f86a 	bl	8001a70 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800299c:	482b      	ldr	r0, [pc, #172]	; (8002a4c <ADC_Enable+0x100>)
 800299e:	f7fe ff0b 	bl	80017b8 <LL_ADC_GetCommonPathInternalCh>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d013      	beq.n	80029d4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029ac:	4b28      	ldr	r3, [pc, #160]	; (8002a50 <ADC_Enable+0x104>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	099b      	lsrs	r3, r3, #6
 80029b2:	4a28      	ldr	r2, [pc, #160]	; (8002a54 <ADC_Enable+0x108>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80029c6:	e002      	b.n	80029ce <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f9      	bne.n	80029c8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029d4:	f7fe fe9a 	bl	800170c <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029da:	e028      	b.n	8002a2e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff f86d 	bl	8001ac0 <LL_ADC_IsEnabled>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d104      	bne.n	80029f6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff f83d 	bl	8001a70 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029f6:	f7fe fe89 	bl	800170c <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d914      	bls.n	8002a2e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d00d      	beq.n	8002a2e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	f043 0210 	orr.w	r2, r3, #16
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	f043 0201 	orr.w	r2, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e007      	b.n	8002a3e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d1cf      	bne.n	80029dc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	8000003f 	.word	0x8000003f
 8002a4c:	50040300 	.word	0x50040300
 8002a50:	20000000 	.word	0x20000000
 8002a54:	053e2d63 	.word	0x053e2d63

08002a58 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff f83e 	bl	8001ae6 <LL_ADC_IsDisableOngoing>
 8002a6a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff f825 	bl	8001ac0 <LL_ADC_IsEnabled>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d047      	beq.n	8002b0c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d144      	bne.n	8002b0c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 030d 	and.w	r3, r3, #13
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d10c      	bne.n	8002aaa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe ffff 	bl	8001a98 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aa2:	f7fe fe33 	bl	800170c <HAL_GetTick>
 8002aa6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002aa8:	e029      	b.n	8002afe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aae:	f043 0210 	orr.w	r2, r3, #16
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	f043 0201 	orr.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e023      	b.n	8002b0e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ac6:	f7fe fe21 	bl	800170c <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d914      	bls.n	8002afe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00d      	beq.n	8002afe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae6:	f043 0210 	orr.w	r2, r3, #16
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af2:	f043 0201 	orr.w	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e007      	b.n	8002b0e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1dc      	bne.n	8002ac6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <LL_ADC_IsEnabled>:
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <LL_ADC_IsEnabled+0x18>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <LL_ADC_IsEnabled+0x1a>
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_ADC_StartCalibration>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002b4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	609a      	str	r2, [r3, #8]
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <LL_ADC_IsCalibrationOnGoing>:
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b82:	d101      	bne.n	8002b88 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d101      	bne.n	8002bae <LL_ADC_REG_IsConversionOngoing+0x18>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADCEx_Calibration_Start+0x1c>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e04d      	b.n	8002c74 <HAL_ADCEx_Calibration_Start+0xb8>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff ff39 	bl	8002a58 <ADC_Disable>
 8002be6:	4603      	mov	r3, r0
 8002be8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d136      	bne.n	8002c5e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bf8:	f023 0302 	bic.w	r3, r3, #2
 8002bfc:	f043 0202 	orr.w	r2, r3, #2
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6839      	ldr	r1, [r7, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff ff96 	bl	8002b3c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c10:	e014      	b.n	8002c3c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	3301      	adds	r3, #1
 8002c16:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002c1e:	d30d      	bcc.n	8002c3c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c24:	f023 0312 	bic.w	r3, r3, #18
 8002c28:	f043 0210 	orr.w	r2, r3, #16
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e01b      	b.n	8002c74 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff ff94 	bl	8002b6e <LL_ADC_IsCalibrationOnGoing>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e2      	bne.n	8002c12 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c50:	f023 0303 	bic.w	r3, r3, #3
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	655a      	str	r2, [r3, #84]	; 0x54
 8002c5c:	e005      	b.n	8002c6a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c62:	f043 0210 	orr.w	r2, r3, #16
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b09f      	sub	sp, #124	; 0x7c
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e093      	b.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a47      	ldr	r2, [pc, #284]	; (8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d102      	bne.n	8002cba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002cb4:	4b46      	ldr	r3, [pc, #280]	; (8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	e001      	b.n	8002cbe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10b      	bne.n	8002cdc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc8:	f043 0220 	orr.w	r2, r3, #32
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e072      	b.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff ff59 	bl	8002b96 <LL_ADC_REG_IsConversionOngoing>
 8002ce4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff ff53 	bl	8002b96 <LL_ADC_REG_IsConversionOngoing>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d154      	bne.n	8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d151      	bne.n	8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cfc:	4b35      	ldr	r3, [pc, #212]	; (8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002cfe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d02c      	beq.n	8002d62 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d1a:	035b      	lsls	r3, r3, #13
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d24:	4829      	ldr	r0, [pc, #164]	; (8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d26:	f7ff fef6 	bl	8002b16 <LL_ADC_IsEnabled>
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	4828      	ldr	r0, [pc, #160]	; (8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d2e:	f7ff fef2 	bl	8002b16 <LL_ADC_IsEnabled>
 8002d32:	4603      	mov	r3, r0
 8002d34:	431c      	orrs	r4, r3
 8002d36:	4828      	ldr	r0, [pc, #160]	; (8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002d38:	f7ff feed 	bl	8002b16 <LL_ADC_IsEnabled>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4323      	orrs	r3, r4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d137      	bne.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d4c:	f023 030f 	bic.w	r3, r3, #15
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	6811      	ldr	r1, [r2, #0]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	6892      	ldr	r2, [r2, #8]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d5e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d60:	e028      	b.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d6e:	4817      	ldr	r0, [pc, #92]	; (8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d70:	f7ff fed1 	bl	8002b16 <LL_ADC_IsEnabled>
 8002d74:	4604      	mov	r4, r0
 8002d76:	4816      	ldr	r0, [pc, #88]	; (8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d78:	f7ff fecd 	bl	8002b16 <LL_ADC_IsEnabled>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	431c      	orrs	r4, r3
 8002d80:	4815      	ldr	r0, [pc, #84]	; (8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002d82:	f7ff fec8 	bl	8002b16 <LL_ADC_IsEnabled>
 8002d86:	4603      	mov	r3, r0
 8002d88:	4323      	orrs	r3, r4
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d112      	bne.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d96:	f023 030f 	bic.w	r3, r3, #15
 8002d9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d9c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d9e:	e009      	b.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	f043 0220 	orr.w	r2, r3, #32
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002db2:	e000      	b.n	8002db6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002db4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dbe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	377c      	adds	r7, #124	; 0x7c
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd90      	pop	{r4, r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	50040000 	.word	0x50040000
 8002dd0:	50040100 	.word	0x50040100
 8002dd4:	50040300 	.word	0x50040300
 8002dd8:	50040200 	.word	0x50040200

08002ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e0e:	4a04      	ldr	r2, [pc, #16]	; (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	60d3      	str	r3, [r2, #12]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <__NVIC_GetPriorityGrouping+0x18>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	f003 0307 	and.w	r3, r3, #7
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	6039      	str	r1, [r7, #0]
 8002e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	db0a      	blt.n	8002e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	490c      	ldr	r1, [pc, #48]	; (8002e8c <__NVIC_SetPriority+0x4c>)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	0112      	lsls	r2, r2, #4
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	440b      	add	r3, r1
 8002e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e68:	e00a      	b.n	8002e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4908      	ldr	r1, [pc, #32]	; (8002e90 <__NVIC_SetPriority+0x50>)
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	3b04      	subs	r3, #4
 8002e78:	0112      	lsls	r2, r2, #4
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	761a      	strb	r2, [r3, #24]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	e000e100 	.word	0xe000e100
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b089      	sub	sp, #36	; 0x24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f1c3 0307 	rsb	r3, r3, #7
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	bf28      	it	cs
 8002eb2:	2304      	movcs	r3, #4
 8002eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	2b06      	cmp	r3, #6
 8002ebc:	d902      	bls.n	8002ec4 <NVIC_EncodePriority+0x30>
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3b03      	subs	r3, #3
 8002ec2:	e000      	b.n	8002ec6 <NVIC_EncodePriority+0x32>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43da      	mvns	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002edc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee6:	43d9      	mvns	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eec:	4313      	orrs	r3, r2
         );
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3724      	adds	r7, #36	; 0x24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f0c:	d301      	bcc.n	8002f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e00f      	b.n	8002f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f12:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <SysTick_Config+0x40>)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f1a:	210f      	movs	r1, #15
 8002f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f20:	f7ff ff8e 	bl	8002e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <SysTick_Config+0x40>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f2a:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <SysTick_Config+0x40>)
 8002f2c:	2207      	movs	r2, #7
 8002f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	e000e010 	.word	0xe000e010

08002f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ff47 	bl	8002ddc <__NVIC_SetPriorityGrouping>
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b086      	sub	sp, #24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f68:	f7ff ff5c 	bl	8002e24 <__NVIC_GetPriorityGrouping>
 8002f6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	6978      	ldr	r0, [r7, #20]
 8002f74:	f7ff ff8e 	bl	8002e94 <NVIC_EncodePriority>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff5d 	bl	8002e40 <__NVIC_SetPriority>
}
 8002f86:	bf00      	nop
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ffb0 	bl	8002efc <SysTick_Config>
 8002f9c:	4603      	mov	r3, r0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb6:	e17f      	b.n	80032b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 8171 	beq.w	80032b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d005      	beq.n	8002fe8 <HAL_GPIO_Init+0x40>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d130      	bne.n	800304a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800301e:	2201      	movs	r2, #1
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4013      	ands	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	f003 0201 	and.w	r2, r3, #1
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b03      	cmp	r3, #3
 8003054:	d118      	bne.n	8003088 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800305c:	2201      	movs	r2, #1
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	08db      	lsrs	r3, r3, #3
 8003072:	f003 0201 	and.w	r2, r3, #1
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b03      	cmp	r3, #3
 8003092:	d017      	beq.n	80030c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2203      	movs	r2, #3
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d123      	bne.n	8003118 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	08da      	lsrs	r2, r3, #3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3208      	adds	r2, #8
 80030d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	220f      	movs	r2, #15
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	08da      	lsrs	r2, r3, #3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3208      	adds	r2, #8
 8003112:	6939      	ldr	r1, [r7, #16]
 8003114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	2203      	movs	r2, #3
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4013      	ands	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0203 	and.w	r2, r3, #3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80ac 	beq.w	80032b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800315a:	4b5f      	ldr	r3, [pc, #380]	; (80032d8 <HAL_GPIO_Init+0x330>)
 800315c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315e:	4a5e      	ldr	r2, [pc, #376]	; (80032d8 <HAL_GPIO_Init+0x330>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6613      	str	r3, [r2, #96]	; 0x60
 8003166:	4b5c      	ldr	r3, [pc, #368]	; (80032d8 <HAL_GPIO_Init+0x330>)
 8003168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003172:	4a5a      	ldr	r2, [pc, #360]	; (80032dc <HAL_GPIO_Init+0x334>)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	3302      	adds	r3, #2
 800317a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	220f      	movs	r2, #15
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800319c:	d025      	beq.n	80031ea <HAL_GPIO_Init+0x242>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a4f      	ldr	r2, [pc, #316]	; (80032e0 <HAL_GPIO_Init+0x338>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01f      	beq.n	80031e6 <HAL_GPIO_Init+0x23e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a4e      	ldr	r2, [pc, #312]	; (80032e4 <HAL_GPIO_Init+0x33c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d019      	beq.n	80031e2 <HAL_GPIO_Init+0x23a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a4d      	ldr	r2, [pc, #308]	; (80032e8 <HAL_GPIO_Init+0x340>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <HAL_GPIO_Init+0x236>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a4c      	ldr	r2, [pc, #304]	; (80032ec <HAL_GPIO_Init+0x344>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00d      	beq.n	80031da <HAL_GPIO_Init+0x232>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a4b      	ldr	r2, [pc, #300]	; (80032f0 <HAL_GPIO_Init+0x348>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d007      	beq.n	80031d6 <HAL_GPIO_Init+0x22e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a4a      	ldr	r2, [pc, #296]	; (80032f4 <HAL_GPIO_Init+0x34c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d101      	bne.n	80031d2 <HAL_GPIO_Init+0x22a>
 80031ce:	2306      	movs	r3, #6
 80031d0:	e00c      	b.n	80031ec <HAL_GPIO_Init+0x244>
 80031d2:	2307      	movs	r3, #7
 80031d4:	e00a      	b.n	80031ec <HAL_GPIO_Init+0x244>
 80031d6:	2305      	movs	r3, #5
 80031d8:	e008      	b.n	80031ec <HAL_GPIO_Init+0x244>
 80031da:	2304      	movs	r3, #4
 80031dc:	e006      	b.n	80031ec <HAL_GPIO_Init+0x244>
 80031de:	2303      	movs	r3, #3
 80031e0:	e004      	b.n	80031ec <HAL_GPIO_Init+0x244>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e002      	b.n	80031ec <HAL_GPIO_Init+0x244>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_GPIO_Init+0x244>
 80031ea:	2300      	movs	r3, #0
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	f002 0203 	and.w	r2, r2, #3
 80031f2:	0092      	lsls	r2, r2, #2
 80031f4:	4093      	lsls	r3, r2
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031fc:	4937      	ldr	r1, [pc, #220]	; (80032dc <HAL_GPIO_Init+0x334>)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	089b      	lsrs	r3, r3, #2
 8003202:	3302      	adds	r3, #2
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800320a:	4b3b      	ldr	r3, [pc, #236]	; (80032f8 <HAL_GPIO_Init+0x350>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	43db      	mvns	r3, r3
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4013      	ands	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800322e:	4a32      	ldr	r2, [pc, #200]	; (80032f8 <HAL_GPIO_Init+0x350>)
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003234:	4b30      	ldr	r3, [pc, #192]	; (80032f8 <HAL_GPIO_Init+0x350>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	43db      	mvns	r3, r3
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4013      	ands	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003258:	4a27      	ldr	r2, [pc, #156]	; (80032f8 <HAL_GPIO_Init+0x350>)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800325e:	4b26      	ldr	r3, [pc, #152]	; (80032f8 <HAL_GPIO_Init+0x350>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003282:	4a1d      	ldr	r2, [pc, #116]	; (80032f8 <HAL_GPIO_Init+0x350>)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003288:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <HAL_GPIO_Init+0x350>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	43db      	mvns	r3, r3
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4013      	ands	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032ac:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <HAL_GPIO_Init+0x350>)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	3301      	adds	r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	fa22 f303 	lsr.w	r3, r2, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f47f ae78 	bne.w	8002fb8 <HAL_GPIO_Init+0x10>
  }
}
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40010000 	.word	0x40010000
 80032e0:	48000400 	.word	0x48000400
 80032e4:	48000800 	.word	0x48000800
 80032e8:	48000c00 	.word	0x48000c00
 80032ec:	48001000 	.word	0x48001000
 80032f0:	48001400 	.word	0x48001400
 80032f4:	48001800 	.word	0x48001800
 80032f8:	40010400 	.word	0x40010400

080032fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	807b      	strh	r3, [r7, #2]
 8003308:	4613      	mov	r3, r2
 800330a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800330c:	787b      	ldrb	r3, [r7, #1]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003312:	887a      	ldrh	r2, [r7, #2]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003318:	e002      	b.n	8003320 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800331a:	887a      	ldrh	r2, [r7, #2]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <HAL_PWREx_GetVoltageRange+0x18>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40007000 	.word	0x40007000

08003348 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003356:	d130      	bne.n	80033ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003358:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003364:	d038      	beq.n	80033d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003366:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800336e:	4a1e      	ldr	r2, [pc, #120]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003370:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003374:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003376:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2232      	movs	r2, #50	; 0x32
 800337c:	fb02 f303 	mul.w	r3, r2, r3
 8003380:	4a1b      	ldr	r2, [pc, #108]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	0c9b      	lsrs	r3, r3, #18
 8003388:	3301      	adds	r3, #1
 800338a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800338c:	e002      	b.n	8003394 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3b01      	subs	r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003394:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a0:	d102      	bne.n	80033a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f2      	bne.n	800338e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033a8:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b4:	d110      	bne.n	80033d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e00f      	b.n	80033da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80033ba:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c6:	d007      	beq.n	80033d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033c8:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033d0:	4a05      	ldr	r2, [pc, #20]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40007000 	.word	0x40007000
 80033ec:	20000000 	.word	0x20000000
 80033f0:	431bde83 	.word	0x431bde83

080033f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e3ca      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003406:	4b97      	ldr	r3, [pc, #604]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003410:	4b94      	ldr	r3, [pc, #592]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80e4 	beq.w	80035f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d007      	beq.n	800343e <HAL_RCC_OscConfig+0x4a>
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	2b0c      	cmp	r3, #12
 8003432:	f040 808b 	bne.w	800354c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b01      	cmp	r3, #1
 800343a:	f040 8087 	bne.w	800354c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800343e:	4b89      	ldr	r3, [pc, #548]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d005      	beq.n	8003456 <HAL_RCC_OscConfig+0x62>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e3a2      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1a      	ldr	r2, [r3, #32]
 800345a:	4b82      	ldr	r3, [pc, #520]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d004      	beq.n	8003470 <HAL_RCC_OscConfig+0x7c>
 8003466:	4b7f      	ldr	r3, [pc, #508]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800346e:	e005      	b.n	800347c <HAL_RCC_OscConfig+0x88>
 8003470:	4b7c      	ldr	r3, [pc, #496]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003476:	091b      	lsrs	r3, r3, #4
 8003478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800347c:	4293      	cmp	r3, r2
 800347e:	d223      	bcs.n	80034c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fd55 	bl	8003f34 <RCC_SetFlashLatencyFromMSIRange>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e383      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003494:	4b73      	ldr	r3, [pc, #460]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a72      	ldr	r2, [pc, #456]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 800349a:	f043 0308 	orr.w	r3, r3, #8
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	4b70      	ldr	r3, [pc, #448]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	496d      	ldr	r1, [pc, #436]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034b2:	4b6c      	ldr	r3, [pc, #432]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	4968      	ldr	r1, [pc, #416]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	604b      	str	r3, [r1, #4]
 80034c6:	e025      	b.n	8003514 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034c8:	4b66      	ldr	r3, [pc, #408]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a65      	ldr	r2, [pc, #404]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80034ce:	f043 0308 	orr.w	r3, r3, #8
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b63      	ldr	r3, [pc, #396]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	4960      	ldr	r1, [pc, #384]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034e6:	4b5f      	ldr	r3, [pc, #380]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	495b      	ldr	r1, [pc, #364]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d109      	bne.n	8003514 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fd15 	bl	8003f34 <RCC_SetFlashLatencyFromMSIRange>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e343      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003514:	f000 fc4a 	bl	8003dac <HAL_RCC_GetSysClockFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b52      	ldr	r3, [pc, #328]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	091b      	lsrs	r3, r3, #4
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	4950      	ldr	r1, [pc, #320]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
 8003530:	4a4e      	ldr	r2, [pc, #312]	; (800366c <HAL_RCC_OscConfig+0x278>)
 8003532:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003534:	4b4e      	ldr	r3, [pc, #312]	; (8003670 <HAL_RCC_OscConfig+0x27c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7fe f897 	bl	800166c <HAL_InitTick>
 800353e:	4603      	mov	r3, r0
 8003540:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d052      	beq.n	80035ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	e327      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d032      	beq.n	80035ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003554:	4b43      	ldr	r3, [pc, #268]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a42      	ldr	r2, [pc, #264]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003560:	f7fe f8d4 	bl	800170c <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003568:	f7fe f8d0 	bl	800170c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e310      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800357a:	4b3a      	ldr	r3, [pc, #232]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003586:	4b37      	ldr	r3, [pc, #220]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a36      	ldr	r2, [pc, #216]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 800358c:	f043 0308 	orr.w	r3, r3, #8
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	4b34      	ldr	r3, [pc, #208]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	4931      	ldr	r1, [pc, #196]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035a4:	4b2f      	ldr	r3, [pc, #188]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	021b      	lsls	r3, r3, #8
 80035b2:	492c      	ldr	r1, [pc, #176]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	604b      	str	r3, [r1, #4]
 80035b8:	e01a      	b.n	80035f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035ba:	4b2a      	ldr	r3, [pc, #168]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a29      	ldr	r2, [pc, #164]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80035c0:	f023 0301 	bic.w	r3, r3, #1
 80035c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035c6:	f7fe f8a1 	bl	800170c <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035ce:	f7fe f89d 	bl	800170c <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e2dd      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035e0:	4b20      	ldr	r3, [pc, #128]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1f0      	bne.n	80035ce <HAL_RCC_OscConfig+0x1da>
 80035ec:	e000      	b.n	80035f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d074      	beq.n	80036e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d005      	beq.n	800360e <HAL_RCC_OscConfig+0x21a>
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	2b0c      	cmp	r3, #12
 8003606:	d10e      	bne.n	8003626 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2b03      	cmp	r3, #3
 800360c:	d10b      	bne.n	8003626 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d064      	beq.n	80036e4 <HAL_RCC_OscConfig+0x2f0>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d160      	bne.n	80036e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e2ba      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362e:	d106      	bne.n	800363e <HAL_RCC_OscConfig+0x24a>
 8003630:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a0b      	ldr	r2, [pc, #44]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	e026      	b.n	800368c <HAL_RCC_OscConfig+0x298>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003646:	d115      	bne.n	8003674 <HAL_RCC_OscConfig+0x280>
 8003648:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a05      	ldr	r2, [pc, #20]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 800364e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	4b03      	ldr	r3, [pc, #12]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a02      	ldr	r2, [pc, #8]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 800365a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	e014      	b.n	800368c <HAL_RCC_OscConfig+0x298>
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	08007eec 	.word	0x08007eec
 800366c:	20000000 	.word	0x20000000
 8003670:	20000004 	.word	0x20000004
 8003674:	4ba0      	ldr	r3, [pc, #640]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a9f      	ldr	r2, [pc, #636]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 800367a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800367e:	6013      	str	r3, [r2, #0]
 8003680:	4b9d      	ldr	r3, [pc, #628]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a9c      	ldr	r2, [pc, #624]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 8003686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800368a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d013      	beq.n	80036bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fe f83a 	bl	800170c <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800369c:	f7fe f836 	bl	800170c <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b64      	cmp	r3, #100	; 0x64
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e276      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ae:	4b92      	ldr	r3, [pc, #584]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x2a8>
 80036ba:	e014      	b.n	80036e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fe f826 	bl	800170c <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c4:	f7fe f822 	bl	800170c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b64      	cmp	r3, #100	; 0x64
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e262      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036d6:	4b88      	ldr	r3, [pc, #544]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0x2d0>
 80036e2:	e000      	b.n	80036e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d060      	beq.n	80037b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_OscConfig+0x310>
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2b0c      	cmp	r3, #12
 80036fc:	d119      	bne.n	8003732 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d116      	bne.n	8003732 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003704:	4b7c      	ldr	r3, [pc, #496]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_OscConfig+0x328>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e23f      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371c:	4b76      	ldr	r3, [pc, #472]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	061b      	lsls	r3, r3, #24
 800372a:	4973      	ldr	r1, [pc, #460]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 800372c:	4313      	orrs	r3, r2
 800372e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003730:	e040      	b.n	80037b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d023      	beq.n	8003782 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800373a:	4b6f      	ldr	r3, [pc, #444]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a6e      	ldr	r2, [pc, #440]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 8003740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003746:	f7fd ffe1 	bl	800170c <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374e:	f7fd ffdd 	bl	800170c <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e21d      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003760:	4b65      	ldr	r3, [pc, #404]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376c:	4b62      	ldr	r3, [pc, #392]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	061b      	lsls	r3, r3, #24
 800377a:	495f      	ldr	r1, [pc, #380]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 800377c:	4313      	orrs	r3, r2
 800377e:	604b      	str	r3, [r1, #4]
 8003780:	e018      	b.n	80037b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003782:	4b5d      	ldr	r3, [pc, #372]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a5c      	ldr	r2, [pc, #368]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 8003788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800378c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378e:	f7fd ffbd 	bl	800170c <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003796:	f7fd ffb9 	bl	800170c <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e1f9      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037a8:	4b53      	ldr	r3, [pc, #332]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f0      	bne.n	8003796 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d03c      	beq.n	800383a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01c      	beq.n	8003802 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c8:	4b4b      	ldr	r3, [pc, #300]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 80037ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ce:	4a4a      	ldr	r2, [pc, #296]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7fd ff98 	bl	800170c <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e0:	f7fd ff94 	bl	800170c <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e1d4      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037f2:	4b41      	ldr	r3, [pc, #260]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 80037f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0ef      	beq.n	80037e0 <HAL_RCC_OscConfig+0x3ec>
 8003800:	e01b      	b.n	800383a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003802:	4b3d      	ldr	r3, [pc, #244]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 8003804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003808:	4a3b      	ldr	r2, [pc, #236]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003812:	f7fd ff7b 	bl	800170c <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800381a:	f7fd ff77 	bl	800170c <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e1b7      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800382c:	4b32      	ldr	r3, [pc, #200]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 800382e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1ef      	bne.n	800381a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 80a6 	beq.w	8003994 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003848:	2300      	movs	r3, #0
 800384a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800384c:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 800384e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10d      	bne.n	8003874 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003858:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 800385a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385c:	4a26      	ldr	r2, [pc, #152]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 800385e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003862:	6593      	str	r3, [r2, #88]	; 0x58
 8003864:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 8003866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003870:	2301      	movs	r3, #1
 8003872:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003874:	4b21      	ldr	r3, [pc, #132]	; (80038fc <HAL_RCC_OscConfig+0x508>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387c:	2b00      	cmp	r3, #0
 800387e:	d118      	bne.n	80038b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003880:	4b1e      	ldr	r3, [pc, #120]	; (80038fc <HAL_RCC_OscConfig+0x508>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a1d      	ldr	r2, [pc, #116]	; (80038fc <HAL_RCC_OscConfig+0x508>)
 8003886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800388c:	f7fd ff3e 	bl	800170c <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003894:	f7fd ff3a 	bl	800170c <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e17a      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a6:	4b15      	ldr	r3, [pc, #84]	; (80038fc <HAL_RCC_OscConfig+0x508>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d108      	bne.n	80038cc <HAL_RCC_OscConfig+0x4d8>
 80038ba:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 80038bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c0:	4a0d      	ldr	r2, [pc, #52]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038ca:	e029      	b.n	8003920 <HAL_RCC_OscConfig+0x52c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b05      	cmp	r3, #5
 80038d2:	d115      	bne.n	8003900 <HAL_RCC_OscConfig+0x50c>
 80038d4:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038da:	4a07      	ldr	r2, [pc, #28]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 80038dc:	f043 0304 	orr.w	r3, r3, #4
 80038e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	4a03      	ldr	r2, [pc, #12]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038f4:	e014      	b.n	8003920 <HAL_RCC_OscConfig+0x52c>
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40007000 	.word	0x40007000
 8003900:	4b9c      	ldr	r3, [pc, #624]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	4a9b      	ldr	r2, [pc, #620]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003910:	4b98      	ldr	r3, [pc, #608]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003916:	4a97      	ldr	r2, [pc, #604]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003918:	f023 0304 	bic.w	r3, r3, #4
 800391c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d016      	beq.n	8003956 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003928:	f7fd fef0 	bl	800170c <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800392e:	e00a      	b.n	8003946 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003930:	f7fd feec 	bl	800170c <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e12a      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003946:	4b8b      	ldr	r3, [pc, #556]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0ed      	beq.n	8003930 <HAL_RCC_OscConfig+0x53c>
 8003954:	e015      	b.n	8003982 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003956:	f7fd fed9 	bl	800170c <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800395c:	e00a      	b.n	8003974 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395e:	f7fd fed5 	bl	800170c <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f241 3288 	movw	r2, #5000	; 0x1388
 800396c:	4293      	cmp	r3, r2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e113      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003974:	4b7f      	ldr	r3, [pc, #508]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1ed      	bne.n	800395e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003982:	7ffb      	ldrb	r3, [r7, #31]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d105      	bne.n	8003994 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003988:	4b7a      	ldr	r3, [pc, #488]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	4a79      	ldr	r2, [pc, #484]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 800398e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003992:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80fe 	beq.w	8003b9a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	f040 80d0 	bne.w	8003b48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039a8:	4b72      	ldr	r3, [pc, #456]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f003 0203 	and.w	r2, r3, #3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d130      	bne.n	8003a1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	3b01      	subs	r3, #1
 80039c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d127      	bne.n	8003a1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d11f      	bne.n	8003a1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039e8:	2a07      	cmp	r2, #7
 80039ea:	bf14      	ite	ne
 80039ec:	2201      	movne	r2, #1
 80039ee:	2200      	moveq	r2, #0
 80039f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d113      	bne.n	8003a1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a00:	085b      	lsrs	r3, r3, #1
 8003a02:	3b01      	subs	r3, #1
 8003a04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d109      	bne.n	8003a1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	3b01      	subs	r3, #1
 8003a18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d06e      	beq.n	8003afc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b0c      	cmp	r3, #12
 8003a22:	d069      	beq.n	8003af8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a24:	4b53      	ldr	r3, [pc, #332]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d105      	bne.n	8003a3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a30:	4b50      	ldr	r3, [pc, #320]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0ad      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a40:	4b4c      	ldr	r3, [pc, #304]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a4b      	ldr	r2, [pc, #300]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a4c:	f7fd fe5e 	bl	800170c <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a54:	f7fd fe5a 	bl	800170c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e09a      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a66:	4b43      	ldr	r3, [pc, #268]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a72:	4b40      	ldr	r3, [pc, #256]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	4b40      	ldr	r3, [pc, #256]	; (8003b78 <HAL_RCC_OscConfig+0x784>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a82:	3a01      	subs	r2, #1
 8003a84:	0112      	lsls	r2, r2, #4
 8003a86:	4311      	orrs	r1, r2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a8c:	0212      	lsls	r2, r2, #8
 8003a8e:	4311      	orrs	r1, r2
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a94:	0852      	lsrs	r2, r2, #1
 8003a96:	3a01      	subs	r2, #1
 8003a98:	0552      	lsls	r2, r2, #21
 8003a9a:	4311      	orrs	r1, r2
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003aa0:	0852      	lsrs	r2, r2, #1
 8003aa2:	3a01      	subs	r2, #1
 8003aa4:	0652      	lsls	r2, r2, #25
 8003aa6:	4311      	orrs	r1, r2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003aac:	0912      	lsrs	r2, r2, #4
 8003aae:	0452      	lsls	r2, r2, #17
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	4930      	ldr	r1, [pc, #192]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ab8:	4b2e      	ldr	r3, [pc, #184]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a2d      	ldr	r2, [pc, #180]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ac4:	4b2b      	ldr	r3, [pc, #172]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4a2a      	ldr	r2, [pc, #168]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ace:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ad0:	f7fd fe1c 	bl	800170c <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fd fe18 	bl	800170c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e058      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aea:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003af6:	e050      	b.n	8003b9a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e04f      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d148      	bne.n	8003b9a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a19      	ldr	r2, [pc, #100]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b14:	4b17      	ldr	r3, [pc, #92]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a16      	ldr	r2, [pc, #88]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b20:	f7fd fdf4 	bl	800170c <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fd fdf0 	bl	800170c <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e030      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0x734>
 8003b46:	e028      	b.n	8003b9a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	2b0c      	cmp	r3, #12
 8003b4c:	d023      	beq.n	8003b96 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a08      	ldr	r2, [pc, #32]	; (8003b74 <HAL_RCC_OscConfig+0x780>)
 8003b54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5a:	f7fd fdd7 	bl	800170c <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b60:	e00c      	b.n	8003b7c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b62:	f7fd fdd3 	bl	800170c <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d905      	bls.n	8003b7c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e013      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
 8003b74:	40021000 	.word	0x40021000
 8003b78:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b7c:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <HAL_RCC_OscConfig+0x7b0>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1ec      	bne.n	8003b62 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_RCC_OscConfig+0x7b0>)
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	4905      	ldr	r1, [pc, #20]	; (8003ba4 <HAL_RCC_OscConfig+0x7b0>)
 8003b8e:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <HAL_RCC_OscConfig+0x7b4>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	60cb      	str	r3, [r1, #12]
 8003b94:	e001      	b.n	8003b9a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3720      	adds	r7, #32
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	feeefffc 	.word	0xfeeefffc

08003bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0e7      	b.n	8003d90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc0:	4b75      	ldr	r3, [pc, #468]	; (8003d98 <HAL_RCC_ClockConfig+0x1ec>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d910      	bls.n	8003bf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bce:	4b72      	ldr	r3, [pc, #456]	; (8003d98 <HAL_RCC_ClockConfig+0x1ec>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 0207 	bic.w	r2, r3, #7
 8003bd6:	4970      	ldr	r1, [pc, #448]	; (8003d98 <HAL_RCC_ClockConfig+0x1ec>)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	4b6e      	ldr	r3, [pc, #440]	; (8003d98 <HAL_RCC_ClockConfig+0x1ec>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0cf      	b.n	8003d90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d010      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	4b66      	ldr	r3, [pc, #408]	; (8003d9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d908      	bls.n	8003c1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c0c:	4b63      	ldr	r3, [pc, #396]	; (8003d9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	4960      	ldr	r1, [pc, #384]	; (8003d9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d04c      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d107      	bne.n	8003c42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c32:	4b5a      	ldr	r3, [pc, #360]	; (8003d9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d121      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e0a6      	b.n	8003d90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d107      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c4a:	4b54      	ldr	r3, [pc, #336]	; (8003d9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d115      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e09a      	b.n	8003d90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d107      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c62:	4b4e      	ldr	r3, [pc, #312]	; (8003d9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e08e      	b.n	8003d90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c72:	4b4a      	ldr	r3, [pc, #296]	; (8003d9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e086      	b.n	8003d90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c82:	4b46      	ldr	r3, [pc, #280]	; (8003d9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f023 0203 	bic.w	r2, r3, #3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4943      	ldr	r1, [pc, #268]	; (8003d9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c94:	f7fd fd3a 	bl	800170c <HAL_GetTick>
 8003c98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c9c:	f7fd fd36 	bl	800170c <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e06e      	b.n	8003d90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb2:	4b3a      	ldr	r3, [pc, #232]	; (8003d9c <HAL_RCC_ClockConfig+0x1f0>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 020c 	and.w	r2, r3, #12
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d1eb      	bne.n	8003c9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d010      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	4b31      	ldr	r3, [pc, #196]	; (8003d9c <HAL_RCC_ClockConfig+0x1f0>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d208      	bcs.n	8003cf2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce0:	4b2e      	ldr	r3, [pc, #184]	; (8003d9c <HAL_RCC_ClockConfig+0x1f0>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	492b      	ldr	r1, [pc, #172]	; (8003d9c <HAL_RCC_ClockConfig+0x1f0>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf2:	4b29      	ldr	r3, [pc, #164]	; (8003d98 <HAL_RCC_ClockConfig+0x1ec>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d210      	bcs.n	8003d22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d00:	4b25      	ldr	r3, [pc, #148]	; (8003d98 <HAL_RCC_ClockConfig+0x1ec>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f023 0207 	bic.w	r2, r3, #7
 8003d08:	4923      	ldr	r1, [pc, #140]	; (8003d98 <HAL_RCC_ClockConfig+0x1ec>)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d10:	4b21      	ldr	r3, [pc, #132]	; (8003d98 <HAL_RCC_ClockConfig+0x1ec>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e036      	b.n	8003d90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d008      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d2e:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <HAL_RCC_ClockConfig+0x1f0>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	4918      	ldr	r1, [pc, #96]	; (8003d9c <HAL_RCC_ClockConfig+0x1f0>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d009      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d4c:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <HAL_RCC_ClockConfig+0x1f0>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4910      	ldr	r1, [pc, #64]	; (8003d9c <HAL_RCC_ClockConfig+0x1f0>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d60:	f000 f824 	bl	8003dac <HAL_RCC_GetSysClockFreq>
 8003d64:	4602      	mov	r2, r0
 8003d66:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <HAL_RCC_ClockConfig+0x1f0>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	091b      	lsrs	r3, r3, #4
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	490b      	ldr	r1, [pc, #44]	; (8003da0 <HAL_RCC_ClockConfig+0x1f4>)
 8003d72:	5ccb      	ldrb	r3, [r1, r3]
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7c:	4a09      	ldr	r2, [pc, #36]	; (8003da4 <HAL_RCC_ClockConfig+0x1f8>)
 8003d7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <HAL_RCC_ClockConfig+0x1fc>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fd fc71 	bl	800166c <HAL_InitTick>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d8e:	7afb      	ldrb	r3, [r7, #11]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40022000 	.word	0x40022000
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	08007eec 	.word	0x08007eec
 8003da4:	20000000 	.word	0x20000000
 8003da8:	20000004 	.word	0x20000004

08003dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	; 0x24
 8003db0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	2300      	movs	r3, #0
 8003db8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dba:	4b3e      	ldr	r3, [pc, #248]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dc4:	4b3b      	ldr	r3, [pc, #236]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0x34>
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	2b0c      	cmp	r3, #12
 8003dd8:	d121      	bne.n	8003e1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d11e      	bne.n	8003e1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003de0:	4b34      	ldr	r3, [pc, #208]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d107      	bne.n	8003dfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003dec:	4b31      	ldr	r3, [pc, #196]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df2:	0a1b      	lsrs	r3, r3, #8
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	61fb      	str	r3, [r7, #28]
 8003dfa:	e005      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003dfc:	4b2d      	ldr	r3, [pc, #180]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e08:	4a2b      	ldr	r2, [pc, #172]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10d      	bne.n	8003e34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e1c:	e00a      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d102      	bne.n	8003e2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e24:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x110>)
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	e004      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d101      	bne.n	8003e34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e30:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	2b0c      	cmp	r3, #12
 8003e38:	d134      	bne.n	8003ea4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e3a:	4b1e      	ldr	r3, [pc, #120]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d003      	beq.n	8003e52 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d003      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0xac>
 8003e50:	e005      	b.n	8003e5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e52:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x110>)
 8003e54:	617b      	str	r3, [r7, #20]
      break;
 8003e56:	e005      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e58:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e5a:	617b      	str	r3, [r7, #20]
      break;
 8003e5c:	e002      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	617b      	str	r3, [r7, #20]
      break;
 8003e62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e64:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	3301      	adds	r3, #1
 8003e70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	0a1b      	lsrs	r3, r3, #8
 8003e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	fb03 f202 	mul.w	r2, r3, r2
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	0e5b      	lsrs	r3, r3, #25
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	3301      	adds	r3, #1
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ea4:	69bb      	ldr	r3, [r7, #24]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3724      	adds	r7, #36	; 0x24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	08007f04 	.word	0x08007f04
 8003ebc:	00f42400 	.word	0x00f42400
 8003ec0:	007a1200 	.word	0x007a1200

08003ec4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec8:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eca:	681b      	ldr	r3, [r3, #0]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20000000 	.word	0x20000000

08003edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ee0:	f7ff fff0 	bl	8003ec4 <HAL_RCC_GetHCLKFreq>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	0a1b      	lsrs	r3, r3, #8
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	4904      	ldr	r1, [pc, #16]	; (8003f04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ef2:	5ccb      	ldrb	r3, [r1, r3]
 8003ef4:	f003 031f 	and.w	r3, r3, #31
 8003ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40021000 	.word	0x40021000
 8003f04:	08007efc 	.word	0x08007efc

08003f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f0c:	f7ff ffda 	bl	8003ec4 <HAL_RCC_GetHCLKFreq>
 8003f10:	4602      	mov	r2, r0
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	0adb      	lsrs	r3, r3, #11
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	4904      	ldr	r1, [pc, #16]	; (8003f30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f1e:	5ccb      	ldrb	r3, [r1, r3]
 8003f20:	f003 031f 	and.w	r3, r3, #31
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	08007efc 	.word	0x08007efc

08003f34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f40:	4b2a      	ldr	r3, [pc, #168]	; (8003fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f4c:	f7ff f9ee 	bl	800332c <HAL_PWREx_GetVoltageRange>
 8003f50:	6178      	str	r0, [r7, #20]
 8003f52:	e014      	b.n	8003f7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f54:	4b25      	ldr	r3, [pc, #148]	; (8003fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f58:	4a24      	ldr	r2, [pc, #144]	; (8003fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f60:	4b22      	ldr	r3, [pc, #136]	; (8003fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f6c:	f7ff f9de 	bl	800332c <HAL_PWREx_GetVoltageRange>
 8003f70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f72:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f76:	4a1d      	ldr	r2, [pc, #116]	; (8003fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f84:	d10b      	bne.n	8003f9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b80      	cmp	r3, #128	; 0x80
 8003f8a:	d919      	bls.n	8003fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2ba0      	cmp	r3, #160	; 0xa0
 8003f90:	d902      	bls.n	8003f98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f92:	2302      	movs	r3, #2
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	e013      	b.n	8003fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f98:	2301      	movs	r3, #1
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	e010      	b.n	8003fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b80      	cmp	r3, #128	; 0x80
 8003fa2:	d902      	bls.n	8003faa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	e00a      	b.n	8003fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b80      	cmp	r3, #128	; 0x80
 8003fae:	d102      	bne.n	8003fb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	e004      	b.n	8003fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b70      	cmp	r3, #112	; 0x70
 8003fba:	d101      	bne.n	8003fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f023 0207 	bic.w	r2, r3, #7
 8003fc8:	4909      	ldr	r1, [pc, #36]	; (8003ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fd0:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d001      	beq.n	8003fe2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	40022000 	.word	0x40022000

08003ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004000:	2300      	movs	r3, #0
 8004002:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800400c:	2b00      	cmp	r3, #0
 800400e:	d041      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004014:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004018:	d02a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800401a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800401e:	d824      	bhi.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004020:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004024:	d008      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004026:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800402a:	d81e      	bhi.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004030:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004034:	d010      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004036:	e018      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004038:	4b86      	ldr	r3, [pc, #536]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	4a85      	ldr	r2, [pc, #532]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004042:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004044:	e015      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3304      	adds	r3, #4
 800404a:	2100      	movs	r1, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fabb 	bl	80045c8 <RCCEx_PLLSAI1_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004056:	e00c      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3320      	adds	r3, #32
 800405c:	2100      	movs	r1, #0
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fba6 	bl	80047b0 <RCCEx_PLLSAI2_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004068:	e003      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	74fb      	strb	r3, [r7, #19]
      break;
 800406e:	e000      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004072:	7cfb      	ldrb	r3, [r7, #19]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10b      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004078:	4b76      	ldr	r3, [pc, #472]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004086:	4973      	ldr	r1, [pc, #460]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800408e:	e001      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d041      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040a8:	d02a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80040aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040ae:	d824      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040b4:	d008      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040ba:	d81e      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80040c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040c4:	d010      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040c6:	e018      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040c8:	4b62      	ldr	r3, [pc, #392]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4a61      	ldr	r2, [pc, #388]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040d4:	e015      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3304      	adds	r3, #4
 80040da:	2100      	movs	r1, #0
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fa73 	bl	80045c8 <RCCEx_PLLSAI1_Config>
 80040e2:	4603      	mov	r3, r0
 80040e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040e6:	e00c      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3320      	adds	r3, #32
 80040ec:	2100      	movs	r1, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fb5e 	bl	80047b0 <RCCEx_PLLSAI2_Config>
 80040f4:	4603      	mov	r3, r0
 80040f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040f8:	e003      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	74fb      	strb	r3, [r7, #19]
      break;
 80040fe:	e000      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004102:	7cfb      	ldrb	r3, [r7, #19]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10b      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004108:	4b52      	ldr	r3, [pc, #328]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004116:	494f      	ldr	r1, [pc, #316]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800411e:	e001      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004120:	7cfb      	ldrb	r3, [r7, #19]
 8004122:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80a0 	beq.w	8004272 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004132:	2300      	movs	r3, #0
 8004134:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004136:	4b47      	ldr	r3, [pc, #284]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004146:	2300      	movs	r3, #0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00d      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414c:	4b41      	ldr	r3, [pc, #260]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004150:	4a40      	ldr	r2, [pc, #256]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004156:	6593      	str	r3, [r2, #88]	; 0x58
 8004158:	4b3e      	ldr	r3, [pc, #248]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004164:	2301      	movs	r3, #1
 8004166:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004168:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a3a      	ldr	r2, [pc, #232]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800416e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004172:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004174:	f7fd faca 	bl	800170c <HAL_GetTick>
 8004178:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800417a:	e009      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417c:	f7fd fac6 	bl	800170c <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d902      	bls.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	74fb      	strb	r3, [r7, #19]
        break;
 800418e:	e005      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004190:	4b31      	ldr	r3, [pc, #196]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0ef      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d15c      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041a2:	4b2c      	ldr	r3, [pc, #176]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01f      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d019      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041c0:	4b24      	ldr	r3, [pc, #144]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041cc:	4b21      	ldr	r3, [pc, #132]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	4a20      	ldr	r2, [pc, #128]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041dc:	4b1d      	ldr	r3, [pc, #116]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e2:	4a1c      	ldr	r2, [pc, #112]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041ec:	4a19      	ldr	r2, [pc, #100]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d016      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fe:	f7fd fa85 	bl	800170c <HAL_GetTick>
 8004202:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004204:	e00b      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004206:	f7fd fa81 	bl	800170c <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f241 3288 	movw	r2, #5000	; 0x1388
 8004214:	4293      	cmp	r3, r2
 8004216:	d902      	bls.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	74fb      	strb	r3, [r7, #19]
            break;
 800421c:	e006      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800421e:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0ec      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800422c:	7cfb      	ldrb	r3, [r7, #19]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10c      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004232:	4b08      	ldr	r3, [pc, #32]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004242:	4904      	ldr	r1, [pc, #16]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800424a:	e009      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800424c:	7cfb      	ldrb	r3, [r7, #19]
 800424e:	74bb      	strb	r3, [r7, #18]
 8004250:	e006      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004252:	bf00      	nop
 8004254:	40021000 	.word	0x40021000
 8004258:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425c:	7cfb      	ldrb	r3, [r7, #19]
 800425e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004260:	7c7b      	ldrb	r3, [r7, #17]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d105      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004266:	4b9e      	ldr	r3, [pc, #632]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426a:	4a9d      	ldr	r2, [pc, #628]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004270:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800427e:	4b98      	ldr	r3, [pc, #608]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004284:	f023 0203 	bic.w	r2, r3, #3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	4994      	ldr	r1, [pc, #592]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00a      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042a0:	4b8f      	ldr	r3, [pc, #572]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a6:	f023 020c 	bic.w	r2, r3, #12
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	498c      	ldr	r1, [pc, #560]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042c2:	4b87      	ldr	r3, [pc, #540]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	4983      	ldr	r1, [pc, #524]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00a      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042e4:	4b7e      	ldr	r3, [pc, #504]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	497b      	ldr	r1, [pc, #492]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004306:	4b76      	ldr	r3, [pc, #472]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004314:	4972      	ldr	r1, [pc, #456]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004328:	4b6d      	ldr	r3, [pc, #436]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004336:	496a      	ldr	r1, [pc, #424]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800434a:	4b65      	ldr	r3, [pc, #404]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004350:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004358:	4961      	ldr	r1, [pc, #388]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800436c:	4b5c      	ldr	r3, [pc, #368]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004372:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800437a:	4959      	ldr	r1, [pc, #356]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800438e:	4b54      	ldr	r3, [pc, #336]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004394:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439c:	4950      	ldr	r1, [pc, #320]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043b0:	4b4b      	ldr	r3, [pc, #300]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	4948      	ldr	r1, [pc, #288]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043d2:	4b43      	ldr	r3, [pc, #268]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e0:	493f      	ldr	r1, [pc, #252]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d028      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043f4:	4b3a      	ldr	r3, [pc, #232]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004402:	4937      	ldr	r1, [pc, #220]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800440e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004412:	d106      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004414:	4b32      	ldr	r3, [pc, #200]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4a31      	ldr	r2, [pc, #196]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800441e:	60d3      	str	r3, [r2, #12]
 8004420:	e011      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004426:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800442a:	d10c      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3304      	adds	r3, #4
 8004430:	2101      	movs	r1, #1
 8004432:	4618      	mov	r0, r3
 8004434:	f000 f8c8 	bl	80045c8 <RCCEx_PLLSAI1_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800443c:	7cfb      	ldrb	r3, [r7, #19]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004442:	7cfb      	ldrb	r3, [r7, #19]
 8004444:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d028      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004452:	4b23      	ldr	r3, [pc, #140]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004458:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004460:	491f      	ldr	r1, [pc, #124]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004470:	d106      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004472:	4b1b      	ldr	r3, [pc, #108]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	4a1a      	ldr	r2, [pc, #104]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800447c:	60d3      	str	r3, [r2, #12]
 800447e:	e011      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004484:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004488:	d10c      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3304      	adds	r3, #4
 800448e:	2101      	movs	r1, #1
 8004490:	4618      	mov	r0, r3
 8004492:	f000 f899 	bl	80045c8 <RCCEx_PLLSAI1_Config>
 8004496:	4603      	mov	r3, r0
 8004498:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800449a:	7cfb      	ldrb	r3, [r7, #19]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80044a0:	7cfb      	ldrb	r3, [r7, #19]
 80044a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d02b      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044b0:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044be:	4908      	ldr	r1, [pc, #32]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ce:	d109      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044d0:	4b03      	ldr	r3, [pc, #12]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4a02      	ldr	r2, [pc, #8]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044da:	60d3      	str	r3, [r2, #12]
 80044dc:	e014      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80044de:	bf00      	nop
 80044e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044ec:	d10c      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3304      	adds	r3, #4
 80044f2:	2101      	movs	r1, #1
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 f867 	bl	80045c8 <RCCEx_PLLSAI1_Config>
 80044fa:	4603      	mov	r3, r0
 80044fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044fe:	7cfb      	ldrb	r3, [r7, #19]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004504:	7cfb      	ldrb	r3, [r7, #19]
 8004506:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d02f      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004514:	4b2b      	ldr	r3, [pc, #172]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004522:	4928      	ldr	r1, [pc, #160]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800452e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004532:	d10d      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3304      	adds	r3, #4
 8004538:	2102      	movs	r1, #2
 800453a:	4618      	mov	r0, r3
 800453c:	f000 f844 	bl	80045c8 <RCCEx_PLLSAI1_Config>
 8004540:	4603      	mov	r3, r0
 8004542:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004544:	7cfb      	ldrb	r3, [r7, #19]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d014      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800454a:	7cfb      	ldrb	r3, [r7, #19]
 800454c:	74bb      	strb	r3, [r7, #18]
 800454e:	e011      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004558:	d10c      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3320      	adds	r3, #32
 800455e:	2102      	movs	r1, #2
 8004560:	4618      	mov	r0, r3
 8004562:	f000 f925 	bl	80047b0 <RCCEx_PLLSAI2_Config>
 8004566:	4603      	mov	r3, r0
 8004568:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800456a:	7cfb      	ldrb	r3, [r7, #19]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004570:	7cfb      	ldrb	r3, [r7, #19]
 8004572:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00a      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004580:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004586:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800458e:	490d      	ldr	r1, [pc, #52]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045b2:	4904      	ldr	r1, [pc, #16]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40021000 	.word	0x40021000

080045c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045d6:	4b75      	ldr	r3, [pc, #468]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d018      	beq.n	8004614 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045e2:	4b72      	ldr	r3, [pc, #456]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f003 0203 	and.w	r2, r3, #3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d10d      	bne.n	800460e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
       ||
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80045fa:	4b6c      	ldr	r3, [pc, #432]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	091b      	lsrs	r3, r3, #4
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
       ||
 800460a:	429a      	cmp	r2, r3
 800460c:	d047      	beq.n	800469e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	73fb      	strb	r3, [r7, #15]
 8004612:	e044      	b.n	800469e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b03      	cmp	r3, #3
 800461a:	d018      	beq.n	800464e <RCCEx_PLLSAI1_Config+0x86>
 800461c:	2b03      	cmp	r3, #3
 800461e:	d825      	bhi.n	800466c <RCCEx_PLLSAI1_Config+0xa4>
 8004620:	2b01      	cmp	r3, #1
 8004622:	d002      	beq.n	800462a <RCCEx_PLLSAI1_Config+0x62>
 8004624:	2b02      	cmp	r3, #2
 8004626:	d009      	beq.n	800463c <RCCEx_PLLSAI1_Config+0x74>
 8004628:	e020      	b.n	800466c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800462a:	4b60      	ldr	r3, [pc, #384]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d11d      	bne.n	8004672 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800463a:	e01a      	b.n	8004672 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800463c:	4b5b      	ldr	r3, [pc, #364]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004644:	2b00      	cmp	r3, #0
 8004646:	d116      	bne.n	8004676 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800464c:	e013      	b.n	8004676 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800464e:	4b57      	ldr	r3, [pc, #348]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10f      	bne.n	800467a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800465a:	4b54      	ldr	r3, [pc, #336]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800466a:	e006      	b.n	800467a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
      break;
 8004670:	e004      	b.n	800467c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004672:	bf00      	nop
 8004674:	e002      	b.n	800467c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004676:	bf00      	nop
 8004678:	e000      	b.n	800467c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800467a:	bf00      	nop
    }

    if(status == HAL_OK)
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10d      	bne.n	800469e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004682:	4b4a      	ldr	r3, [pc, #296]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6819      	ldr	r1, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	3b01      	subs	r3, #1
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	430b      	orrs	r3, r1
 8004698:	4944      	ldr	r1, [pc, #272]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800469a:	4313      	orrs	r3, r2
 800469c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d17d      	bne.n	80047a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046a4:	4b41      	ldr	r3, [pc, #260]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a40      	ldr	r2, [pc, #256]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80046aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b0:	f7fd f82c 	bl	800170c <HAL_GetTick>
 80046b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046b6:	e009      	b.n	80046cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046b8:	f7fd f828 	bl	800170c <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d902      	bls.n	80046cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	73fb      	strb	r3, [r7, #15]
        break;
 80046ca:	e005      	b.n	80046d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046cc:	4b37      	ldr	r3, [pc, #220]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1ef      	bne.n	80046b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d160      	bne.n	80047a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d111      	bne.n	8004708 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046e4:	4b31      	ldr	r3, [pc, #196]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6892      	ldr	r2, [r2, #8]
 80046f4:	0211      	lsls	r1, r2, #8
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	68d2      	ldr	r2, [r2, #12]
 80046fa:	0912      	lsrs	r2, r2, #4
 80046fc:	0452      	lsls	r2, r2, #17
 80046fe:	430a      	orrs	r2, r1
 8004700:	492a      	ldr	r1, [pc, #168]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004702:	4313      	orrs	r3, r2
 8004704:	610b      	str	r3, [r1, #16]
 8004706:	e027      	b.n	8004758 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d112      	bne.n	8004734 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800470e:	4b27      	ldr	r3, [pc, #156]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004716:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6892      	ldr	r2, [r2, #8]
 800471e:	0211      	lsls	r1, r2, #8
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6912      	ldr	r2, [r2, #16]
 8004724:	0852      	lsrs	r2, r2, #1
 8004726:	3a01      	subs	r2, #1
 8004728:	0552      	lsls	r2, r2, #21
 800472a:	430a      	orrs	r2, r1
 800472c:	491f      	ldr	r1, [pc, #124]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800472e:	4313      	orrs	r3, r2
 8004730:	610b      	str	r3, [r1, #16]
 8004732:	e011      	b.n	8004758 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004734:	4b1d      	ldr	r3, [pc, #116]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800473c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6892      	ldr	r2, [r2, #8]
 8004744:	0211      	lsls	r1, r2, #8
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6952      	ldr	r2, [r2, #20]
 800474a:	0852      	lsrs	r2, r2, #1
 800474c:	3a01      	subs	r2, #1
 800474e:	0652      	lsls	r2, r2, #25
 8004750:	430a      	orrs	r2, r1
 8004752:	4916      	ldr	r1, [pc, #88]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004754:	4313      	orrs	r3, r2
 8004756:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004758:	4b14      	ldr	r3, [pc, #80]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a13      	ldr	r2, [pc, #76]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800475e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004762:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fc ffd2 	bl	800170c <HAL_GetTick>
 8004768:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800476a:	e009      	b.n	8004780 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800476c:	f7fc ffce 	bl	800170c <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d902      	bls.n	8004780 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	73fb      	strb	r3, [r7, #15]
          break;
 800477e:	e005      	b.n	800478c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004780:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0ef      	beq.n	800476c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004792:	4b06      	ldr	r3, [pc, #24]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004794:	691a      	ldr	r2, [r3, #16]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	4904      	ldr	r1, [pc, #16]	; (80047ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800479c:	4313      	orrs	r3, r2
 800479e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40021000 	.word	0x40021000

080047b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047be:	4b6a      	ldr	r3, [pc, #424]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d018      	beq.n	80047fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047ca:	4b67      	ldr	r3, [pc, #412]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0203 	and.w	r2, r3, #3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d10d      	bne.n	80047f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
       ||
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80047e2:	4b61      	ldr	r3, [pc, #388]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	091b      	lsrs	r3, r3, #4
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
       ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d047      	beq.n	8004886 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	73fb      	strb	r3, [r7, #15]
 80047fa:	e044      	b.n	8004886 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b03      	cmp	r3, #3
 8004802:	d018      	beq.n	8004836 <RCCEx_PLLSAI2_Config+0x86>
 8004804:	2b03      	cmp	r3, #3
 8004806:	d825      	bhi.n	8004854 <RCCEx_PLLSAI2_Config+0xa4>
 8004808:	2b01      	cmp	r3, #1
 800480a:	d002      	beq.n	8004812 <RCCEx_PLLSAI2_Config+0x62>
 800480c:	2b02      	cmp	r3, #2
 800480e:	d009      	beq.n	8004824 <RCCEx_PLLSAI2_Config+0x74>
 8004810:	e020      	b.n	8004854 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004812:	4b55      	ldr	r3, [pc, #340]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d11d      	bne.n	800485a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004822:	e01a      	b.n	800485a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004824:	4b50      	ldr	r3, [pc, #320]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800482c:	2b00      	cmp	r3, #0
 800482e:	d116      	bne.n	800485e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004834:	e013      	b.n	800485e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004836:	4b4c      	ldr	r3, [pc, #304]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10f      	bne.n	8004862 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004842:	4b49      	ldr	r3, [pc, #292]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004852:	e006      	b.n	8004862 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
      break;
 8004858:	e004      	b.n	8004864 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800485a:	bf00      	nop
 800485c:	e002      	b.n	8004864 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800485e:	bf00      	nop
 8004860:	e000      	b.n	8004864 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004862:	bf00      	nop
    }

    if(status == HAL_OK)
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10d      	bne.n	8004886 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800486a:	4b3f      	ldr	r3, [pc, #252]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6819      	ldr	r1, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	3b01      	subs	r3, #1
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	430b      	orrs	r3, r1
 8004880:	4939      	ldr	r1, [pc, #228]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004882:	4313      	orrs	r3, r2
 8004884:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d167      	bne.n	800495c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800488c:	4b36      	ldr	r3, [pc, #216]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a35      	ldr	r2, [pc, #212]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004898:	f7fc ff38 	bl	800170c <HAL_GetTick>
 800489c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800489e:	e009      	b.n	80048b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048a0:	f7fc ff34 	bl	800170c <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d902      	bls.n	80048b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	73fb      	strb	r3, [r7, #15]
        break;
 80048b2:	e005      	b.n	80048c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048b4:	4b2c      	ldr	r3, [pc, #176]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1ef      	bne.n	80048a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d14a      	bne.n	800495c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d111      	bne.n	80048f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048cc:	4b26      	ldr	r3, [pc, #152]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6892      	ldr	r2, [r2, #8]
 80048dc:	0211      	lsls	r1, r2, #8
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68d2      	ldr	r2, [r2, #12]
 80048e2:	0912      	lsrs	r2, r2, #4
 80048e4:	0452      	lsls	r2, r2, #17
 80048e6:	430a      	orrs	r2, r1
 80048e8:	491f      	ldr	r1, [pc, #124]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	614b      	str	r3, [r1, #20]
 80048ee:	e011      	b.n	8004914 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048f0:	4b1d      	ldr	r3, [pc, #116]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6892      	ldr	r2, [r2, #8]
 8004900:	0211      	lsls	r1, r2, #8
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6912      	ldr	r2, [r2, #16]
 8004906:	0852      	lsrs	r2, r2, #1
 8004908:	3a01      	subs	r2, #1
 800490a:	0652      	lsls	r2, r2, #25
 800490c:	430a      	orrs	r2, r1
 800490e:	4916      	ldr	r1, [pc, #88]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004910:	4313      	orrs	r3, r2
 8004912:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004914:	4b14      	ldr	r3, [pc, #80]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a13      	ldr	r2, [pc, #76]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 800491a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004920:	f7fc fef4 	bl	800170c <HAL_GetTick>
 8004924:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004926:	e009      	b.n	800493c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004928:	f7fc fef0 	bl	800170c <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d902      	bls.n	800493c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	73fb      	strb	r3, [r7, #15]
          break;
 800493a:	e005      	b.n	8004948 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0ef      	beq.n	8004928 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800494e:	4b06      	ldr	r3, [pc, #24]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004950:	695a      	ldr	r2, [r3, #20]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	4904      	ldr	r1, [pc, #16]	; (8004968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004958:	4313      	orrs	r3, r2
 800495a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800495c:	7bfb      	ldrb	r3, [r7, #15]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40021000 	.word	0x40021000

0800496c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e040      	b.n	8004a00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fc fcc4 	bl	800131c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2224      	movs	r2, #36	; 0x24
 8004998:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0201 	bic.w	r2, r2, #1
 80049a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f8c0 	bl	8004b30 <UART_SetConfig>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e022      	b.n	8004a00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fb6c 	bl	80050a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fbf3 	bl	80051e4 <UART_CheckIdleState>
 80049fe:	4603      	mov	r3, r0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	; 0x28
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	f040 8082 	bne.w	8004b26 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <HAL_UART_Transmit+0x26>
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e07a      	b.n	8004b28 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_UART_Transmit+0x38>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e073      	b.n	8004b28 <HAL_UART_Transmit+0x120>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2221      	movs	r2, #33	; 0x21
 8004a54:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a56:	f7fc fe59 	bl	800170c <HAL_GetTick>
 8004a5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	88fa      	ldrh	r2, [r7, #6]
 8004a68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a74:	d108      	bne.n	8004a88 <HAL_UART_Transmit+0x80>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d104      	bne.n	8004a88 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	e003      	b.n	8004a90 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004a98:	e02d      	b.n	8004af6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2180      	movs	r1, #128	; 0x80
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 fbe6 	bl	8005276 <UART_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e039      	b.n	8004b28 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10b      	bne.n	8004ad2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	881a      	ldrh	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac6:	b292      	uxth	r2, r2
 8004ac8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	3302      	adds	r3, #2
 8004ace:	61bb      	str	r3, [r7, #24]
 8004ad0:	e008      	b.n	8004ae4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	781a      	ldrb	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	b292      	uxth	r2, r2
 8004adc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1cb      	bne.n	8004a9a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2140      	movs	r1, #64	; 0x40
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 fbb2 	bl	8005276 <UART_WaitOnFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e005      	b.n	8004b28 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	e000      	b.n	8004b28 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004b26:	2302      	movs	r3, #2
  }
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3720      	adds	r7, #32
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b34:	b08a      	sub	sp, #40	; 0x28
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	4ba4      	ldr	r3, [pc, #656]	; (8004df0 <UART_SetConfig+0x2c0>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a99      	ldr	r2, [pc, #612]	; (8004df4 <UART_SetConfig+0x2c4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d004      	beq.n	8004b9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bac:	430a      	orrs	r2, r1
 8004bae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a90      	ldr	r2, [pc, #576]	; (8004df8 <UART_SetConfig+0x2c8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d126      	bne.n	8004c08 <UART_SetConfig+0xd8>
 8004bba:	4b90      	ldr	r3, [pc, #576]	; (8004dfc <UART_SetConfig+0x2cc>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d81b      	bhi.n	8004c00 <UART_SetConfig+0xd0>
 8004bc8:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <UART_SetConfig+0xa0>)
 8004bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bce:	bf00      	nop
 8004bd0:	08004be1 	.word	0x08004be1
 8004bd4:	08004bf1 	.word	0x08004bf1
 8004bd8:	08004be9 	.word	0x08004be9
 8004bdc:	08004bf9 	.word	0x08004bf9
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be6:	e116      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004be8:	2302      	movs	r3, #2
 8004bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bee:	e112      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf6:	e10e      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004bf8:	2308      	movs	r3, #8
 8004bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfe:	e10a      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004c00:	2310      	movs	r3, #16
 8004c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c06:	e106      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a7c      	ldr	r2, [pc, #496]	; (8004e00 <UART_SetConfig+0x2d0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d138      	bne.n	8004c84 <UART_SetConfig+0x154>
 8004c12:	4b7a      	ldr	r3, [pc, #488]	; (8004dfc <UART_SetConfig+0x2cc>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	f003 030c 	and.w	r3, r3, #12
 8004c1c:	2b0c      	cmp	r3, #12
 8004c1e:	d82d      	bhi.n	8004c7c <UART_SetConfig+0x14c>
 8004c20:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <UART_SetConfig+0xf8>)
 8004c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c26:	bf00      	nop
 8004c28:	08004c5d 	.word	0x08004c5d
 8004c2c:	08004c7d 	.word	0x08004c7d
 8004c30:	08004c7d 	.word	0x08004c7d
 8004c34:	08004c7d 	.word	0x08004c7d
 8004c38:	08004c6d 	.word	0x08004c6d
 8004c3c:	08004c7d 	.word	0x08004c7d
 8004c40:	08004c7d 	.word	0x08004c7d
 8004c44:	08004c7d 	.word	0x08004c7d
 8004c48:	08004c65 	.word	0x08004c65
 8004c4c:	08004c7d 	.word	0x08004c7d
 8004c50:	08004c7d 	.word	0x08004c7d
 8004c54:	08004c7d 	.word	0x08004c7d
 8004c58:	08004c75 	.word	0x08004c75
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c62:	e0d8      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004c64:	2302      	movs	r3, #2
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6a:	e0d4      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004c6c:	2304      	movs	r3, #4
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c72:	e0d0      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004c74:	2308      	movs	r3, #8
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7a:	e0cc      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004c7c:	2310      	movs	r3, #16
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c82:	e0c8      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a5e      	ldr	r2, [pc, #376]	; (8004e04 <UART_SetConfig+0x2d4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d125      	bne.n	8004cda <UART_SetConfig+0x1aa>
 8004c8e:	4b5b      	ldr	r3, [pc, #364]	; (8004dfc <UART_SetConfig+0x2cc>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c98:	2b30      	cmp	r3, #48	; 0x30
 8004c9a:	d016      	beq.n	8004cca <UART_SetConfig+0x19a>
 8004c9c:	2b30      	cmp	r3, #48	; 0x30
 8004c9e:	d818      	bhi.n	8004cd2 <UART_SetConfig+0x1a2>
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d00a      	beq.n	8004cba <UART_SetConfig+0x18a>
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	d814      	bhi.n	8004cd2 <UART_SetConfig+0x1a2>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <UART_SetConfig+0x182>
 8004cac:	2b10      	cmp	r3, #16
 8004cae:	d008      	beq.n	8004cc2 <UART_SetConfig+0x192>
 8004cb0:	e00f      	b.n	8004cd2 <UART_SetConfig+0x1a2>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb8:	e0ad      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc0:	e0a9      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004cc2:	2304      	movs	r3, #4
 8004cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc8:	e0a5      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004cca:	2308      	movs	r3, #8
 8004ccc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd0:	e0a1      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004cd2:	2310      	movs	r3, #16
 8004cd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd8:	e09d      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a4a      	ldr	r2, [pc, #296]	; (8004e08 <UART_SetConfig+0x2d8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d125      	bne.n	8004d30 <UART_SetConfig+0x200>
 8004ce4:	4b45      	ldr	r3, [pc, #276]	; (8004dfc <UART_SetConfig+0x2cc>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cee:	2bc0      	cmp	r3, #192	; 0xc0
 8004cf0:	d016      	beq.n	8004d20 <UART_SetConfig+0x1f0>
 8004cf2:	2bc0      	cmp	r3, #192	; 0xc0
 8004cf4:	d818      	bhi.n	8004d28 <UART_SetConfig+0x1f8>
 8004cf6:	2b80      	cmp	r3, #128	; 0x80
 8004cf8:	d00a      	beq.n	8004d10 <UART_SetConfig+0x1e0>
 8004cfa:	2b80      	cmp	r3, #128	; 0x80
 8004cfc:	d814      	bhi.n	8004d28 <UART_SetConfig+0x1f8>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <UART_SetConfig+0x1d8>
 8004d02:	2b40      	cmp	r3, #64	; 0x40
 8004d04:	d008      	beq.n	8004d18 <UART_SetConfig+0x1e8>
 8004d06:	e00f      	b.n	8004d28 <UART_SetConfig+0x1f8>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0e:	e082      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004d10:	2302      	movs	r3, #2
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d16:	e07e      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1e:	e07a      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004d20:	2308      	movs	r3, #8
 8004d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d26:	e076      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2e:	e072      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a35      	ldr	r2, [pc, #212]	; (8004e0c <UART_SetConfig+0x2dc>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d12a      	bne.n	8004d90 <UART_SetConfig+0x260>
 8004d3a:	4b30      	ldr	r3, [pc, #192]	; (8004dfc <UART_SetConfig+0x2cc>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d48:	d01a      	beq.n	8004d80 <UART_SetConfig+0x250>
 8004d4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d4e:	d81b      	bhi.n	8004d88 <UART_SetConfig+0x258>
 8004d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d54:	d00c      	beq.n	8004d70 <UART_SetConfig+0x240>
 8004d56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d5a:	d815      	bhi.n	8004d88 <UART_SetConfig+0x258>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <UART_SetConfig+0x238>
 8004d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d64:	d008      	beq.n	8004d78 <UART_SetConfig+0x248>
 8004d66:	e00f      	b.n	8004d88 <UART_SetConfig+0x258>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6e:	e052      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004d70:	2302      	movs	r3, #2
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d76:	e04e      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004d78:	2304      	movs	r3, #4
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7e:	e04a      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004d80:	2308      	movs	r3, #8
 8004d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d86:	e046      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004d88:	2310      	movs	r3, #16
 8004d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8e:	e042      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a17      	ldr	r2, [pc, #92]	; (8004df4 <UART_SetConfig+0x2c4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d13a      	bne.n	8004e10 <UART_SetConfig+0x2e0>
 8004d9a:	4b18      	ldr	r3, [pc, #96]	; (8004dfc <UART_SetConfig+0x2cc>)
 8004d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004da4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004da8:	d01a      	beq.n	8004de0 <UART_SetConfig+0x2b0>
 8004daa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dae:	d81b      	bhi.n	8004de8 <UART_SetConfig+0x2b8>
 8004db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db4:	d00c      	beq.n	8004dd0 <UART_SetConfig+0x2a0>
 8004db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dba:	d815      	bhi.n	8004de8 <UART_SetConfig+0x2b8>
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <UART_SetConfig+0x298>
 8004dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc4:	d008      	beq.n	8004dd8 <UART_SetConfig+0x2a8>
 8004dc6:	e00f      	b.n	8004de8 <UART_SetConfig+0x2b8>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dce:	e022      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd6:	e01e      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004dd8:	2304      	movs	r3, #4
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dde:	e01a      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004de0:	2308      	movs	r3, #8
 8004de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de6:	e016      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004de8:	2310      	movs	r3, #16
 8004dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dee:	e012      	b.n	8004e16 <UART_SetConfig+0x2e6>
 8004df0:	efff69f3 	.word	0xefff69f3
 8004df4:	40008000 	.word	0x40008000
 8004df8:	40013800 	.word	0x40013800
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	40004400 	.word	0x40004400
 8004e04:	40004800 	.word	0x40004800
 8004e08:	40004c00 	.word	0x40004c00
 8004e0c:	40005000 	.word	0x40005000
 8004e10:	2310      	movs	r3, #16
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a9f      	ldr	r2, [pc, #636]	; (8005098 <UART_SetConfig+0x568>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d17a      	bne.n	8004f16 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d824      	bhi.n	8004e72 <UART_SetConfig+0x342>
 8004e28:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <UART_SetConfig+0x300>)
 8004e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2e:	bf00      	nop
 8004e30:	08004e55 	.word	0x08004e55
 8004e34:	08004e73 	.word	0x08004e73
 8004e38:	08004e5d 	.word	0x08004e5d
 8004e3c:	08004e73 	.word	0x08004e73
 8004e40:	08004e63 	.word	0x08004e63
 8004e44:	08004e73 	.word	0x08004e73
 8004e48:	08004e73 	.word	0x08004e73
 8004e4c:	08004e73 	.word	0x08004e73
 8004e50:	08004e6b 	.word	0x08004e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e54:	f7ff f842 	bl	8003edc <HAL_RCC_GetPCLK1Freq>
 8004e58:	61f8      	str	r0, [r7, #28]
        break;
 8004e5a:	e010      	b.n	8004e7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e5c:	4b8f      	ldr	r3, [pc, #572]	; (800509c <UART_SetConfig+0x56c>)
 8004e5e:	61fb      	str	r3, [r7, #28]
        break;
 8004e60:	e00d      	b.n	8004e7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e62:	f7fe ffa3 	bl	8003dac <HAL_RCC_GetSysClockFreq>
 8004e66:	61f8      	str	r0, [r7, #28]
        break;
 8004e68:	e009      	b.n	8004e7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e6e:	61fb      	str	r3, [r7, #28]
        break;
 8004e70:	e005      	b.n	8004e7e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80fb 	beq.w	800507c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	4413      	add	r3, r2
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d305      	bcc.n	8004ea2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d903      	bls.n	8004eaa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ea8:	e0e8      	b.n	800507c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	2200      	movs	r2, #0
 8004eae:	461c      	mov	r4, r3
 8004eb0:	4615      	mov	r5, r2
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	022b      	lsls	r3, r5, #8
 8004ebc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ec0:	0222      	lsls	r2, r4, #8
 8004ec2:	68f9      	ldr	r1, [r7, #12]
 8004ec4:	6849      	ldr	r1, [r1, #4]
 8004ec6:	0849      	lsrs	r1, r1, #1
 8004ec8:	2000      	movs	r0, #0
 8004eca:	4688      	mov	r8, r1
 8004ecc:	4681      	mov	r9, r0
 8004ece:	eb12 0a08 	adds.w	sl, r2, r8
 8004ed2:	eb43 0b09 	adc.w	fp, r3, r9
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ee4:	4650      	mov	r0, sl
 8004ee6:	4659      	mov	r1, fp
 8004ee8:	f7fb fe5e 	bl	8000ba8 <__aeabi_uldivmod>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004efa:	d308      	bcc.n	8004f0e <UART_SetConfig+0x3de>
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f02:	d204      	bcs.n	8004f0e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	60da      	str	r2, [r3, #12]
 8004f0c:	e0b6      	b.n	800507c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f14:	e0b2      	b.n	800507c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f1e:	d15e      	bne.n	8004fde <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004f20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d828      	bhi.n	8004f7a <UART_SetConfig+0x44a>
 8004f28:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <UART_SetConfig+0x400>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f55 	.word	0x08004f55
 8004f34:	08004f5d 	.word	0x08004f5d
 8004f38:	08004f65 	.word	0x08004f65
 8004f3c:	08004f7b 	.word	0x08004f7b
 8004f40:	08004f6b 	.word	0x08004f6b
 8004f44:	08004f7b 	.word	0x08004f7b
 8004f48:	08004f7b 	.word	0x08004f7b
 8004f4c:	08004f7b 	.word	0x08004f7b
 8004f50:	08004f73 	.word	0x08004f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f54:	f7fe ffc2 	bl	8003edc <HAL_RCC_GetPCLK1Freq>
 8004f58:	61f8      	str	r0, [r7, #28]
        break;
 8004f5a:	e014      	b.n	8004f86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f5c:	f7fe ffd4 	bl	8003f08 <HAL_RCC_GetPCLK2Freq>
 8004f60:	61f8      	str	r0, [r7, #28]
        break;
 8004f62:	e010      	b.n	8004f86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f64:	4b4d      	ldr	r3, [pc, #308]	; (800509c <UART_SetConfig+0x56c>)
 8004f66:	61fb      	str	r3, [r7, #28]
        break;
 8004f68:	e00d      	b.n	8004f86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f6a:	f7fe ff1f 	bl	8003dac <HAL_RCC_GetSysClockFreq>
 8004f6e:	61f8      	str	r0, [r7, #28]
        break;
 8004f70:	e009      	b.n	8004f86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f76:	61fb      	str	r3, [r7, #28]
        break;
 8004f78:	e005      	b.n	8004f86 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d077      	beq.n	800507c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	005a      	lsls	r2, r3, #1
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	085b      	lsrs	r3, r3, #1
 8004f96:	441a      	add	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b0f      	cmp	r3, #15
 8004fa6:	d916      	bls.n	8004fd6 <UART_SetConfig+0x4a6>
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fae:	d212      	bcs.n	8004fd6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f023 030f 	bic.w	r3, r3, #15
 8004fb8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	085b      	lsrs	r3, r3, #1
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	8afb      	ldrh	r3, [r7, #22]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	8afa      	ldrh	r2, [r7, #22]
 8004fd2:	60da      	str	r2, [r3, #12]
 8004fd4:	e052      	b.n	800507c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fdc:	e04e      	b.n	800507c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d827      	bhi.n	8005036 <UART_SetConfig+0x506>
 8004fe6:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <UART_SetConfig+0x4bc>)
 8004fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fec:	08005011 	.word	0x08005011
 8004ff0:	08005019 	.word	0x08005019
 8004ff4:	08005021 	.word	0x08005021
 8004ff8:	08005037 	.word	0x08005037
 8004ffc:	08005027 	.word	0x08005027
 8005000:	08005037 	.word	0x08005037
 8005004:	08005037 	.word	0x08005037
 8005008:	08005037 	.word	0x08005037
 800500c:	0800502f 	.word	0x0800502f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005010:	f7fe ff64 	bl	8003edc <HAL_RCC_GetPCLK1Freq>
 8005014:	61f8      	str	r0, [r7, #28]
        break;
 8005016:	e014      	b.n	8005042 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005018:	f7fe ff76 	bl	8003f08 <HAL_RCC_GetPCLK2Freq>
 800501c:	61f8      	str	r0, [r7, #28]
        break;
 800501e:	e010      	b.n	8005042 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005020:	4b1e      	ldr	r3, [pc, #120]	; (800509c <UART_SetConfig+0x56c>)
 8005022:	61fb      	str	r3, [r7, #28]
        break;
 8005024:	e00d      	b.n	8005042 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005026:	f7fe fec1 	bl	8003dac <HAL_RCC_GetSysClockFreq>
 800502a:	61f8      	str	r0, [r7, #28]
        break;
 800502c:	e009      	b.n	8005042 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800502e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005032:	61fb      	str	r3, [r7, #28]
        break;
 8005034:	e005      	b.n	8005042 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005040:	bf00      	nop
    }

    if (pclk != 0U)
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d019      	beq.n	800507c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	085a      	lsrs	r2, r3, #1
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	441a      	add	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	fbb2 f3f3 	udiv	r3, r2, r3
 800505a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2b0f      	cmp	r3, #15
 8005060:	d909      	bls.n	8005076 <UART_SetConfig+0x546>
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005068:	d205      	bcs.n	8005076 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	60da      	str	r2, [r3, #12]
 8005074:	e002      	b.n	800507c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005088:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800508c:	4618      	mov	r0, r3
 800508e:	3728      	adds	r7, #40	; 0x28
 8005090:	46bd      	mov	sp, r7
 8005092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005096:	bf00      	nop
 8005098:	40008000 	.word	0x40008000
 800509c:	00f42400 	.word	0x00f42400

080050a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01a      	beq.n	80051b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800519e:	d10a      	bne.n	80051b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	605a      	str	r2, [r3, #4]
  }
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051f4:	f7fc fa8a 	bl	800170c <HAL_GetTick>
 80051f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b08      	cmp	r3, #8
 8005206:	d10e      	bne.n	8005226 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005208:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f82d 	bl	8005276 <UART_WaitOnFlagUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e023      	b.n	800526e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b04      	cmp	r3, #4
 8005232:	d10e      	bne.n	8005252 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005234:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f817 	bl	8005276 <UART_WaitOnFlagUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e00d      	b.n	800526e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2220      	movs	r2, #32
 8005256:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2220      	movs	r2, #32
 800525c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b09c      	sub	sp, #112	; 0x70
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	603b      	str	r3, [r7, #0]
 8005282:	4613      	mov	r3, r2
 8005284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005286:	e0a5      	b.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528e:	f000 80a1 	beq.w	80053d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005292:	f7fc fa3b 	bl	800170c <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800529e:	429a      	cmp	r2, r3
 80052a0:	d302      	bcc.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80052a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d13e      	bne.n	8005326 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052bc:	667b      	str	r3, [r7, #100]	; 0x64
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e6      	bne.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3308      	adds	r3, #8
 80052e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	f023 0301 	bic.w	r3, r3, #1
 80052f0:	663b      	str	r3, [r7, #96]	; 0x60
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3308      	adds	r3, #8
 80052f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80052fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005300:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1e5      	bne.n	80052da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2220      	movs	r2, #32
 8005312:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e067      	b.n	80053f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d04f      	beq.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800533e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005342:	d147      	bne.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800534c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005356:	e853 3f00 	ldrex	r3, [r3]
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005362:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800536c:	637b      	str	r3, [r7, #52]	; 0x34
 800536e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005374:	e841 2300 	strex	r3, r2, [r1]
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800537a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e6      	bne.n	800534e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3308      	adds	r3, #8
 8005386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	e853 3f00 	ldrex	r3, [r3]
 800538e:	613b      	str	r3, [r7, #16]
   return(result);
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f023 0301 	bic.w	r3, r3, #1
 8005396:	66bb      	str	r3, [r7, #104]	; 0x68
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3308      	adds	r3, #8
 800539e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053a0:	623a      	str	r2, [r7, #32]
 80053a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a4:	69f9      	ldr	r1, [r7, #28]
 80053a6:	6a3a      	ldr	r2, [r7, #32]
 80053a8:	e841 2300 	strex	r3, r2, [r1]
 80053ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e5      	bne.n	8005380 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2220      	movs	r2, #32
 80053b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2220      	movs	r2, #32
 80053be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e010      	b.n	80053f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69da      	ldr	r2, [r3, #28]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4013      	ands	r3, r2
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	bf0c      	ite	eq
 80053e4:	2301      	moveq	r3, #1
 80053e6:	2300      	movne	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	461a      	mov	r2, r3
 80053ec:	79fb      	ldrb	r3, [r7, #7]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	f43f af4a 	beq.w	8005288 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3770      	adds	r7, #112	; 0x70
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
	...

08005400 <__errno>:
 8005400:	4b01      	ldr	r3, [pc, #4]	; (8005408 <__errno+0x8>)
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	2000000c 	.word	0x2000000c

0800540c <__libc_init_array>:
 800540c:	b570      	push	{r4, r5, r6, lr}
 800540e:	4d0d      	ldr	r5, [pc, #52]	; (8005444 <__libc_init_array+0x38>)
 8005410:	4c0d      	ldr	r4, [pc, #52]	; (8005448 <__libc_init_array+0x3c>)
 8005412:	1b64      	subs	r4, r4, r5
 8005414:	10a4      	asrs	r4, r4, #2
 8005416:	2600      	movs	r6, #0
 8005418:	42a6      	cmp	r6, r4
 800541a:	d109      	bne.n	8005430 <__libc_init_array+0x24>
 800541c:	4d0b      	ldr	r5, [pc, #44]	; (800544c <__libc_init_array+0x40>)
 800541e:	4c0c      	ldr	r4, [pc, #48]	; (8005450 <__libc_init_array+0x44>)
 8005420:	f002 fd4e 	bl	8007ec0 <_init>
 8005424:	1b64      	subs	r4, r4, r5
 8005426:	10a4      	asrs	r4, r4, #2
 8005428:	2600      	movs	r6, #0
 800542a:	42a6      	cmp	r6, r4
 800542c:	d105      	bne.n	800543a <__libc_init_array+0x2e>
 800542e:	bd70      	pop	{r4, r5, r6, pc}
 8005430:	f855 3b04 	ldr.w	r3, [r5], #4
 8005434:	4798      	blx	r3
 8005436:	3601      	adds	r6, #1
 8005438:	e7ee      	b.n	8005418 <__libc_init_array+0xc>
 800543a:	f855 3b04 	ldr.w	r3, [r5], #4
 800543e:	4798      	blx	r3
 8005440:	3601      	adds	r6, #1
 8005442:	e7f2      	b.n	800542a <__libc_init_array+0x1e>
 8005444:	08008314 	.word	0x08008314
 8005448:	08008314 	.word	0x08008314
 800544c:	08008314 	.word	0x08008314
 8005450:	08008318 	.word	0x08008318

08005454 <memset>:
 8005454:	4402      	add	r2, r0
 8005456:	4603      	mov	r3, r0
 8005458:	4293      	cmp	r3, r2
 800545a:	d100      	bne.n	800545e <memset+0xa>
 800545c:	4770      	bx	lr
 800545e:	f803 1b01 	strb.w	r1, [r3], #1
 8005462:	e7f9      	b.n	8005458 <memset+0x4>

08005464 <__cvt>:
 8005464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005468:	ec55 4b10 	vmov	r4, r5, d0
 800546c:	2d00      	cmp	r5, #0
 800546e:	460e      	mov	r6, r1
 8005470:	4619      	mov	r1, r3
 8005472:	462b      	mov	r3, r5
 8005474:	bfbb      	ittet	lt
 8005476:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800547a:	461d      	movlt	r5, r3
 800547c:	2300      	movge	r3, #0
 800547e:	232d      	movlt	r3, #45	; 0x2d
 8005480:	700b      	strb	r3, [r1, #0]
 8005482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005484:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005488:	4691      	mov	r9, r2
 800548a:	f023 0820 	bic.w	r8, r3, #32
 800548e:	bfbc      	itt	lt
 8005490:	4622      	movlt	r2, r4
 8005492:	4614      	movlt	r4, r2
 8005494:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005498:	d005      	beq.n	80054a6 <__cvt+0x42>
 800549a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800549e:	d100      	bne.n	80054a2 <__cvt+0x3e>
 80054a0:	3601      	adds	r6, #1
 80054a2:	2102      	movs	r1, #2
 80054a4:	e000      	b.n	80054a8 <__cvt+0x44>
 80054a6:	2103      	movs	r1, #3
 80054a8:	ab03      	add	r3, sp, #12
 80054aa:	9301      	str	r3, [sp, #4]
 80054ac:	ab02      	add	r3, sp, #8
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	ec45 4b10 	vmov	d0, r4, r5
 80054b4:	4653      	mov	r3, sl
 80054b6:	4632      	mov	r2, r6
 80054b8:	f000 fce2 	bl	8005e80 <_dtoa_r>
 80054bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054c0:	4607      	mov	r7, r0
 80054c2:	d102      	bne.n	80054ca <__cvt+0x66>
 80054c4:	f019 0f01 	tst.w	r9, #1
 80054c8:	d022      	beq.n	8005510 <__cvt+0xac>
 80054ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054ce:	eb07 0906 	add.w	r9, r7, r6
 80054d2:	d110      	bne.n	80054f6 <__cvt+0x92>
 80054d4:	783b      	ldrb	r3, [r7, #0]
 80054d6:	2b30      	cmp	r3, #48	; 0x30
 80054d8:	d10a      	bne.n	80054f0 <__cvt+0x8c>
 80054da:	2200      	movs	r2, #0
 80054dc:	2300      	movs	r3, #0
 80054de:	4620      	mov	r0, r4
 80054e0:	4629      	mov	r1, r5
 80054e2:	f7fb faf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80054e6:	b918      	cbnz	r0, 80054f0 <__cvt+0x8c>
 80054e8:	f1c6 0601 	rsb	r6, r6, #1
 80054ec:	f8ca 6000 	str.w	r6, [sl]
 80054f0:	f8da 3000 	ldr.w	r3, [sl]
 80054f4:	4499      	add	r9, r3
 80054f6:	2200      	movs	r2, #0
 80054f8:	2300      	movs	r3, #0
 80054fa:	4620      	mov	r0, r4
 80054fc:	4629      	mov	r1, r5
 80054fe:	f7fb fae3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005502:	b108      	cbz	r0, 8005508 <__cvt+0xa4>
 8005504:	f8cd 900c 	str.w	r9, [sp, #12]
 8005508:	2230      	movs	r2, #48	; 0x30
 800550a:	9b03      	ldr	r3, [sp, #12]
 800550c:	454b      	cmp	r3, r9
 800550e:	d307      	bcc.n	8005520 <__cvt+0xbc>
 8005510:	9b03      	ldr	r3, [sp, #12]
 8005512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005514:	1bdb      	subs	r3, r3, r7
 8005516:	4638      	mov	r0, r7
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	b004      	add	sp, #16
 800551c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005520:	1c59      	adds	r1, r3, #1
 8005522:	9103      	str	r1, [sp, #12]
 8005524:	701a      	strb	r2, [r3, #0]
 8005526:	e7f0      	b.n	800550a <__cvt+0xa6>

08005528 <__exponent>:
 8005528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800552a:	4603      	mov	r3, r0
 800552c:	2900      	cmp	r1, #0
 800552e:	bfb8      	it	lt
 8005530:	4249      	neglt	r1, r1
 8005532:	f803 2b02 	strb.w	r2, [r3], #2
 8005536:	bfb4      	ite	lt
 8005538:	222d      	movlt	r2, #45	; 0x2d
 800553a:	222b      	movge	r2, #43	; 0x2b
 800553c:	2909      	cmp	r1, #9
 800553e:	7042      	strb	r2, [r0, #1]
 8005540:	dd2a      	ble.n	8005598 <__exponent+0x70>
 8005542:	f10d 0407 	add.w	r4, sp, #7
 8005546:	46a4      	mov	ip, r4
 8005548:	270a      	movs	r7, #10
 800554a:	46a6      	mov	lr, r4
 800554c:	460a      	mov	r2, r1
 800554e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005552:	fb07 1516 	mls	r5, r7, r6, r1
 8005556:	3530      	adds	r5, #48	; 0x30
 8005558:	2a63      	cmp	r2, #99	; 0x63
 800555a:	f104 34ff 	add.w	r4, r4, #4294967295
 800555e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005562:	4631      	mov	r1, r6
 8005564:	dcf1      	bgt.n	800554a <__exponent+0x22>
 8005566:	3130      	adds	r1, #48	; 0x30
 8005568:	f1ae 0502 	sub.w	r5, lr, #2
 800556c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005570:	1c44      	adds	r4, r0, #1
 8005572:	4629      	mov	r1, r5
 8005574:	4561      	cmp	r1, ip
 8005576:	d30a      	bcc.n	800558e <__exponent+0x66>
 8005578:	f10d 0209 	add.w	r2, sp, #9
 800557c:	eba2 020e 	sub.w	r2, r2, lr
 8005580:	4565      	cmp	r5, ip
 8005582:	bf88      	it	hi
 8005584:	2200      	movhi	r2, #0
 8005586:	4413      	add	r3, r2
 8005588:	1a18      	subs	r0, r3, r0
 800558a:	b003      	add	sp, #12
 800558c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800558e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005592:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005596:	e7ed      	b.n	8005574 <__exponent+0x4c>
 8005598:	2330      	movs	r3, #48	; 0x30
 800559a:	3130      	adds	r1, #48	; 0x30
 800559c:	7083      	strb	r3, [r0, #2]
 800559e:	70c1      	strb	r1, [r0, #3]
 80055a0:	1d03      	adds	r3, r0, #4
 80055a2:	e7f1      	b.n	8005588 <__exponent+0x60>

080055a4 <_printf_float>:
 80055a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a8:	ed2d 8b02 	vpush	{d8}
 80055ac:	b08d      	sub	sp, #52	; 0x34
 80055ae:	460c      	mov	r4, r1
 80055b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80055b4:	4616      	mov	r6, r2
 80055b6:	461f      	mov	r7, r3
 80055b8:	4605      	mov	r5, r0
 80055ba:	f001 fb45 	bl	8006c48 <_localeconv_r>
 80055be:	f8d0 a000 	ldr.w	sl, [r0]
 80055c2:	4650      	mov	r0, sl
 80055c4:	f7fa fe04 	bl	80001d0 <strlen>
 80055c8:	2300      	movs	r3, #0
 80055ca:	930a      	str	r3, [sp, #40]	; 0x28
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	9305      	str	r3, [sp, #20]
 80055d0:	f8d8 3000 	ldr.w	r3, [r8]
 80055d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80055d8:	3307      	adds	r3, #7
 80055da:	f023 0307 	bic.w	r3, r3, #7
 80055de:	f103 0208 	add.w	r2, r3, #8
 80055e2:	f8c8 2000 	str.w	r2, [r8]
 80055e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055f6:	9307      	str	r3, [sp, #28]
 80055f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80055fc:	ee08 0a10 	vmov	s16, r0
 8005600:	4b9f      	ldr	r3, [pc, #636]	; (8005880 <_printf_float+0x2dc>)
 8005602:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005606:	f04f 32ff 	mov.w	r2, #4294967295
 800560a:	f7fb fa8f 	bl	8000b2c <__aeabi_dcmpun>
 800560e:	bb88      	cbnz	r0, 8005674 <_printf_float+0xd0>
 8005610:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005614:	4b9a      	ldr	r3, [pc, #616]	; (8005880 <_printf_float+0x2dc>)
 8005616:	f04f 32ff 	mov.w	r2, #4294967295
 800561a:	f7fb fa69 	bl	8000af0 <__aeabi_dcmple>
 800561e:	bb48      	cbnz	r0, 8005674 <_printf_float+0xd0>
 8005620:	2200      	movs	r2, #0
 8005622:	2300      	movs	r3, #0
 8005624:	4640      	mov	r0, r8
 8005626:	4649      	mov	r1, r9
 8005628:	f7fb fa58 	bl	8000adc <__aeabi_dcmplt>
 800562c:	b110      	cbz	r0, 8005634 <_printf_float+0x90>
 800562e:	232d      	movs	r3, #45	; 0x2d
 8005630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005634:	4b93      	ldr	r3, [pc, #588]	; (8005884 <_printf_float+0x2e0>)
 8005636:	4894      	ldr	r0, [pc, #592]	; (8005888 <_printf_float+0x2e4>)
 8005638:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800563c:	bf94      	ite	ls
 800563e:	4698      	movls	r8, r3
 8005640:	4680      	movhi	r8, r0
 8005642:	2303      	movs	r3, #3
 8005644:	6123      	str	r3, [r4, #16]
 8005646:	9b05      	ldr	r3, [sp, #20]
 8005648:	f023 0204 	bic.w	r2, r3, #4
 800564c:	6022      	str	r2, [r4, #0]
 800564e:	f04f 0900 	mov.w	r9, #0
 8005652:	9700      	str	r7, [sp, #0]
 8005654:	4633      	mov	r3, r6
 8005656:	aa0b      	add	r2, sp, #44	; 0x2c
 8005658:	4621      	mov	r1, r4
 800565a:	4628      	mov	r0, r5
 800565c:	f000 f9d8 	bl	8005a10 <_printf_common>
 8005660:	3001      	adds	r0, #1
 8005662:	f040 8090 	bne.w	8005786 <_printf_float+0x1e2>
 8005666:	f04f 30ff 	mov.w	r0, #4294967295
 800566a:	b00d      	add	sp, #52	; 0x34
 800566c:	ecbd 8b02 	vpop	{d8}
 8005670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005674:	4642      	mov	r2, r8
 8005676:	464b      	mov	r3, r9
 8005678:	4640      	mov	r0, r8
 800567a:	4649      	mov	r1, r9
 800567c:	f7fb fa56 	bl	8000b2c <__aeabi_dcmpun>
 8005680:	b140      	cbz	r0, 8005694 <_printf_float+0xf0>
 8005682:	464b      	mov	r3, r9
 8005684:	2b00      	cmp	r3, #0
 8005686:	bfbc      	itt	lt
 8005688:	232d      	movlt	r3, #45	; 0x2d
 800568a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800568e:	487f      	ldr	r0, [pc, #508]	; (800588c <_printf_float+0x2e8>)
 8005690:	4b7f      	ldr	r3, [pc, #508]	; (8005890 <_printf_float+0x2ec>)
 8005692:	e7d1      	b.n	8005638 <_printf_float+0x94>
 8005694:	6863      	ldr	r3, [r4, #4]
 8005696:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800569a:	9206      	str	r2, [sp, #24]
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	d13f      	bne.n	8005720 <_printf_float+0x17c>
 80056a0:	2306      	movs	r3, #6
 80056a2:	6063      	str	r3, [r4, #4]
 80056a4:	9b05      	ldr	r3, [sp, #20]
 80056a6:	6861      	ldr	r1, [r4, #4]
 80056a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80056ac:	2300      	movs	r3, #0
 80056ae:	9303      	str	r3, [sp, #12]
 80056b0:	ab0a      	add	r3, sp, #40	; 0x28
 80056b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80056b6:	ab09      	add	r3, sp, #36	; 0x24
 80056b8:	ec49 8b10 	vmov	d0, r8, r9
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	6022      	str	r2, [r4, #0]
 80056c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80056c4:	4628      	mov	r0, r5
 80056c6:	f7ff fecd 	bl	8005464 <__cvt>
 80056ca:	9b06      	ldr	r3, [sp, #24]
 80056cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056ce:	2b47      	cmp	r3, #71	; 0x47
 80056d0:	4680      	mov	r8, r0
 80056d2:	d108      	bne.n	80056e6 <_printf_float+0x142>
 80056d4:	1cc8      	adds	r0, r1, #3
 80056d6:	db02      	blt.n	80056de <_printf_float+0x13a>
 80056d8:	6863      	ldr	r3, [r4, #4]
 80056da:	4299      	cmp	r1, r3
 80056dc:	dd41      	ble.n	8005762 <_printf_float+0x1be>
 80056de:	f1ab 0b02 	sub.w	fp, fp, #2
 80056e2:	fa5f fb8b 	uxtb.w	fp, fp
 80056e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056ea:	d820      	bhi.n	800572e <_printf_float+0x18a>
 80056ec:	3901      	subs	r1, #1
 80056ee:	465a      	mov	r2, fp
 80056f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056f4:	9109      	str	r1, [sp, #36]	; 0x24
 80056f6:	f7ff ff17 	bl	8005528 <__exponent>
 80056fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056fc:	1813      	adds	r3, r2, r0
 80056fe:	2a01      	cmp	r2, #1
 8005700:	4681      	mov	r9, r0
 8005702:	6123      	str	r3, [r4, #16]
 8005704:	dc02      	bgt.n	800570c <_printf_float+0x168>
 8005706:	6822      	ldr	r2, [r4, #0]
 8005708:	07d2      	lsls	r2, r2, #31
 800570a:	d501      	bpl.n	8005710 <_printf_float+0x16c>
 800570c:	3301      	adds	r3, #1
 800570e:	6123      	str	r3, [r4, #16]
 8005710:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005714:	2b00      	cmp	r3, #0
 8005716:	d09c      	beq.n	8005652 <_printf_float+0xae>
 8005718:	232d      	movs	r3, #45	; 0x2d
 800571a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800571e:	e798      	b.n	8005652 <_printf_float+0xae>
 8005720:	9a06      	ldr	r2, [sp, #24]
 8005722:	2a47      	cmp	r2, #71	; 0x47
 8005724:	d1be      	bne.n	80056a4 <_printf_float+0x100>
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1bc      	bne.n	80056a4 <_printf_float+0x100>
 800572a:	2301      	movs	r3, #1
 800572c:	e7b9      	b.n	80056a2 <_printf_float+0xfe>
 800572e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005732:	d118      	bne.n	8005766 <_printf_float+0x1c2>
 8005734:	2900      	cmp	r1, #0
 8005736:	6863      	ldr	r3, [r4, #4]
 8005738:	dd0b      	ble.n	8005752 <_printf_float+0x1ae>
 800573a:	6121      	str	r1, [r4, #16]
 800573c:	b913      	cbnz	r3, 8005744 <_printf_float+0x1a0>
 800573e:	6822      	ldr	r2, [r4, #0]
 8005740:	07d0      	lsls	r0, r2, #31
 8005742:	d502      	bpl.n	800574a <_printf_float+0x1a6>
 8005744:	3301      	adds	r3, #1
 8005746:	440b      	add	r3, r1
 8005748:	6123      	str	r3, [r4, #16]
 800574a:	65a1      	str	r1, [r4, #88]	; 0x58
 800574c:	f04f 0900 	mov.w	r9, #0
 8005750:	e7de      	b.n	8005710 <_printf_float+0x16c>
 8005752:	b913      	cbnz	r3, 800575a <_printf_float+0x1b6>
 8005754:	6822      	ldr	r2, [r4, #0]
 8005756:	07d2      	lsls	r2, r2, #31
 8005758:	d501      	bpl.n	800575e <_printf_float+0x1ba>
 800575a:	3302      	adds	r3, #2
 800575c:	e7f4      	b.n	8005748 <_printf_float+0x1a4>
 800575e:	2301      	movs	r3, #1
 8005760:	e7f2      	b.n	8005748 <_printf_float+0x1a4>
 8005762:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005768:	4299      	cmp	r1, r3
 800576a:	db05      	blt.n	8005778 <_printf_float+0x1d4>
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	6121      	str	r1, [r4, #16]
 8005770:	07d8      	lsls	r0, r3, #31
 8005772:	d5ea      	bpl.n	800574a <_printf_float+0x1a6>
 8005774:	1c4b      	adds	r3, r1, #1
 8005776:	e7e7      	b.n	8005748 <_printf_float+0x1a4>
 8005778:	2900      	cmp	r1, #0
 800577a:	bfd4      	ite	le
 800577c:	f1c1 0202 	rsble	r2, r1, #2
 8005780:	2201      	movgt	r2, #1
 8005782:	4413      	add	r3, r2
 8005784:	e7e0      	b.n	8005748 <_printf_float+0x1a4>
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	055a      	lsls	r2, r3, #21
 800578a:	d407      	bmi.n	800579c <_printf_float+0x1f8>
 800578c:	6923      	ldr	r3, [r4, #16]
 800578e:	4642      	mov	r2, r8
 8005790:	4631      	mov	r1, r6
 8005792:	4628      	mov	r0, r5
 8005794:	47b8      	blx	r7
 8005796:	3001      	adds	r0, #1
 8005798:	d12c      	bne.n	80057f4 <_printf_float+0x250>
 800579a:	e764      	b.n	8005666 <_printf_float+0xc2>
 800579c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057a0:	f240 80e0 	bls.w	8005964 <_printf_float+0x3c0>
 80057a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057a8:	2200      	movs	r2, #0
 80057aa:	2300      	movs	r3, #0
 80057ac:	f7fb f98c 	bl	8000ac8 <__aeabi_dcmpeq>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d034      	beq.n	800581e <_printf_float+0x27a>
 80057b4:	4a37      	ldr	r2, [pc, #220]	; (8005894 <_printf_float+0x2f0>)
 80057b6:	2301      	movs	r3, #1
 80057b8:	4631      	mov	r1, r6
 80057ba:	4628      	mov	r0, r5
 80057bc:	47b8      	blx	r7
 80057be:	3001      	adds	r0, #1
 80057c0:	f43f af51 	beq.w	8005666 <_printf_float+0xc2>
 80057c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057c8:	429a      	cmp	r2, r3
 80057ca:	db02      	blt.n	80057d2 <_printf_float+0x22e>
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	07d8      	lsls	r0, r3, #31
 80057d0:	d510      	bpl.n	80057f4 <_printf_float+0x250>
 80057d2:	ee18 3a10 	vmov	r3, s16
 80057d6:	4652      	mov	r2, sl
 80057d8:	4631      	mov	r1, r6
 80057da:	4628      	mov	r0, r5
 80057dc:	47b8      	blx	r7
 80057de:	3001      	adds	r0, #1
 80057e0:	f43f af41 	beq.w	8005666 <_printf_float+0xc2>
 80057e4:	f04f 0800 	mov.w	r8, #0
 80057e8:	f104 091a 	add.w	r9, r4, #26
 80057ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ee:	3b01      	subs	r3, #1
 80057f0:	4543      	cmp	r3, r8
 80057f2:	dc09      	bgt.n	8005808 <_printf_float+0x264>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	079b      	lsls	r3, r3, #30
 80057f8:	f100 8105 	bmi.w	8005a06 <_printf_float+0x462>
 80057fc:	68e0      	ldr	r0, [r4, #12]
 80057fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005800:	4298      	cmp	r0, r3
 8005802:	bfb8      	it	lt
 8005804:	4618      	movlt	r0, r3
 8005806:	e730      	b.n	800566a <_printf_float+0xc6>
 8005808:	2301      	movs	r3, #1
 800580a:	464a      	mov	r2, r9
 800580c:	4631      	mov	r1, r6
 800580e:	4628      	mov	r0, r5
 8005810:	47b8      	blx	r7
 8005812:	3001      	adds	r0, #1
 8005814:	f43f af27 	beq.w	8005666 <_printf_float+0xc2>
 8005818:	f108 0801 	add.w	r8, r8, #1
 800581c:	e7e6      	b.n	80057ec <_printf_float+0x248>
 800581e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005820:	2b00      	cmp	r3, #0
 8005822:	dc39      	bgt.n	8005898 <_printf_float+0x2f4>
 8005824:	4a1b      	ldr	r2, [pc, #108]	; (8005894 <_printf_float+0x2f0>)
 8005826:	2301      	movs	r3, #1
 8005828:	4631      	mov	r1, r6
 800582a:	4628      	mov	r0, r5
 800582c:	47b8      	blx	r7
 800582e:	3001      	adds	r0, #1
 8005830:	f43f af19 	beq.w	8005666 <_printf_float+0xc2>
 8005834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005838:	4313      	orrs	r3, r2
 800583a:	d102      	bne.n	8005842 <_printf_float+0x29e>
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	07d9      	lsls	r1, r3, #31
 8005840:	d5d8      	bpl.n	80057f4 <_printf_float+0x250>
 8005842:	ee18 3a10 	vmov	r3, s16
 8005846:	4652      	mov	r2, sl
 8005848:	4631      	mov	r1, r6
 800584a:	4628      	mov	r0, r5
 800584c:	47b8      	blx	r7
 800584e:	3001      	adds	r0, #1
 8005850:	f43f af09 	beq.w	8005666 <_printf_float+0xc2>
 8005854:	f04f 0900 	mov.w	r9, #0
 8005858:	f104 0a1a 	add.w	sl, r4, #26
 800585c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800585e:	425b      	negs	r3, r3
 8005860:	454b      	cmp	r3, r9
 8005862:	dc01      	bgt.n	8005868 <_printf_float+0x2c4>
 8005864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005866:	e792      	b.n	800578e <_printf_float+0x1ea>
 8005868:	2301      	movs	r3, #1
 800586a:	4652      	mov	r2, sl
 800586c:	4631      	mov	r1, r6
 800586e:	4628      	mov	r0, r5
 8005870:	47b8      	blx	r7
 8005872:	3001      	adds	r0, #1
 8005874:	f43f aef7 	beq.w	8005666 <_printf_float+0xc2>
 8005878:	f109 0901 	add.w	r9, r9, #1
 800587c:	e7ee      	b.n	800585c <_printf_float+0x2b8>
 800587e:	bf00      	nop
 8005880:	7fefffff 	.word	0x7fefffff
 8005884:	08007f38 	.word	0x08007f38
 8005888:	08007f3c 	.word	0x08007f3c
 800588c:	08007f44 	.word	0x08007f44
 8005890:	08007f40 	.word	0x08007f40
 8005894:	08007f48 	.word	0x08007f48
 8005898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800589a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800589c:	429a      	cmp	r2, r3
 800589e:	bfa8      	it	ge
 80058a0:	461a      	movge	r2, r3
 80058a2:	2a00      	cmp	r2, #0
 80058a4:	4691      	mov	r9, r2
 80058a6:	dc37      	bgt.n	8005918 <_printf_float+0x374>
 80058a8:	f04f 0b00 	mov.w	fp, #0
 80058ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058b0:	f104 021a 	add.w	r2, r4, #26
 80058b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058b6:	9305      	str	r3, [sp, #20]
 80058b8:	eba3 0309 	sub.w	r3, r3, r9
 80058bc:	455b      	cmp	r3, fp
 80058be:	dc33      	bgt.n	8005928 <_printf_float+0x384>
 80058c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058c4:	429a      	cmp	r2, r3
 80058c6:	db3b      	blt.n	8005940 <_printf_float+0x39c>
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	07da      	lsls	r2, r3, #31
 80058cc:	d438      	bmi.n	8005940 <_printf_float+0x39c>
 80058ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d0:	9a05      	ldr	r2, [sp, #20]
 80058d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058d4:	1a9a      	subs	r2, r3, r2
 80058d6:	eba3 0901 	sub.w	r9, r3, r1
 80058da:	4591      	cmp	r9, r2
 80058dc:	bfa8      	it	ge
 80058de:	4691      	movge	r9, r2
 80058e0:	f1b9 0f00 	cmp.w	r9, #0
 80058e4:	dc35      	bgt.n	8005952 <_printf_float+0x3ae>
 80058e6:	f04f 0800 	mov.w	r8, #0
 80058ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058ee:	f104 0a1a 	add.w	sl, r4, #26
 80058f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058f6:	1a9b      	subs	r3, r3, r2
 80058f8:	eba3 0309 	sub.w	r3, r3, r9
 80058fc:	4543      	cmp	r3, r8
 80058fe:	f77f af79 	ble.w	80057f4 <_printf_float+0x250>
 8005902:	2301      	movs	r3, #1
 8005904:	4652      	mov	r2, sl
 8005906:	4631      	mov	r1, r6
 8005908:	4628      	mov	r0, r5
 800590a:	47b8      	blx	r7
 800590c:	3001      	adds	r0, #1
 800590e:	f43f aeaa 	beq.w	8005666 <_printf_float+0xc2>
 8005912:	f108 0801 	add.w	r8, r8, #1
 8005916:	e7ec      	b.n	80058f2 <_printf_float+0x34e>
 8005918:	4613      	mov	r3, r2
 800591a:	4631      	mov	r1, r6
 800591c:	4642      	mov	r2, r8
 800591e:	4628      	mov	r0, r5
 8005920:	47b8      	blx	r7
 8005922:	3001      	adds	r0, #1
 8005924:	d1c0      	bne.n	80058a8 <_printf_float+0x304>
 8005926:	e69e      	b.n	8005666 <_printf_float+0xc2>
 8005928:	2301      	movs	r3, #1
 800592a:	4631      	mov	r1, r6
 800592c:	4628      	mov	r0, r5
 800592e:	9205      	str	r2, [sp, #20]
 8005930:	47b8      	blx	r7
 8005932:	3001      	adds	r0, #1
 8005934:	f43f ae97 	beq.w	8005666 <_printf_float+0xc2>
 8005938:	9a05      	ldr	r2, [sp, #20]
 800593a:	f10b 0b01 	add.w	fp, fp, #1
 800593e:	e7b9      	b.n	80058b4 <_printf_float+0x310>
 8005940:	ee18 3a10 	vmov	r3, s16
 8005944:	4652      	mov	r2, sl
 8005946:	4631      	mov	r1, r6
 8005948:	4628      	mov	r0, r5
 800594a:	47b8      	blx	r7
 800594c:	3001      	adds	r0, #1
 800594e:	d1be      	bne.n	80058ce <_printf_float+0x32a>
 8005950:	e689      	b.n	8005666 <_printf_float+0xc2>
 8005952:	9a05      	ldr	r2, [sp, #20]
 8005954:	464b      	mov	r3, r9
 8005956:	4442      	add	r2, r8
 8005958:	4631      	mov	r1, r6
 800595a:	4628      	mov	r0, r5
 800595c:	47b8      	blx	r7
 800595e:	3001      	adds	r0, #1
 8005960:	d1c1      	bne.n	80058e6 <_printf_float+0x342>
 8005962:	e680      	b.n	8005666 <_printf_float+0xc2>
 8005964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005966:	2a01      	cmp	r2, #1
 8005968:	dc01      	bgt.n	800596e <_printf_float+0x3ca>
 800596a:	07db      	lsls	r3, r3, #31
 800596c:	d538      	bpl.n	80059e0 <_printf_float+0x43c>
 800596e:	2301      	movs	r3, #1
 8005970:	4642      	mov	r2, r8
 8005972:	4631      	mov	r1, r6
 8005974:	4628      	mov	r0, r5
 8005976:	47b8      	blx	r7
 8005978:	3001      	adds	r0, #1
 800597a:	f43f ae74 	beq.w	8005666 <_printf_float+0xc2>
 800597e:	ee18 3a10 	vmov	r3, s16
 8005982:	4652      	mov	r2, sl
 8005984:	4631      	mov	r1, r6
 8005986:	4628      	mov	r0, r5
 8005988:	47b8      	blx	r7
 800598a:	3001      	adds	r0, #1
 800598c:	f43f ae6b 	beq.w	8005666 <_printf_float+0xc2>
 8005990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005994:	2200      	movs	r2, #0
 8005996:	2300      	movs	r3, #0
 8005998:	f7fb f896 	bl	8000ac8 <__aeabi_dcmpeq>
 800599c:	b9d8      	cbnz	r0, 80059d6 <_printf_float+0x432>
 800599e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a0:	f108 0201 	add.w	r2, r8, #1
 80059a4:	3b01      	subs	r3, #1
 80059a6:	4631      	mov	r1, r6
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b8      	blx	r7
 80059ac:	3001      	adds	r0, #1
 80059ae:	d10e      	bne.n	80059ce <_printf_float+0x42a>
 80059b0:	e659      	b.n	8005666 <_printf_float+0xc2>
 80059b2:	2301      	movs	r3, #1
 80059b4:	4652      	mov	r2, sl
 80059b6:	4631      	mov	r1, r6
 80059b8:	4628      	mov	r0, r5
 80059ba:	47b8      	blx	r7
 80059bc:	3001      	adds	r0, #1
 80059be:	f43f ae52 	beq.w	8005666 <_printf_float+0xc2>
 80059c2:	f108 0801 	add.w	r8, r8, #1
 80059c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c8:	3b01      	subs	r3, #1
 80059ca:	4543      	cmp	r3, r8
 80059cc:	dcf1      	bgt.n	80059b2 <_printf_float+0x40e>
 80059ce:	464b      	mov	r3, r9
 80059d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059d4:	e6dc      	b.n	8005790 <_printf_float+0x1ec>
 80059d6:	f04f 0800 	mov.w	r8, #0
 80059da:	f104 0a1a 	add.w	sl, r4, #26
 80059de:	e7f2      	b.n	80059c6 <_printf_float+0x422>
 80059e0:	2301      	movs	r3, #1
 80059e2:	4642      	mov	r2, r8
 80059e4:	e7df      	b.n	80059a6 <_printf_float+0x402>
 80059e6:	2301      	movs	r3, #1
 80059e8:	464a      	mov	r2, r9
 80059ea:	4631      	mov	r1, r6
 80059ec:	4628      	mov	r0, r5
 80059ee:	47b8      	blx	r7
 80059f0:	3001      	adds	r0, #1
 80059f2:	f43f ae38 	beq.w	8005666 <_printf_float+0xc2>
 80059f6:	f108 0801 	add.w	r8, r8, #1
 80059fa:	68e3      	ldr	r3, [r4, #12]
 80059fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059fe:	1a5b      	subs	r3, r3, r1
 8005a00:	4543      	cmp	r3, r8
 8005a02:	dcf0      	bgt.n	80059e6 <_printf_float+0x442>
 8005a04:	e6fa      	b.n	80057fc <_printf_float+0x258>
 8005a06:	f04f 0800 	mov.w	r8, #0
 8005a0a:	f104 0919 	add.w	r9, r4, #25
 8005a0e:	e7f4      	b.n	80059fa <_printf_float+0x456>

08005a10 <_printf_common>:
 8005a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a14:	4616      	mov	r6, r2
 8005a16:	4699      	mov	r9, r3
 8005a18:	688a      	ldr	r2, [r1, #8]
 8005a1a:	690b      	ldr	r3, [r1, #16]
 8005a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a20:	4293      	cmp	r3, r2
 8005a22:	bfb8      	it	lt
 8005a24:	4613      	movlt	r3, r2
 8005a26:	6033      	str	r3, [r6, #0]
 8005a28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a2c:	4607      	mov	r7, r0
 8005a2e:	460c      	mov	r4, r1
 8005a30:	b10a      	cbz	r2, 8005a36 <_printf_common+0x26>
 8005a32:	3301      	adds	r3, #1
 8005a34:	6033      	str	r3, [r6, #0]
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	0699      	lsls	r1, r3, #26
 8005a3a:	bf42      	ittt	mi
 8005a3c:	6833      	ldrmi	r3, [r6, #0]
 8005a3e:	3302      	addmi	r3, #2
 8005a40:	6033      	strmi	r3, [r6, #0]
 8005a42:	6825      	ldr	r5, [r4, #0]
 8005a44:	f015 0506 	ands.w	r5, r5, #6
 8005a48:	d106      	bne.n	8005a58 <_printf_common+0x48>
 8005a4a:	f104 0a19 	add.w	sl, r4, #25
 8005a4e:	68e3      	ldr	r3, [r4, #12]
 8005a50:	6832      	ldr	r2, [r6, #0]
 8005a52:	1a9b      	subs	r3, r3, r2
 8005a54:	42ab      	cmp	r3, r5
 8005a56:	dc26      	bgt.n	8005aa6 <_printf_common+0x96>
 8005a58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a5c:	1e13      	subs	r3, r2, #0
 8005a5e:	6822      	ldr	r2, [r4, #0]
 8005a60:	bf18      	it	ne
 8005a62:	2301      	movne	r3, #1
 8005a64:	0692      	lsls	r2, r2, #26
 8005a66:	d42b      	bmi.n	8005ac0 <_printf_common+0xb0>
 8005a68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a6c:	4649      	mov	r1, r9
 8005a6e:	4638      	mov	r0, r7
 8005a70:	47c0      	blx	r8
 8005a72:	3001      	adds	r0, #1
 8005a74:	d01e      	beq.n	8005ab4 <_printf_common+0xa4>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	68e5      	ldr	r5, [r4, #12]
 8005a7a:	6832      	ldr	r2, [r6, #0]
 8005a7c:	f003 0306 	and.w	r3, r3, #6
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	bf08      	it	eq
 8005a84:	1aad      	subeq	r5, r5, r2
 8005a86:	68a3      	ldr	r3, [r4, #8]
 8005a88:	6922      	ldr	r2, [r4, #16]
 8005a8a:	bf0c      	ite	eq
 8005a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a90:	2500      	movne	r5, #0
 8005a92:	4293      	cmp	r3, r2
 8005a94:	bfc4      	itt	gt
 8005a96:	1a9b      	subgt	r3, r3, r2
 8005a98:	18ed      	addgt	r5, r5, r3
 8005a9a:	2600      	movs	r6, #0
 8005a9c:	341a      	adds	r4, #26
 8005a9e:	42b5      	cmp	r5, r6
 8005aa0:	d11a      	bne.n	8005ad8 <_printf_common+0xc8>
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	e008      	b.n	8005ab8 <_printf_common+0xa8>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4652      	mov	r2, sl
 8005aaa:	4649      	mov	r1, r9
 8005aac:	4638      	mov	r0, r7
 8005aae:	47c0      	blx	r8
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d103      	bne.n	8005abc <_printf_common+0xac>
 8005ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005abc:	3501      	adds	r5, #1
 8005abe:	e7c6      	b.n	8005a4e <_printf_common+0x3e>
 8005ac0:	18e1      	adds	r1, r4, r3
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	2030      	movs	r0, #48	; 0x30
 8005ac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005aca:	4422      	add	r2, r4
 8005acc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ad0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ad4:	3302      	adds	r3, #2
 8005ad6:	e7c7      	b.n	8005a68 <_printf_common+0x58>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	4622      	mov	r2, r4
 8005adc:	4649      	mov	r1, r9
 8005ade:	4638      	mov	r0, r7
 8005ae0:	47c0      	blx	r8
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	d0e6      	beq.n	8005ab4 <_printf_common+0xa4>
 8005ae6:	3601      	adds	r6, #1
 8005ae8:	e7d9      	b.n	8005a9e <_printf_common+0x8e>
	...

08005aec <_printf_i>:
 8005aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005af0:	7e0f      	ldrb	r7, [r1, #24]
 8005af2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005af4:	2f78      	cmp	r7, #120	; 0x78
 8005af6:	4691      	mov	r9, r2
 8005af8:	4680      	mov	r8, r0
 8005afa:	460c      	mov	r4, r1
 8005afc:	469a      	mov	sl, r3
 8005afe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b02:	d807      	bhi.n	8005b14 <_printf_i+0x28>
 8005b04:	2f62      	cmp	r7, #98	; 0x62
 8005b06:	d80a      	bhi.n	8005b1e <_printf_i+0x32>
 8005b08:	2f00      	cmp	r7, #0
 8005b0a:	f000 80d8 	beq.w	8005cbe <_printf_i+0x1d2>
 8005b0e:	2f58      	cmp	r7, #88	; 0x58
 8005b10:	f000 80a3 	beq.w	8005c5a <_printf_i+0x16e>
 8005b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b1c:	e03a      	b.n	8005b94 <_printf_i+0xa8>
 8005b1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b22:	2b15      	cmp	r3, #21
 8005b24:	d8f6      	bhi.n	8005b14 <_printf_i+0x28>
 8005b26:	a101      	add	r1, pc, #4	; (adr r1, 8005b2c <_printf_i+0x40>)
 8005b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b2c:	08005b85 	.word	0x08005b85
 8005b30:	08005b99 	.word	0x08005b99
 8005b34:	08005b15 	.word	0x08005b15
 8005b38:	08005b15 	.word	0x08005b15
 8005b3c:	08005b15 	.word	0x08005b15
 8005b40:	08005b15 	.word	0x08005b15
 8005b44:	08005b99 	.word	0x08005b99
 8005b48:	08005b15 	.word	0x08005b15
 8005b4c:	08005b15 	.word	0x08005b15
 8005b50:	08005b15 	.word	0x08005b15
 8005b54:	08005b15 	.word	0x08005b15
 8005b58:	08005ca5 	.word	0x08005ca5
 8005b5c:	08005bc9 	.word	0x08005bc9
 8005b60:	08005c87 	.word	0x08005c87
 8005b64:	08005b15 	.word	0x08005b15
 8005b68:	08005b15 	.word	0x08005b15
 8005b6c:	08005cc7 	.word	0x08005cc7
 8005b70:	08005b15 	.word	0x08005b15
 8005b74:	08005bc9 	.word	0x08005bc9
 8005b78:	08005b15 	.word	0x08005b15
 8005b7c:	08005b15 	.word	0x08005b15
 8005b80:	08005c8f 	.word	0x08005c8f
 8005b84:	682b      	ldr	r3, [r5, #0]
 8005b86:	1d1a      	adds	r2, r3, #4
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	602a      	str	r2, [r5, #0]
 8005b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b94:	2301      	movs	r3, #1
 8005b96:	e0a3      	b.n	8005ce0 <_printf_i+0x1f4>
 8005b98:	6820      	ldr	r0, [r4, #0]
 8005b9a:	6829      	ldr	r1, [r5, #0]
 8005b9c:	0606      	lsls	r6, r0, #24
 8005b9e:	f101 0304 	add.w	r3, r1, #4
 8005ba2:	d50a      	bpl.n	8005bba <_printf_i+0xce>
 8005ba4:	680e      	ldr	r6, [r1, #0]
 8005ba6:	602b      	str	r3, [r5, #0]
 8005ba8:	2e00      	cmp	r6, #0
 8005baa:	da03      	bge.n	8005bb4 <_printf_i+0xc8>
 8005bac:	232d      	movs	r3, #45	; 0x2d
 8005bae:	4276      	negs	r6, r6
 8005bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bb4:	485e      	ldr	r0, [pc, #376]	; (8005d30 <_printf_i+0x244>)
 8005bb6:	230a      	movs	r3, #10
 8005bb8:	e019      	b.n	8005bee <_printf_i+0x102>
 8005bba:	680e      	ldr	r6, [r1, #0]
 8005bbc:	602b      	str	r3, [r5, #0]
 8005bbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bc2:	bf18      	it	ne
 8005bc4:	b236      	sxthne	r6, r6
 8005bc6:	e7ef      	b.n	8005ba8 <_printf_i+0xbc>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	6820      	ldr	r0, [r4, #0]
 8005bcc:	1d19      	adds	r1, r3, #4
 8005bce:	6029      	str	r1, [r5, #0]
 8005bd0:	0601      	lsls	r1, r0, #24
 8005bd2:	d501      	bpl.n	8005bd8 <_printf_i+0xec>
 8005bd4:	681e      	ldr	r6, [r3, #0]
 8005bd6:	e002      	b.n	8005bde <_printf_i+0xf2>
 8005bd8:	0646      	lsls	r6, r0, #25
 8005bda:	d5fb      	bpl.n	8005bd4 <_printf_i+0xe8>
 8005bdc:	881e      	ldrh	r6, [r3, #0]
 8005bde:	4854      	ldr	r0, [pc, #336]	; (8005d30 <_printf_i+0x244>)
 8005be0:	2f6f      	cmp	r7, #111	; 0x6f
 8005be2:	bf0c      	ite	eq
 8005be4:	2308      	moveq	r3, #8
 8005be6:	230a      	movne	r3, #10
 8005be8:	2100      	movs	r1, #0
 8005bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bee:	6865      	ldr	r5, [r4, #4]
 8005bf0:	60a5      	str	r5, [r4, #8]
 8005bf2:	2d00      	cmp	r5, #0
 8005bf4:	bfa2      	ittt	ge
 8005bf6:	6821      	ldrge	r1, [r4, #0]
 8005bf8:	f021 0104 	bicge.w	r1, r1, #4
 8005bfc:	6021      	strge	r1, [r4, #0]
 8005bfe:	b90e      	cbnz	r6, 8005c04 <_printf_i+0x118>
 8005c00:	2d00      	cmp	r5, #0
 8005c02:	d04d      	beq.n	8005ca0 <_printf_i+0x1b4>
 8005c04:	4615      	mov	r5, r2
 8005c06:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c0a:	fb03 6711 	mls	r7, r3, r1, r6
 8005c0e:	5dc7      	ldrb	r7, [r0, r7]
 8005c10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c14:	4637      	mov	r7, r6
 8005c16:	42bb      	cmp	r3, r7
 8005c18:	460e      	mov	r6, r1
 8005c1a:	d9f4      	bls.n	8005c06 <_printf_i+0x11a>
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d10b      	bne.n	8005c38 <_printf_i+0x14c>
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	07de      	lsls	r6, r3, #31
 8005c24:	d508      	bpl.n	8005c38 <_printf_i+0x14c>
 8005c26:	6923      	ldr	r3, [r4, #16]
 8005c28:	6861      	ldr	r1, [r4, #4]
 8005c2a:	4299      	cmp	r1, r3
 8005c2c:	bfde      	ittt	le
 8005c2e:	2330      	movle	r3, #48	; 0x30
 8005c30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c38:	1b52      	subs	r2, r2, r5
 8005c3a:	6122      	str	r2, [r4, #16]
 8005c3c:	f8cd a000 	str.w	sl, [sp]
 8005c40:	464b      	mov	r3, r9
 8005c42:	aa03      	add	r2, sp, #12
 8005c44:	4621      	mov	r1, r4
 8005c46:	4640      	mov	r0, r8
 8005c48:	f7ff fee2 	bl	8005a10 <_printf_common>
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d14c      	bne.n	8005cea <_printf_i+0x1fe>
 8005c50:	f04f 30ff 	mov.w	r0, #4294967295
 8005c54:	b004      	add	sp, #16
 8005c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c5a:	4835      	ldr	r0, [pc, #212]	; (8005d30 <_printf_i+0x244>)
 8005c5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c60:	6829      	ldr	r1, [r5, #0]
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c68:	6029      	str	r1, [r5, #0]
 8005c6a:	061d      	lsls	r5, r3, #24
 8005c6c:	d514      	bpl.n	8005c98 <_printf_i+0x1ac>
 8005c6e:	07df      	lsls	r7, r3, #31
 8005c70:	bf44      	itt	mi
 8005c72:	f043 0320 	orrmi.w	r3, r3, #32
 8005c76:	6023      	strmi	r3, [r4, #0]
 8005c78:	b91e      	cbnz	r6, 8005c82 <_printf_i+0x196>
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	f023 0320 	bic.w	r3, r3, #32
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	2310      	movs	r3, #16
 8005c84:	e7b0      	b.n	8005be8 <_printf_i+0xfc>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	f043 0320 	orr.w	r3, r3, #32
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	2378      	movs	r3, #120	; 0x78
 8005c90:	4828      	ldr	r0, [pc, #160]	; (8005d34 <_printf_i+0x248>)
 8005c92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c96:	e7e3      	b.n	8005c60 <_printf_i+0x174>
 8005c98:	0659      	lsls	r1, r3, #25
 8005c9a:	bf48      	it	mi
 8005c9c:	b2b6      	uxthmi	r6, r6
 8005c9e:	e7e6      	b.n	8005c6e <_printf_i+0x182>
 8005ca0:	4615      	mov	r5, r2
 8005ca2:	e7bb      	b.n	8005c1c <_printf_i+0x130>
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	6826      	ldr	r6, [r4, #0]
 8005ca8:	6961      	ldr	r1, [r4, #20]
 8005caa:	1d18      	adds	r0, r3, #4
 8005cac:	6028      	str	r0, [r5, #0]
 8005cae:	0635      	lsls	r5, r6, #24
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	d501      	bpl.n	8005cb8 <_printf_i+0x1cc>
 8005cb4:	6019      	str	r1, [r3, #0]
 8005cb6:	e002      	b.n	8005cbe <_printf_i+0x1d2>
 8005cb8:	0670      	lsls	r0, r6, #25
 8005cba:	d5fb      	bpl.n	8005cb4 <_printf_i+0x1c8>
 8005cbc:	8019      	strh	r1, [r3, #0]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	6123      	str	r3, [r4, #16]
 8005cc2:	4615      	mov	r5, r2
 8005cc4:	e7ba      	b.n	8005c3c <_printf_i+0x150>
 8005cc6:	682b      	ldr	r3, [r5, #0]
 8005cc8:	1d1a      	adds	r2, r3, #4
 8005cca:	602a      	str	r2, [r5, #0]
 8005ccc:	681d      	ldr	r5, [r3, #0]
 8005cce:	6862      	ldr	r2, [r4, #4]
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	f7fa fa84 	bl	80001e0 <memchr>
 8005cd8:	b108      	cbz	r0, 8005cde <_printf_i+0x1f2>
 8005cda:	1b40      	subs	r0, r0, r5
 8005cdc:	6060      	str	r0, [r4, #4]
 8005cde:	6863      	ldr	r3, [r4, #4]
 8005ce0:	6123      	str	r3, [r4, #16]
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ce8:	e7a8      	b.n	8005c3c <_printf_i+0x150>
 8005cea:	6923      	ldr	r3, [r4, #16]
 8005cec:	462a      	mov	r2, r5
 8005cee:	4649      	mov	r1, r9
 8005cf0:	4640      	mov	r0, r8
 8005cf2:	47d0      	blx	sl
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	d0ab      	beq.n	8005c50 <_printf_i+0x164>
 8005cf8:	6823      	ldr	r3, [r4, #0]
 8005cfa:	079b      	lsls	r3, r3, #30
 8005cfc:	d413      	bmi.n	8005d26 <_printf_i+0x23a>
 8005cfe:	68e0      	ldr	r0, [r4, #12]
 8005d00:	9b03      	ldr	r3, [sp, #12]
 8005d02:	4298      	cmp	r0, r3
 8005d04:	bfb8      	it	lt
 8005d06:	4618      	movlt	r0, r3
 8005d08:	e7a4      	b.n	8005c54 <_printf_i+0x168>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	4632      	mov	r2, r6
 8005d0e:	4649      	mov	r1, r9
 8005d10:	4640      	mov	r0, r8
 8005d12:	47d0      	blx	sl
 8005d14:	3001      	adds	r0, #1
 8005d16:	d09b      	beq.n	8005c50 <_printf_i+0x164>
 8005d18:	3501      	adds	r5, #1
 8005d1a:	68e3      	ldr	r3, [r4, #12]
 8005d1c:	9903      	ldr	r1, [sp, #12]
 8005d1e:	1a5b      	subs	r3, r3, r1
 8005d20:	42ab      	cmp	r3, r5
 8005d22:	dcf2      	bgt.n	8005d0a <_printf_i+0x21e>
 8005d24:	e7eb      	b.n	8005cfe <_printf_i+0x212>
 8005d26:	2500      	movs	r5, #0
 8005d28:	f104 0619 	add.w	r6, r4, #25
 8005d2c:	e7f5      	b.n	8005d1a <_printf_i+0x22e>
 8005d2e:	bf00      	nop
 8005d30:	08007f4a 	.word	0x08007f4a
 8005d34:	08007f5b 	.word	0x08007f5b

08005d38 <iprintf>:
 8005d38:	b40f      	push	{r0, r1, r2, r3}
 8005d3a:	4b0a      	ldr	r3, [pc, #40]	; (8005d64 <iprintf+0x2c>)
 8005d3c:	b513      	push	{r0, r1, r4, lr}
 8005d3e:	681c      	ldr	r4, [r3, #0]
 8005d40:	b124      	cbz	r4, 8005d4c <iprintf+0x14>
 8005d42:	69a3      	ldr	r3, [r4, #24]
 8005d44:	b913      	cbnz	r3, 8005d4c <iprintf+0x14>
 8005d46:	4620      	mov	r0, r4
 8005d48:	f000 fee0 	bl	8006b0c <__sinit>
 8005d4c:	ab05      	add	r3, sp, #20
 8005d4e:	9a04      	ldr	r2, [sp, #16]
 8005d50:	68a1      	ldr	r1, [r4, #8]
 8005d52:	9301      	str	r3, [sp, #4]
 8005d54:	4620      	mov	r0, r4
 8005d56:	f001 fc39 	bl	80075cc <_vfiprintf_r>
 8005d5a:	b002      	add	sp, #8
 8005d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d60:	b004      	add	sp, #16
 8005d62:	4770      	bx	lr
 8005d64:	2000000c 	.word	0x2000000c

08005d68 <quorem>:
 8005d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	6903      	ldr	r3, [r0, #16]
 8005d6e:	690c      	ldr	r4, [r1, #16]
 8005d70:	42a3      	cmp	r3, r4
 8005d72:	4607      	mov	r7, r0
 8005d74:	f2c0 8081 	blt.w	8005e7a <quorem+0x112>
 8005d78:	3c01      	subs	r4, #1
 8005d7a:	f101 0814 	add.w	r8, r1, #20
 8005d7e:	f100 0514 	add.w	r5, r0, #20
 8005d82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d86:	9301      	str	r3, [sp, #4]
 8005d88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d90:	3301      	adds	r3, #1
 8005d92:	429a      	cmp	r2, r3
 8005d94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005d98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005da0:	d331      	bcc.n	8005e06 <quorem+0x9e>
 8005da2:	f04f 0e00 	mov.w	lr, #0
 8005da6:	4640      	mov	r0, r8
 8005da8:	46ac      	mov	ip, r5
 8005daa:	46f2      	mov	sl, lr
 8005dac:	f850 2b04 	ldr.w	r2, [r0], #4
 8005db0:	b293      	uxth	r3, r2
 8005db2:	fb06 e303 	mla	r3, r6, r3, lr
 8005db6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	ebaa 0303 	sub.w	r3, sl, r3
 8005dc0:	f8dc a000 	ldr.w	sl, [ip]
 8005dc4:	0c12      	lsrs	r2, r2, #16
 8005dc6:	fa13 f38a 	uxtah	r3, r3, sl
 8005dca:	fb06 e202 	mla	r2, r6, r2, lr
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	9b00      	ldr	r3, [sp, #0]
 8005dd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005dd6:	b292      	uxth	r2, r2
 8005dd8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ddc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005de0:	f8bd 3000 	ldrh.w	r3, [sp]
 8005de4:	4581      	cmp	r9, r0
 8005de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dea:	f84c 3b04 	str.w	r3, [ip], #4
 8005dee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005df2:	d2db      	bcs.n	8005dac <quorem+0x44>
 8005df4:	f855 300b 	ldr.w	r3, [r5, fp]
 8005df8:	b92b      	cbnz	r3, 8005e06 <quorem+0x9e>
 8005dfa:	9b01      	ldr	r3, [sp, #4]
 8005dfc:	3b04      	subs	r3, #4
 8005dfe:	429d      	cmp	r5, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	d32e      	bcc.n	8005e62 <quorem+0xfa>
 8005e04:	613c      	str	r4, [r7, #16]
 8005e06:	4638      	mov	r0, r7
 8005e08:	f001 f9be 	bl	8007188 <__mcmp>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	db24      	blt.n	8005e5a <quorem+0xf2>
 8005e10:	3601      	adds	r6, #1
 8005e12:	4628      	mov	r0, r5
 8005e14:	f04f 0c00 	mov.w	ip, #0
 8005e18:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e1c:	f8d0 e000 	ldr.w	lr, [r0]
 8005e20:	b293      	uxth	r3, r2
 8005e22:	ebac 0303 	sub.w	r3, ip, r3
 8005e26:	0c12      	lsrs	r2, r2, #16
 8005e28:	fa13 f38e 	uxtah	r3, r3, lr
 8005e2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e3a:	45c1      	cmp	r9, r8
 8005e3c:	f840 3b04 	str.w	r3, [r0], #4
 8005e40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e44:	d2e8      	bcs.n	8005e18 <quorem+0xb0>
 8005e46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e4e:	b922      	cbnz	r2, 8005e5a <quorem+0xf2>
 8005e50:	3b04      	subs	r3, #4
 8005e52:	429d      	cmp	r5, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	d30a      	bcc.n	8005e6e <quorem+0x106>
 8005e58:	613c      	str	r4, [r7, #16]
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	b003      	add	sp, #12
 8005e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e62:	6812      	ldr	r2, [r2, #0]
 8005e64:	3b04      	subs	r3, #4
 8005e66:	2a00      	cmp	r2, #0
 8005e68:	d1cc      	bne.n	8005e04 <quorem+0x9c>
 8005e6a:	3c01      	subs	r4, #1
 8005e6c:	e7c7      	b.n	8005dfe <quorem+0x96>
 8005e6e:	6812      	ldr	r2, [r2, #0]
 8005e70:	3b04      	subs	r3, #4
 8005e72:	2a00      	cmp	r2, #0
 8005e74:	d1f0      	bne.n	8005e58 <quorem+0xf0>
 8005e76:	3c01      	subs	r4, #1
 8005e78:	e7eb      	b.n	8005e52 <quorem+0xea>
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	e7ee      	b.n	8005e5c <quorem+0xf4>
	...

08005e80 <_dtoa_r>:
 8005e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e84:	ed2d 8b04 	vpush	{d8-d9}
 8005e88:	ec57 6b10 	vmov	r6, r7, d0
 8005e8c:	b093      	sub	sp, #76	; 0x4c
 8005e8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005e94:	9106      	str	r1, [sp, #24]
 8005e96:	ee10 aa10 	vmov	sl, s0
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e9e:	930c      	str	r3, [sp, #48]	; 0x30
 8005ea0:	46bb      	mov	fp, r7
 8005ea2:	b975      	cbnz	r5, 8005ec2 <_dtoa_r+0x42>
 8005ea4:	2010      	movs	r0, #16
 8005ea6:	f000 fed7 	bl	8006c58 <malloc>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	6260      	str	r0, [r4, #36]	; 0x24
 8005eae:	b920      	cbnz	r0, 8005eba <_dtoa_r+0x3a>
 8005eb0:	4ba7      	ldr	r3, [pc, #668]	; (8006150 <_dtoa_r+0x2d0>)
 8005eb2:	21ea      	movs	r1, #234	; 0xea
 8005eb4:	48a7      	ldr	r0, [pc, #668]	; (8006154 <_dtoa_r+0x2d4>)
 8005eb6:	f001 fddf 	bl	8007a78 <__assert_func>
 8005eba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ebe:	6005      	str	r5, [r0, #0]
 8005ec0:	60c5      	str	r5, [r0, #12]
 8005ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ec4:	6819      	ldr	r1, [r3, #0]
 8005ec6:	b151      	cbz	r1, 8005ede <_dtoa_r+0x5e>
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	604a      	str	r2, [r1, #4]
 8005ecc:	2301      	movs	r3, #1
 8005ece:	4093      	lsls	r3, r2
 8005ed0:	608b      	str	r3, [r1, #8]
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f000 ff16 	bl	8006d04 <_Bfree>
 8005ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	1e3b      	subs	r3, r7, #0
 8005ee0:	bfaa      	itet	ge
 8005ee2:	2300      	movge	r3, #0
 8005ee4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005ee8:	f8c8 3000 	strge.w	r3, [r8]
 8005eec:	4b9a      	ldr	r3, [pc, #616]	; (8006158 <_dtoa_r+0x2d8>)
 8005eee:	bfbc      	itt	lt
 8005ef0:	2201      	movlt	r2, #1
 8005ef2:	f8c8 2000 	strlt.w	r2, [r8]
 8005ef6:	ea33 030b 	bics.w	r3, r3, fp
 8005efa:	d11b      	bne.n	8005f34 <_dtoa_r+0xb4>
 8005efc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005efe:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f08:	4333      	orrs	r3, r6
 8005f0a:	f000 8592 	beq.w	8006a32 <_dtoa_r+0xbb2>
 8005f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f10:	b963      	cbnz	r3, 8005f2c <_dtoa_r+0xac>
 8005f12:	4b92      	ldr	r3, [pc, #584]	; (800615c <_dtoa_r+0x2dc>)
 8005f14:	e022      	b.n	8005f5c <_dtoa_r+0xdc>
 8005f16:	4b92      	ldr	r3, [pc, #584]	; (8006160 <_dtoa_r+0x2e0>)
 8005f18:	9301      	str	r3, [sp, #4]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	9801      	ldr	r0, [sp, #4]
 8005f22:	b013      	add	sp, #76	; 0x4c
 8005f24:	ecbd 8b04 	vpop	{d8-d9}
 8005f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f2c:	4b8b      	ldr	r3, [pc, #556]	; (800615c <_dtoa_r+0x2dc>)
 8005f2e:	9301      	str	r3, [sp, #4]
 8005f30:	3303      	adds	r3, #3
 8005f32:	e7f3      	b.n	8005f1c <_dtoa_r+0x9c>
 8005f34:	2200      	movs	r2, #0
 8005f36:	2300      	movs	r3, #0
 8005f38:	4650      	mov	r0, sl
 8005f3a:	4659      	mov	r1, fp
 8005f3c:	f7fa fdc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f40:	ec4b ab19 	vmov	d9, sl, fp
 8005f44:	4680      	mov	r8, r0
 8005f46:	b158      	cbz	r0, 8005f60 <_dtoa_r+0xe0>
 8005f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 856b 	beq.w	8006a2c <_dtoa_r+0xbac>
 8005f56:	4883      	ldr	r0, [pc, #524]	; (8006164 <_dtoa_r+0x2e4>)
 8005f58:	6018      	str	r0, [r3, #0]
 8005f5a:	1e43      	subs	r3, r0, #1
 8005f5c:	9301      	str	r3, [sp, #4]
 8005f5e:	e7df      	b.n	8005f20 <_dtoa_r+0xa0>
 8005f60:	ec4b ab10 	vmov	d0, sl, fp
 8005f64:	aa10      	add	r2, sp, #64	; 0x40
 8005f66:	a911      	add	r1, sp, #68	; 0x44
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f001 f9b3 	bl	80072d4 <__d2b>
 8005f6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005f72:	ee08 0a10 	vmov	s16, r0
 8005f76:	2d00      	cmp	r5, #0
 8005f78:	f000 8084 	beq.w	8006084 <_dtoa_r+0x204>
 8005f7c:	ee19 3a90 	vmov	r3, s19
 8005f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005f88:	4656      	mov	r6, sl
 8005f8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005f8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005f96:	4b74      	ldr	r3, [pc, #464]	; (8006168 <_dtoa_r+0x2e8>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	4639      	mov	r1, r7
 8005f9e:	f7fa f973 	bl	8000288 <__aeabi_dsub>
 8005fa2:	a365      	add	r3, pc, #404	; (adr r3, 8006138 <_dtoa_r+0x2b8>)
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	f7fa fb26 	bl	80005f8 <__aeabi_dmul>
 8005fac:	a364      	add	r3, pc, #400	; (adr r3, 8006140 <_dtoa_r+0x2c0>)
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	f7fa f96b 	bl	800028c <__adddf3>
 8005fb6:	4606      	mov	r6, r0
 8005fb8:	4628      	mov	r0, r5
 8005fba:	460f      	mov	r7, r1
 8005fbc:	f7fa fab2 	bl	8000524 <__aeabi_i2d>
 8005fc0:	a361      	add	r3, pc, #388	; (adr r3, 8006148 <_dtoa_r+0x2c8>)
 8005fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc6:	f7fa fb17 	bl	80005f8 <__aeabi_dmul>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4630      	mov	r0, r6
 8005fd0:	4639      	mov	r1, r7
 8005fd2:	f7fa f95b 	bl	800028c <__adddf3>
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	460f      	mov	r7, r1
 8005fda:	f7fa fdbd 	bl	8000b58 <__aeabi_d2iz>
 8005fde:	2200      	movs	r2, #0
 8005fe0:	9000      	str	r0, [sp, #0]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	4639      	mov	r1, r7
 8005fe8:	f7fa fd78 	bl	8000adc <__aeabi_dcmplt>
 8005fec:	b150      	cbz	r0, 8006004 <_dtoa_r+0x184>
 8005fee:	9800      	ldr	r0, [sp, #0]
 8005ff0:	f7fa fa98 	bl	8000524 <__aeabi_i2d>
 8005ff4:	4632      	mov	r2, r6
 8005ff6:	463b      	mov	r3, r7
 8005ff8:	f7fa fd66 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ffc:	b910      	cbnz	r0, 8006004 <_dtoa_r+0x184>
 8005ffe:	9b00      	ldr	r3, [sp, #0]
 8006000:	3b01      	subs	r3, #1
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	9b00      	ldr	r3, [sp, #0]
 8006006:	2b16      	cmp	r3, #22
 8006008:	d85a      	bhi.n	80060c0 <_dtoa_r+0x240>
 800600a:	9a00      	ldr	r2, [sp, #0]
 800600c:	4b57      	ldr	r3, [pc, #348]	; (800616c <_dtoa_r+0x2ec>)
 800600e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	ec51 0b19 	vmov	r0, r1, d9
 800601a:	f7fa fd5f 	bl	8000adc <__aeabi_dcmplt>
 800601e:	2800      	cmp	r0, #0
 8006020:	d050      	beq.n	80060c4 <_dtoa_r+0x244>
 8006022:	9b00      	ldr	r3, [sp, #0]
 8006024:	3b01      	subs	r3, #1
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	2300      	movs	r3, #0
 800602a:	930b      	str	r3, [sp, #44]	; 0x2c
 800602c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800602e:	1b5d      	subs	r5, r3, r5
 8006030:	1e6b      	subs	r3, r5, #1
 8006032:	9305      	str	r3, [sp, #20]
 8006034:	bf45      	ittet	mi
 8006036:	f1c5 0301 	rsbmi	r3, r5, #1
 800603a:	9304      	strmi	r3, [sp, #16]
 800603c:	2300      	movpl	r3, #0
 800603e:	2300      	movmi	r3, #0
 8006040:	bf4c      	ite	mi
 8006042:	9305      	strmi	r3, [sp, #20]
 8006044:	9304      	strpl	r3, [sp, #16]
 8006046:	9b00      	ldr	r3, [sp, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	db3d      	blt.n	80060c8 <_dtoa_r+0x248>
 800604c:	9b05      	ldr	r3, [sp, #20]
 800604e:	9a00      	ldr	r2, [sp, #0]
 8006050:	920a      	str	r2, [sp, #40]	; 0x28
 8006052:	4413      	add	r3, r2
 8006054:	9305      	str	r3, [sp, #20]
 8006056:	2300      	movs	r3, #0
 8006058:	9307      	str	r3, [sp, #28]
 800605a:	9b06      	ldr	r3, [sp, #24]
 800605c:	2b09      	cmp	r3, #9
 800605e:	f200 8089 	bhi.w	8006174 <_dtoa_r+0x2f4>
 8006062:	2b05      	cmp	r3, #5
 8006064:	bfc4      	itt	gt
 8006066:	3b04      	subgt	r3, #4
 8006068:	9306      	strgt	r3, [sp, #24]
 800606a:	9b06      	ldr	r3, [sp, #24]
 800606c:	f1a3 0302 	sub.w	r3, r3, #2
 8006070:	bfcc      	ite	gt
 8006072:	2500      	movgt	r5, #0
 8006074:	2501      	movle	r5, #1
 8006076:	2b03      	cmp	r3, #3
 8006078:	f200 8087 	bhi.w	800618a <_dtoa_r+0x30a>
 800607c:	e8df f003 	tbb	[pc, r3]
 8006080:	59383a2d 	.word	0x59383a2d
 8006084:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006088:	441d      	add	r5, r3
 800608a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800608e:	2b20      	cmp	r3, #32
 8006090:	bfc1      	itttt	gt
 8006092:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006096:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800609a:	fa0b f303 	lslgt.w	r3, fp, r3
 800609e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80060a2:	bfda      	itte	le
 80060a4:	f1c3 0320 	rsble	r3, r3, #32
 80060a8:	fa06 f003 	lslle.w	r0, r6, r3
 80060ac:	4318      	orrgt	r0, r3
 80060ae:	f7fa fa29 	bl	8000504 <__aeabi_ui2d>
 80060b2:	2301      	movs	r3, #1
 80060b4:	4606      	mov	r6, r0
 80060b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80060ba:	3d01      	subs	r5, #1
 80060bc:	930e      	str	r3, [sp, #56]	; 0x38
 80060be:	e76a      	b.n	8005f96 <_dtoa_r+0x116>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e7b2      	b.n	800602a <_dtoa_r+0x1aa>
 80060c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80060c6:	e7b1      	b.n	800602c <_dtoa_r+0x1ac>
 80060c8:	9b04      	ldr	r3, [sp, #16]
 80060ca:	9a00      	ldr	r2, [sp, #0]
 80060cc:	1a9b      	subs	r3, r3, r2
 80060ce:	9304      	str	r3, [sp, #16]
 80060d0:	4253      	negs	r3, r2
 80060d2:	9307      	str	r3, [sp, #28]
 80060d4:	2300      	movs	r3, #0
 80060d6:	930a      	str	r3, [sp, #40]	; 0x28
 80060d8:	e7bf      	b.n	800605a <_dtoa_r+0x1da>
 80060da:	2300      	movs	r3, #0
 80060dc:	9308      	str	r3, [sp, #32]
 80060de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	dc55      	bgt.n	8006190 <_dtoa_r+0x310>
 80060e4:	2301      	movs	r3, #1
 80060e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060ea:	461a      	mov	r2, r3
 80060ec:	9209      	str	r2, [sp, #36]	; 0x24
 80060ee:	e00c      	b.n	800610a <_dtoa_r+0x28a>
 80060f0:	2301      	movs	r3, #1
 80060f2:	e7f3      	b.n	80060dc <_dtoa_r+0x25c>
 80060f4:	2300      	movs	r3, #0
 80060f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f8:	9308      	str	r3, [sp, #32]
 80060fa:	9b00      	ldr	r3, [sp, #0]
 80060fc:	4413      	add	r3, r2
 80060fe:	9302      	str	r3, [sp, #8]
 8006100:	3301      	adds	r3, #1
 8006102:	2b01      	cmp	r3, #1
 8006104:	9303      	str	r3, [sp, #12]
 8006106:	bfb8      	it	lt
 8006108:	2301      	movlt	r3, #1
 800610a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800610c:	2200      	movs	r2, #0
 800610e:	6042      	str	r2, [r0, #4]
 8006110:	2204      	movs	r2, #4
 8006112:	f102 0614 	add.w	r6, r2, #20
 8006116:	429e      	cmp	r6, r3
 8006118:	6841      	ldr	r1, [r0, #4]
 800611a:	d93d      	bls.n	8006198 <_dtoa_r+0x318>
 800611c:	4620      	mov	r0, r4
 800611e:	f000 fdb1 	bl	8006c84 <_Balloc>
 8006122:	9001      	str	r0, [sp, #4]
 8006124:	2800      	cmp	r0, #0
 8006126:	d13b      	bne.n	80061a0 <_dtoa_r+0x320>
 8006128:	4b11      	ldr	r3, [pc, #68]	; (8006170 <_dtoa_r+0x2f0>)
 800612a:	4602      	mov	r2, r0
 800612c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006130:	e6c0      	b.n	8005eb4 <_dtoa_r+0x34>
 8006132:	2301      	movs	r3, #1
 8006134:	e7df      	b.n	80060f6 <_dtoa_r+0x276>
 8006136:	bf00      	nop
 8006138:	636f4361 	.word	0x636f4361
 800613c:	3fd287a7 	.word	0x3fd287a7
 8006140:	8b60c8b3 	.word	0x8b60c8b3
 8006144:	3fc68a28 	.word	0x3fc68a28
 8006148:	509f79fb 	.word	0x509f79fb
 800614c:	3fd34413 	.word	0x3fd34413
 8006150:	08007f79 	.word	0x08007f79
 8006154:	08007f90 	.word	0x08007f90
 8006158:	7ff00000 	.word	0x7ff00000
 800615c:	08007f75 	.word	0x08007f75
 8006160:	08007f6c 	.word	0x08007f6c
 8006164:	08007f49 	.word	0x08007f49
 8006168:	3ff80000 	.word	0x3ff80000
 800616c:	080080e0 	.word	0x080080e0
 8006170:	08007feb 	.word	0x08007feb
 8006174:	2501      	movs	r5, #1
 8006176:	2300      	movs	r3, #0
 8006178:	9306      	str	r3, [sp, #24]
 800617a:	9508      	str	r5, [sp, #32]
 800617c:	f04f 33ff 	mov.w	r3, #4294967295
 8006180:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006184:	2200      	movs	r2, #0
 8006186:	2312      	movs	r3, #18
 8006188:	e7b0      	b.n	80060ec <_dtoa_r+0x26c>
 800618a:	2301      	movs	r3, #1
 800618c:	9308      	str	r3, [sp, #32]
 800618e:	e7f5      	b.n	800617c <_dtoa_r+0x2fc>
 8006190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006192:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006196:	e7b8      	b.n	800610a <_dtoa_r+0x28a>
 8006198:	3101      	adds	r1, #1
 800619a:	6041      	str	r1, [r0, #4]
 800619c:	0052      	lsls	r2, r2, #1
 800619e:	e7b8      	b.n	8006112 <_dtoa_r+0x292>
 80061a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061a2:	9a01      	ldr	r2, [sp, #4]
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	9b03      	ldr	r3, [sp, #12]
 80061a8:	2b0e      	cmp	r3, #14
 80061aa:	f200 809d 	bhi.w	80062e8 <_dtoa_r+0x468>
 80061ae:	2d00      	cmp	r5, #0
 80061b0:	f000 809a 	beq.w	80062e8 <_dtoa_r+0x468>
 80061b4:	9b00      	ldr	r3, [sp, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	dd32      	ble.n	8006220 <_dtoa_r+0x3a0>
 80061ba:	4ab7      	ldr	r2, [pc, #732]	; (8006498 <_dtoa_r+0x618>)
 80061bc:	f003 030f 	and.w	r3, r3, #15
 80061c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061c8:	9b00      	ldr	r3, [sp, #0]
 80061ca:	05d8      	lsls	r0, r3, #23
 80061cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80061d0:	d516      	bpl.n	8006200 <_dtoa_r+0x380>
 80061d2:	4bb2      	ldr	r3, [pc, #712]	; (800649c <_dtoa_r+0x61c>)
 80061d4:	ec51 0b19 	vmov	r0, r1, d9
 80061d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061dc:	f7fa fb36 	bl	800084c <__aeabi_ddiv>
 80061e0:	f007 070f 	and.w	r7, r7, #15
 80061e4:	4682      	mov	sl, r0
 80061e6:	468b      	mov	fp, r1
 80061e8:	2503      	movs	r5, #3
 80061ea:	4eac      	ldr	r6, [pc, #688]	; (800649c <_dtoa_r+0x61c>)
 80061ec:	b957      	cbnz	r7, 8006204 <_dtoa_r+0x384>
 80061ee:	4642      	mov	r2, r8
 80061f0:	464b      	mov	r3, r9
 80061f2:	4650      	mov	r0, sl
 80061f4:	4659      	mov	r1, fp
 80061f6:	f7fa fb29 	bl	800084c <__aeabi_ddiv>
 80061fa:	4682      	mov	sl, r0
 80061fc:	468b      	mov	fp, r1
 80061fe:	e028      	b.n	8006252 <_dtoa_r+0x3d2>
 8006200:	2502      	movs	r5, #2
 8006202:	e7f2      	b.n	80061ea <_dtoa_r+0x36a>
 8006204:	07f9      	lsls	r1, r7, #31
 8006206:	d508      	bpl.n	800621a <_dtoa_r+0x39a>
 8006208:	4640      	mov	r0, r8
 800620a:	4649      	mov	r1, r9
 800620c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006210:	f7fa f9f2 	bl	80005f8 <__aeabi_dmul>
 8006214:	3501      	adds	r5, #1
 8006216:	4680      	mov	r8, r0
 8006218:	4689      	mov	r9, r1
 800621a:	107f      	asrs	r7, r7, #1
 800621c:	3608      	adds	r6, #8
 800621e:	e7e5      	b.n	80061ec <_dtoa_r+0x36c>
 8006220:	f000 809b 	beq.w	800635a <_dtoa_r+0x4da>
 8006224:	9b00      	ldr	r3, [sp, #0]
 8006226:	4f9d      	ldr	r7, [pc, #628]	; (800649c <_dtoa_r+0x61c>)
 8006228:	425e      	negs	r6, r3
 800622a:	4b9b      	ldr	r3, [pc, #620]	; (8006498 <_dtoa_r+0x618>)
 800622c:	f006 020f 	and.w	r2, r6, #15
 8006230:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	ec51 0b19 	vmov	r0, r1, d9
 800623c:	f7fa f9dc 	bl	80005f8 <__aeabi_dmul>
 8006240:	1136      	asrs	r6, r6, #4
 8006242:	4682      	mov	sl, r0
 8006244:	468b      	mov	fp, r1
 8006246:	2300      	movs	r3, #0
 8006248:	2502      	movs	r5, #2
 800624a:	2e00      	cmp	r6, #0
 800624c:	d17a      	bne.n	8006344 <_dtoa_r+0x4c4>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1d3      	bne.n	80061fa <_dtoa_r+0x37a>
 8006252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 8082 	beq.w	800635e <_dtoa_r+0x4de>
 800625a:	4b91      	ldr	r3, [pc, #580]	; (80064a0 <_dtoa_r+0x620>)
 800625c:	2200      	movs	r2, #0
 800625e:	4650      	mov	r0, sl
 8006260:	4659      	mov	r1, fp
 8006262:	f7fa fc3b 	bl	8000adc <__aeabi_dcmplt>
 8006266:	2800      	cmp	r0, #0
 8006268:	d079      	beq.n	800635e <_dtoa_r+0x4de>
 800626a:	9b03      	ldr	r3, [sp, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d076      	beq.n	800635e <_dtoa_r+0x4de>
 8006270:	9b02      	ldr	r3, [sp, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	dd36      	ble.n	80062e4 <_dtoa_r+0x464>
 8006276:	9b00      	ldr	r3, [sp, #0]
 8006278:	4650      	mov	r0, sl
 800627a:	4659      	mov	r1, fp
 800627c:	1e5f      	subs	r7, r3, #1
 800627e:	2200      	movs	r2, #0
 8006280:	4b88      	ldr	r3, [pc, #544]	; (80064a4 <_dtoa_r+0x624>)
 8006282:	f7fa f9b9 	bl	80005f8 <__aeabi_dmul>
 8006286:	9e02      	ldr	r6, [sp, #8]
 8006288:	4682      	mov	sl, r0
 800628a:	468b      	mov	fp, r1
 800628c:	3501      	adds	r5, #1
 800628e:	4628      	mov	r0, r5
 8006290:	f7fa f948 	bl	8000524 <__aeabi_i2d>
 8006294:	4652      	mov	r2, sl
 8006296:	465b      	mov	r3, fp
 8006298:	f7fa f9ae 	bl	80005f8 <__aeabi_dmul>
 800629c:	4b82      	ldr	r3, [pc, #520]	; (80064a8 <_dtoa_r+0x628>)
 800629e:	2200      	movs	r2, #0
 80062a0:	f7f9 fff4 	bl	800028c <__adddf3>
 80062a4:	46d0      	mov	r8, sl
 80062a6:	46d9      	mov	r9, fp
 80062a8:	4682      	mov	sl, r0
 80062aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80062ae:	2e00      	cmp	r6, #0
 80062b0:	d158      	bne.n	8006364 <_dtoa_r+0x4e4>
 80062b2:	4b7e      	ldr	r3, [pc, #504]	; (80064ac <_dtoa_r+0x62c>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	4640      	mov	r0, r8
 80062b8:	4649      	mov	r1, r9
 80062ba:	f7f9 ffe5 	bl	8000288 <__aeabi_dsub>
 80062be:	4652      	mov	r2, sl
 80062c0:	465b      	mov	r3, fp
 80062c2:	4680      	mov	r8, r0
 80062c4:	4689      	mov	r9, r1
 80062c6:	f7fa fc27 	bl	8000b18 <__aeabi_dcmpgt>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	f040 8295 	bne.w	80067fa <_dtoa_r+0x97a>
 80062d0:	4652      	mov	r2, sl
 80062d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80062d6:	4640      	mov	r0, r8
 80062d8:	4649      	mov	r1, r9
 80062da:	f7fa fbff 	bl	8000adc <__aeabi_dcmplt>
 80062de:	2800      	cmp	r0, #0
 80062e0:	f040 8289 	bne.w	80067f6 <_dtoa_r+0x976>
 80062e4:	ec5b ab19 	vmov	sl, fp, d9
 80062e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f2c0 8148 	blt.w	8006580 <_dtoa_r+0x700>
 80062f0:	9a00      	ldr	r2, [sp, #0]
 80062f2:	2a0e      	cmp	r2, #14
 80062f4:	f300 8144 	bgt.w	8006580 <_dtoa_r+0x700>
 80062f8:	4b67      	ldr	r3, [pc, #412]	; (8006498 <_dtoa_r+0x618>)
 80062fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006304:	2b00      	cmp	r3, #0
 8006306:	f280 80d5 	bge.w	80064b4 <_dtoa_r+0x634>
 800630a:	9b03      	ldr	r3, [sp, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	f300 80d1 	bgt.w	80064b4 <_dtoa_r+0x634>
 8006312:	f040 826f 	bne.w	80067f4 <_dtoa_r+0x974>
 8006316:	4b65      	ldr	r3, [pc, #404]	; (80064ac <_dtoa_r+0x62c>)
 8006318:	2200      	movs	r2, #0
 800631a:	4640      	mov	r0, r8
 800631c:	4649      	mov	r1, r9
 800631e:	f7fa f96b 	bl	80005f8 <__aeabi_dmul>
 8006322:	4652      	mov	r2, sl
 8006324:	465b      	mov	r3, fp
 8006326:	f7fa fbed 	bl	8000b04 <__aeabi_dcmpge>
 800632a:	9e03      	ldr	r6, [sp, #12]
 800632c:	4637      	mov	r7, r6
 800632e:	2800      	cmp	r0, #0
 8006330:	f040 8245 	bne.w	80067be <_dtoa_r+0x93e>
 8006334:	9d01      	ldr	r5, [sp, #4]
 8006336:	2331      	movs	r3, #49	; 0x31
 8006338:	f805 3b01 	strb.w	r3, [r5], #1
 800633c:	9b00      	ldr	r3, [sp, #0]
 800633e:	3301      	adds	r3, #1
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	e240      	b.n	80067c6 <_dtoa_r+0x946>
 8006344:	07f2      	lsls	r2, r6, #31
 8006346:	d505      	bpl.n	8006354 <_dtoa_r+0x4d4>
 8006348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800634c:	f7fa f954 	bl	80005f8 <__aeabi_dmul>
 8006350:	3501      	adds	r5, #1
 8006352:	2301      	movs	r3, #1
 8006354:	1076      	asrs	r6, r6, #1
 8006356:	3708      	adds	r7, #8
 8006358:	e777      	b.n	800624a <_dtoa_r+0x3ca>
 800635a:	2502      	movs	r5, #2
 800635c:	e779      	b.n	8006252 <_dtoa_r+0x3d2>
 800635e:	9f00      	ldr	r7, [sp, #0]
 8006360:	9e03      	ldr	r6, [sp, #12]
 8006362:	e794      	b.n	800628e <_dtoa_r+0x40e>
 8006364:	9901      	ldr	r1, [sp, #4]
 8006366:	4b4c      	ldr	r3, [pc, #304]	; (8006498 <_dtoa_r+0x618>)
 8006368:	4431      	add	r1, r6
 800636a:	910d      	str	r1, [sp, #52]	; 0x34
 800636c:	9908      	ldr	r1, [sp, #32]
 800636e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006372:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006376:	2900      	cmp	r1, #0
 8006378:	d043      	beq.n	8006402 <_dtoa_r+0x582>
 800637a:	494d      	ldr	r1, [pc, #308]	; (80064b0 <_dtoa_r+0x630>)
 800637c:	2000      	movs	r0, #0
 800637e:	f7fa fa65 	bl	800084c <__aeabi_ddiv>
 8006382:	4652      	mov	r2, sl
 8006384:	465b      	mov	r3, fp
 8006386:	f7f9 ff7f 	bl	8000288 <__aeabi_dsub>
 800638a:	9d01      	ldr	r5, [sp, #4]
 800638c:	4682      	mov	sl, r0
 800638e:	468b      	mov	fp, r1
 8006390:	4649      	mov	r1, r9
 8006392:	4640      	mov	r0, r8
 8006394:	f7fa fbe0 	bl	8000b58 <__aeabi_d2iz>
 8006398:	4606      	mov	r6, r0
 800639a:	f7fa f8c3 	bl	8000524 <__aeabi_i2d>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	4640      	mov	r0, r8
 80063a4:	4649      	mov	r1, r9
 80063a6:	f7f9 ff6f 	bl	8000288 <__aeabi_dsub>
 80063aa:	3630      	adds	r6, #48	; 0x30
 80063ac:	f805 6b01 	strb.w	r6, [r5], #1
 80063b0:	4652      	mov	r2, sl
 80063b2:	465b      	mov	r3, fp
 80063b4:	4680      	mov	r8, r0
 80063b6:	4689      	mov	r9, r1
 80063b8:	f7fa fb90 	bl	8000adc <__aeabi_dcmplt>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d163      	bne.n	8006488 <_dtoa_r+0x608>
 80063c0:	4642      	mov	r2, r8
 80063c2:	464b      	mov	r3, r9
 80063c4:	4936      	ldr	r1, [pc, #216]	; (80064a0 <_dtoa_r+0x620>)
 80063c6:	2000      	movs	r0, #0
 80063c8:	f7f9 ff5e 	bl	8000288 <__aeabi_dsub>
 80063cc:	4652      	mov	r2, sl
 80063ce:	465b      	mov	r3, fp
 80063d0:	f7fa fb84 	bl	8000adc <__aeabi_dcmplt>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	f040 80b5 	bne.w	8006544 <_dtoa_r+0x6c4>
 80063da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063dc:	429d      	cmp	r5, r3
 80063de:	d081      	beq.n	80062e4 <_dtoa_r+0x464>
 80063e0:	4b30      	ldr	r3, [pc, #192]	; (80064a4 <_dtoa_r+0x624>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	4650      	mov	r0, sl
 80063e6:	4659      	mov	r1, fp
 80063e8:	f7fa f906 	bl	80005f8 <__aeabi_dmul>
 80063ec:	4b2d      	ldr	r3, [pc, #180]	; (80064a4 <_dtoa_r+0x624>)
 80063ee:	4682      	mov	sl, r0
 80063f0:	468b      	mov	fp, r1
 80063f2:	4640      	mov	r0, r8
 80063f4:	4649      	mov	r1, r9
 80063f6:	2200      	movs	r2, #0
 80063f8:	f7fa f8fe 	bl	80005f8 <__aeabi_dmul>
 80063fc:	4680      	mov	r8, r0
 80063fe:	4689      	mov	r9, r1
 8006400:	e7c6      	b.n	8006390 <_dtoa_r+0x510>
 8006402:	4650      	mov	r0, sl
 8006404:	4659      	mov	r1, fp
 8006406:	f7fa f8f7 	bl	80005f8 <__aeabi_dmul>
 800640a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800640c:	9d01      	ldr	r5, [sp, #4]
 800640e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006410:	4682      	mov	sl, r0
 8006412:	468b      	mov	fp, r1
 8006414:	4649      	mov	r1, r9
 8006416:	4640      	mov	r0, r8
 8006418:	f7fa fb9e 	bl	8000b58 <__aeabi_d2iz>
 800641c:	4606      	mov	r6, r0
 800641e:	f7fa f881 	bl	8000524 <__aeabi_i2d>
 8006422:	3630      	adds	r6, #48	; 0x30
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4640      	mov	r0, r8
 800642a:	4649      	mov	r1, r9
 800642c:	f7f9 ff2c 	bl	8000288 <__aeabi_dsub>
 8006430:	f805 6b01 	strb.w	r6, [r5], #1
 8006434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006436:	429d      	cmp	r5, r3
 8006438:	4680      	mov	r8, r0
 800643a:	4689      	mov	r9, r1
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	d124      	bne.n	800648c <_dtoa_r+0x60c>
 8006442:	4b1b      	ldr	r3, [pc, #108]	; (80064b0 <_dtoa_r+0x630>)
 8006444:	4650      	mov	r0, sl
 8006446:	4659      	mov	r1, fp
 8006448:	f7f9 ff20 	bl	800028c <__adddf3>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	4640      	mov	r0, r8
 8006452:	4649      	mov	r1, r9
 8006454:	f7fa fb60 	bl	8000b18 <__aeabi_dcmpgt>
 8006458:	2800      	cmp	r0, #0
 800645a:	d173      	bne.n	8006544 <_dtoa_r+0x6c4>
 800645c:	4652      	mov	r2, sl
 800645e:	465b      	mov	r3, fp
 8006460:	4913      	ldr	r1, [pc, #76]	; (80064b0 <_dtoa_r+0x630>)
 8006462:	2000      	movs	r0, #0
 8006464:	f7f9 ff10 	bl	8000288 <__aeabi_dsub>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	4640      	mov	r0, r8
 800646e:	4649      	mov	r1, r9
 8006470:	f7fa fb34 	bl	8000adc <__aeabi_dcmplt>
 8006474:	2800      	cmp	r0, #0
 8006476:	f43f af35 	beq.w	80062e4 <_dtoa_r+0x464>
 800647a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800647c:	1e6b      	subs	r3, r5, #1
 800647e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006480:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006484:	2b30      	cmp	r3, #48	; 0x30
 8006486:	d0f8      	beq.n	800647a <_dtoa_r+0x5fa>
 8006488:	9700      	str	r7, [sp, #0]
 800648a:	e049      	b.n	8006520 <_dtoa_r+0x6a0>
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <_dtoa_r+0x624>)
 800648e:	f7fa f8b3 	bl	80005f8 <__aeabi_dmul>
 8006492:	4680      	mov	r8, r0
 8006494:	4689      	mov	r9, r1
 8006496:	e7bd      	b.n	8006414 <_dtoa_r+0x594>
 8006498:	080080e0 	.word	0x080080e0
 800649c:	080080b8 	.word	0x080080b8
 80064a0:	3ff00000 	.word	0x3ff00000
 80064a4:	40240000 	.word	0x40240000
 80064a8:	401c0000 	.word	0x401c0000
 80064ac:	40140000 	.word	0x40140000
 80064b0:	3fe00000 	.word	0x3fe00000
 80064b4:	9d01      	ldr	r5, [sp, #4]
 80064b6:	4656      	mov	r6, sl
 80064b8:	465f      	mov	r7, fp
 80064ba:	4642      	mov	r2, r8
 80064bc:	464b      	mov	r3, r9
 80064be:	4630      	mov	r0, r6
 80064c0:	4639      	mov	r1, r7
 80064c2:	f7fa f9c3 	bl	800084c <__aeabi_ddiv>
 80064c6:	f7fa fb47 	bl	8000b58 <__aeabi_d2iz>
 80064ca:	4682      	mov	sl, r0
 80064cc:	f7fa f82a 	bl	8000524 <__aeabi_i2d>
 80064d0:	4642      	mov	r2, r8
 80064d2:	464b      	mov	r3, r9
 80064d4:	f7fa f890 	bl	80005f8 <__aeabi_dmul>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4630      	mov	r0, r6
 80064de:	4639      	mov	r1, r7
 80064e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80064e4:	f7f9 fed0 	bl	8000288 <__aeabi_dsub>
 80064e8:	f805 6b01 	strb.w	r6, [r5], #1
 80064ec:	9e01      	ldr	r6, [sp, #4]
 80064ee:	9f03      	ldr	r7, [sp, #12]
 80064f0:	1bae      	subs	r6, r5, r6
 80064f2:	42b7      	cmp	r7, r6
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	d135      	bne.n	8006566 <_dtoa_r+0x6e6>
 80064fa:	f7f9 fec7 	bl	800028c <__adddf3>
 80064fe:	4642      	mov	r2, r8
 8006500:	464b      	mov	r3, r9
 8006502:	4606      	mov	r6, r0
 8006504:	460f      	mov	r7, r1
 8006506:	f7fa fb07 	bl	8000b18 <__aeabi_dcmpgt>
 800650a:	b9d0      	cbnz	r0, 8006542 <_dtoa_r+0x6c2>
 800650c:	4642      	mov	r2, r8
 800650e:	464b      	mov	r3, r9
 8006510:	4630      	mov	r0, r6
 8006512:	4639      	mov	r1, r7
 8006514:	f7fa fad8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006518:	b110      	cbz	r0, 8006520 <_dtoa_r+0x6a0>
 800651a:	f01a 0f01 	tst.w	sl, #1
 800651e:	d110      	bne.n	8006542 <_dtoa_r+0x6c2>
 8006520:	4620      	mov	r0, r4
 8006522:	ee18 1a10 	vmov	r1, s16
 8006526:	f000 fbed 	bl	8006d04 <_Bfree>
 800652a:	2300      	movs	r3, #0
 800652c:	9800      	ldr	r0, [sp, #0]
 800652e:	702b      	strb	r3, [r5, #0]
 8006530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006532:	3001      	adds	r0, #1
 8006534:	6018      	str	r0, [r3, #0]
 8006536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006538:	2b00      	cmp	r3, #0
 800653a:	f43f acf1 	beq.w	8005f20 <_dtoa_r+0xa0>
 800653e:	601d      	str	r5, [r3, #0]
 8006540:	e4ee      	b.n	8005f20 <_dtoa_r+0xa0>
 8006542:	9f00      	ldr	r7, [sp, #0]
 8006544:	462b      	mov	r3, r5
 8006546:	461d      	mov	r5, r3
 8006548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800654c:	2a39      	cmp	r2, #57	; 0x39
 800654e:	d106      	bne.n	800655e <_dtoa_r+0x6de>
 8006550:	9a01      	ldr	r2, [sp, #4]
 8006552:	429a      	cmp	r2, r3
 8006554:	d1f7      	bne.n	8006546 <_dtoa_r+0x6c6>
 8006556:	9901      	ldr	r1, [sp, #4]
 8006558:	2230      	movs	r2, #48	; 0x30
 800655a:	3701      	adds	r7, #1
 800655c:	700a      	strb	r2, [r1, #0]
 800655e:	781a      	ldrb	r2, [r3, #0]
 8006560:	3201      	adds	r2, #1
 8006562:	701a      	strb	r2, [r3, #0]
 8006564:	e790      	b.n	8006488 <_dtoa_r+0x608>
 8006566:	4ba6      	ldr	r3, [pc, #664]	; (8006800 <_dtoa_r+0x980>)
 8006568:	2200      	movs	r2, #0
 800656a:	f7fa f845 	bl	80005f8 <__aeabi_dmul>
 800656e:	2200      	movs	r2, #0
 8006570:	2300      	movs	r3, #0
 8006572:	4606      	mov	r6, r0
 8006574:	460f      	mov	r7, r1
 8006576:	f7fa faa7 	bl	8000ac8 <__aeabi_dcmpeq>
 800657a:	2800      	cmp	r0, #0
 800657c:	d09d      	beq.n	80064ba <_dtoa_r+0x63a>
 800657e:	e7cf      	b.n	8006520 <_dtoa_r+0x6a0>
 8006580:	9a08      	ldr	r2, [sp, #32]
 8006582:	2a00      	cmp	r2, #0
 8006584:	f000 80d7 	beq.w	8006736 <_dtoa_r+0x8b6>
 8006588:	9a06      	ldr	r2, [sp, #24]
 800658a:	2a01      	cmp	r2, #1
 800658c:	f300 80ba 	bgt.w	8006704 <_dtoa_r+0x884>
 8006590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006592:	2a00      	cmp	r2, #0
 8006594:	f000 80b2 	beq.w	80066fc <_dtoa_r+0x87c>
 8006598:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800659c:	9e07      	ldr	r6, [sp, #28]
 800659e:	9d04      	ldr	r5, [sp, #16]
 80065a0:	9a04      	ldr	r2, [sp, #16]
 80065a2:	441a      	add	r2, r3
 80065a4:	9204      	str	r2, [sp, #16]
 80065a6:	9a05      	ldr	r2, [sp, #20]
 80065a8:	2101      	movs	r1, #1
 80065aa:	441a      	add	r2, r3
 80065ac:	4620      	mov	r0, r4
 80065ae:	9205      	str	r2, [sp, #20]
 80065b0:	f000 fc60 	bl	8006e74 <__i2b>
 80065b4:	4607      	mov	r7, r0
 80065b6:	2d00      	cmp	r5, #0
 80065b8:	dd0c      	ble.n	80065d4 <_dtoa_r+0x754>
 80065ba:	9b05      	ldr	r3, [sp, #20]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	dd09      	ble.n	80065d4 <_dtoa_r+0x754>
 80065c0:	42ab      	cmp	r3, r5
 80065c2:	9a04      	ldr	r2, [sp, #16]
 80065c4:	bfa8      	it	ge
 80065c6:	462b      	movge	r3, r5
 80065c8:	1ad2      	subs	r2, r2, r3
 80065ca:	9204      	str	r2, [sp, #16]
 80065cc:	9a05      	ldr	r2, [sp, #20]
 80065ce:	1aed      	subs	r5, r5, r3
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	9305      	str	r3, [sp, #20]
 80065d4:	9b07      	ldr	r3, [sp, #28]
 80065d6:	b31b      	cbz	r3, 8006620 <_dtoa_r+0x7a0>
 80065d8:	9b08      	ldr	r3, [sp, #32]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 80af 	beq.w	800673e <_dtoa_r+0x8be>
 80065e0:	2e00      	cmp	r6, #0
 80065e2:	dd13      	ble.n	800660c <_dtoa_r+0x78c>
 80065e4:	4639      	mov	r1, r7
 80065e6:	4632      	mov	r2, r6
 80065e8:	4620      	mov	r0, r4
 80065ea:	f000 fd03 	bl	8006ff4 <__pow5mult>
 80065ee:	ee18 2a10 	vmov	r2, s16
 80065f2:	4601      	mov	r1, r0
 80065f4:	4607      	mov	r7, r0
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 fc52 	bl	8006ea0 <__multiply>
 80065fc:	ee18 1a10 	vmov	r1, s16
 8006600:	4680      	mov	r8, r0
 8006602:	4620      	mov	r0, r4
 8006604:	f000 fb7e 	bl	8006d04 <_Bfree>
 8006608:	ee08 8a10 	vmov	s16, r8
 800660c:	9b07      	ldr	r3, [sp, #28]
 800660e:	1b9a      	subs	r2, r3, r6
 8006610:	d006      	beq.n	8006620 <_dtoa_r+0x7a0>
 8006612:	ee18 1a10 	vmov	r1, s16
 8006616:	4620      	mov	r0, r4
 8006618:	f000 fcec 	bl	8006ff4 <__pow5mult>
 800661c:	ee08 0a10 	vmov	s16, r0
 8006620:	2101      	movs	r1, #1
 8006622:	4620      	mov	r0, r4
 8006624:	f000 fc26 	bl	8006e74 <__i2b>
 8006628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800662a:	2b00      	cmp	r3, #0
 800662c:	4606      	mov	r6, r0
 800662e:	f340 8088 	ble.w	8006742 <_dtoa_r+0x8c2>
 8006632:	461a      	mov	r2, r3
 8006634:	4601      	mov	r1, r0
 8006636:	4620      	mov	r0, r4
 8006638:	f000 fcdc 	bl	8006ff4 <__pow5mult>
 800663c:	9b06      	ldr	r3, [sp, #24]
 800663e:	2b01      	cmp	r3, #1
 8006640:	4606      	mov	r6, r0
 8006642:	f340 8081 	ble.w	8006748 <_dtoa_r+0x8c8>
 8006646:	f04f 0800 	mov.w	r8, #0
 800664a:	6933      	ldr	r3, [r6, #16]
 800664c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006650:	6918      	ldr	r0, [r3, #16]
 8006652:	f000 fbbf 	bl	8006dd4 <__hi0bits>
 8006656:	f1c0 0020 	rsb	r0, r0, #32
 800665a:	9b05      	ldr	r3, [sp, #20]
 800665c:	4418      	add	r0, r3
 800665e:	f010 001f 	ands.w	r0, r0, #31
 8006662:	f000 8092 	beq.w	800678a <_dtoa_r+0x90a>
 8006666:	f1c0 0320 	rsb	r3, r0, #32
 800666a:	2b04      	cmp	r3, #4
 800666c:	f340 808a 	ble.w	8006784 <_dtoa_r+0x904>
 8006670:	f1c0 001c 	rsb	r0, r0, #28
 8006674:	9b04      	ldr	r3, [sp, #16]
 8006676:	4403      	add	r3, r0
 8006678:	9304      	str	r3, [sp, #16]
 800667a:	9b05      	ldr	r3, [sp, #20]
 800667c:	4403      	add	r3, r0
 800667e:	4405      	add	r5, r0
 8006680:	9305      	str	r3, [sp, #20]
 8006682:	9b04      	ldr	r3, [sp, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	dd07      	ble.n	8006698 <_dtoa_r+0x818>
 8006688:	ee18 1a10 	vmov	r1, s16
 800668c:	461a      	mov	r2, r3
 800668e:	4620      	mov	r0, r4
 8006690:	f000 fd0a 	bl	80070a8 <__lshift>
 8006694:	ee08 0a10 	vmov	s16, r0
 8006698:	9b05      	ldr	r3, [sp, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	dd05      	ble.n	80066aa <_dtoa_r+0x82a>
 800669e:	4631      	mov	r1, r6
 80066a0:	461a      	mov	r2, r3
 80066a2:	4620      	mov	r0, r4
 80066a4:	f000 fd00 	bl	80070a8 <__lshift>
 80066a8:	4606      	mov	r6, r0
 80066aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d06e      	beq.n	800678e <_dtoa_r+0x90e>
 80066b0:	ee18 0a10 	vmov	r0, s16
 80066b4:	4631      	mov	r1, r6
 80066b6:	f000 fd67 	bl	8007188 <__mcmp>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	da67      	bge.n	800678e <_dtoa_r+0x90e>
 80066be:	9b00      	ldr	r3, [sp, #0]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	ee18 1a10 	vmov	r1, s16
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	220a      	movs	r2, #10
 80066ca:	2300      	movs	r3, #0
 80066cc:	4620      	mov	r0, r4
 80066ce:	f000 fb3b 	bl	8006d48 <__multadd>
 80066d2:	9b08      	ldr	r3, [sp, #32]
 80066d4:	ee08 0a10 	vmov	s16, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 81b1 	beq.w	8006a40 <_dtoa_r+0xbc0>
 80066de:	2300      	movs	r3, #0
 80066e0:	4639      	mov	r1, r7
 80066e2:	220a      	movs	r2, #10
 80066e4:	4620      	mov	r0, r4
 80066e6:	f000 fb2f 	bl	8006d48 <__multadd>
 80066ea:	9b02      	ldr	r3, [sp, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	4607      	mov	r7, r0
 80066f0:	f300 808e 	bgt.w	8006810 <_dtoa_r+0x990>
 80066f4:	9b06      	ldr	r3, [sp, #24]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	dc51      	bgt.n	800679e <_dtoa_r+0x91e>
 80066fa:	e089      	b.n	8006810 <_dtoa_r+0x990>
 80066fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006702:	e74b      	b.n	800659c <_dtoa_r+0x71c>
 8006704:	9b03      	ldr	r3, [sp, #12]
 8006706:	1e5e      	subs	r6, r3, #1
 8006708:	9b07      	ldr	r3, [sp, #28]
 800670a:	42b3      	cmp	r3, r6
 800670c:	bfbf      	itttt	lt
 800670e:	9b07      	ldrlt	r3, [sp, #28]
 8006710:	9607      	strlt	r6, [sp, #28]
 8006712:	1af2      	sublt	r2, r6, r3
 8006714:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006716:	bfb6      	itet	lt
 8006718:	189b      	addlt	r3, r3, r2
 800671a:	1b9e      	subge	r6, r3, r6
 800671c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800671e:	9b03      	ldr	r3, [sp, #12]
 8006720:	bfb8      	it	lt
 8006722:	2600      	movlt	r6, #0
 8006724:	2b00      	cmp	r3, #0
 8006726:	bfb7      	itett	lt
 8006728:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800672c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006730:	1a9d      	sublt	r5, r3, r2
 8006732:	2300      	movlt	r3, #0
 8006734:	e734      	b.n	80065a0 <_dtoa_r+0x720>
 8006736:	9e07      	ldr	r6, [sp, #28]
 8006738:	9d04      	ldr	r5, [sp, #16]
 800673a:	9f08      	ldr	r7, [sp, #32]
 800673c:	e73b      	b.n	80065b6 <_dtoa_r+0x736>
 800673e:	9a07      	ldr	r2, [sp, #28]
 8006740:	e767      	b.n	8006612 <_dtoa_r+0x792>
 8006742:	9b06      	ldr	r3, [sp, #24]
 8006744:	2b01      	cmp	r3, #1
 8006746:	dc18      	bgt.n	800677a <_dtoa_r+0x8fa>
 8006748:	f1ba 0f00 	cmp.w	sl, #0
 800674c:	d115      	bne.n	800677a <_dtoa_r+0x8fa>
 800674e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006752:	b993      	cbnz	r3, 800677a <_dtoa_r+0x8fa>
 8006754:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006758:	0d1b      	lsrs	r3, r3, #20
 800675a:	051b      	lsls	r3, r3, #20
 800675c:	b183      	cbz	r3, 8006780 <_dtoa_r+0x900>
 800675e:	9b04      	ldr	r3, [sp, #16]
 8006760:	3301      	adds	r3, #1
 8006762:	9304      	str	r3, [sp, #16]
 8006764:	9b05      	ldr	r3, [sp, #20]
 8006766:	3301      	adds	r3, #1
 8006768:	9305      	str	r3, [sp, #20]
 800676a:	f04f 0801 	mov.w	r8, #1
 800676e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006770:	2b00      	cmp	r3, #0
 8006772:	f47f af6a 	bne.w	800664a <_dtoa_r+0x7ca>
 8006776:	2001      	movs	r0, #1
 8006778:	e76f      	b.n	800665a <_dtoa_r+0x7da>
 800677a:	f04f 0800 	mov.w	r8, #0
 800677e:	e7f6      	b.n	800676e <_dtoa_r+0x8ee>
 8006780:	4698      	mov	r8, r3
 8006782:	e7f4      	b.n	800676e <_dtoa_r+0x8ee>
 8006784:	f43f af7d 	beq.w	8006682 <_dtoa_r+0x802>
 8006788:	4618      	mov	r0, r3
 800678a:	301c      	adds	r0, #28
 800678c:	e772      	b.n	8006674 <_dtoa_r+0x7f4>
 800678e:	9b03      	ldr	r3, [sp, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	dc37      	bgt.n	8006804 <_dtoa_r+0x984>
 8006794:	9b06      	ldr	r3, [sp, #24]
 8006796:	2b02      	cmp	r3, #2
 8006798:	dd34      	ble.n	8006804 <_dtoa_r+0x984>
 800679a:	9b03      	ldr	r3, [sp, #12]
 800679c:	9302      	str	r3, [sp, #8]
 800679e:	9b02      	ldr	r3, [sp, #8]
 80067a0:	b96b      	cbnz	r3, 80067be <_dtoa_r+0x93e>
 80067a2:	4631      	mov	r1, r6
 80067a4:	2205      	movs	r2, #5
 80067a6:	4620      	mov	r0, r4
 80067a8:	f000 face 	bl	8006d48 <__multadd>
 80067ac:	4601      	mov	r1, r0
 80067ae:	4606      	mov	r6, r0
 80067b0:	ee18 0a10 	vmov	r0, s16
 80067b4:	f000 fce8 	bl	8007188 <__mcmp>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	f73f adbb 	bgt.w	8006334 <_dtoa_r+0x4b4>
 80067be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c0:	9d01      	ldr	r5, [sp, #4]
 80067c2:	43db      	mvns	r3, r3
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	f04f 0800 	mov.w	r8, #0
 80067ca:	4631      	mov	r1, r6
 80067cc:	4620      	mov	r0, r4
 80067ce:	f000 fa99 	bl	8006d04 <_Bfree>
 80067d2:	2f00      	cmp	r7, #0
 80067d4:	f43f aea4 	beq.w	8006520 <_dtoa_r+0x6a0>
 80067d8:	f1b8 0f00 	cmp.w	r8, #0
 80067dc:	d005      	beq.n	80067ea <_dtoa_r+0x96a>
 80067de:	45b8      	cmp	r8, r7
 80067e0:	d003      	beq.n	80067ea <_dtoa_r+0x96a>
 80067e2:	4641      	mov	r1, r8
 80067e4:	4620      	mov	r0, r4
 80067e6:	f000 fa8d 	bl	8006d04 <_Bfree>
 80067ea:	4639      	mov	r1, r7
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 fa89 	bl	8006d04 <_Bfree>
 80067f2:	e695      	b.n	8006520 <_dtoa_r+0x6a0>
 80067f4:	2600      	movs	r6, #0
 80067f6:	4637      	mov	r7, r6
 80067f8:	e7e1      	b.n	80067be <_dtoa_r+0x93e>
 80067fa:	9700      	str	r7, [sp, #0]
 80067fc:	4637      	mov	r7, r6
 80067fe:	e599      	b.n	8006334 <_dtoa_r+0x4b4>
 8006800:	40240000 	.word	0x40240000
 8006804:	9b08      	ldr	r3, [sp, #32]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 80ca 	beq.w	80069a0 <_dtoa_r+0xb20>
 800680c:	9b03      	ldr	r3, [sp, #12]
 800680e:	9302      	str	r3, [sp, #8]
 8006810:	2d00      	cmp	r5, #0
 8006812:	dd05      	ble.n	8006820 <_dtoa_r+0x9a0>
 8006814:	4639      	mov	r1, r7
 8006816:	462a      	mov	r2, r5
 8006818:	4620      	mov	r0, r4
 800681a:	f000 fc45 	bl	80070a8 <__lshift>
 800681e:	4607      	mov	r7, r0
 8006820:	f1b8 0f00 	cmp.w	r8, #0
 8006824:	d05b      	beq.n	80068de <_dtoa_r+0xa5e>
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	4620      	mov	r0, r4
 800682a:	f000 fa2b 	bl	8006c84 <_Balloc>
 800682e:	4605      	mov	r5, r0
 8006830:	b928      	cbnz	r0, 800683e <_dtoa_r+0x9be>
 8006832:	4b87      	ldr	r3, [pc, #540]	; (8006a50 <_dtoa_r+0xbd0>)
 8006834:	4602      	mov	r2, r0
 8006836:	f240 21ea 	movw	r1, #746	; 0x2ea
 800683a:	f7ff bb3b 	b.w	8005eb4 <_dtoa_r+0x34>
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	3202      	adds	r2, #2
 8006842:	0092      	lsls	r2, r2, #2
 8006844:	f107 010c 	add.w	r1, r7, #12
 8006848:	300c      	adds	r0, #12
 800684a:	f000 fa0d 	bl	8006c68 <memcpy>
 800684e:	2201      	movs	r2, #1
 8006850:	4629      	mov	r1, r5
 8006852:	4620      	mov	r0, r4
 8006854:	f000 fc28 	bl	80070a8 <__lshift>
 8006858:	9b01      	ldr	r3, [sp, #4]
 800685a:	f103 0901 	add.w	r9, r3, #1
 800685e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006862:	4413      	add	r3, r2
 8006864:	9305      	str	r3, [sp, #20]
 8006866:	f00a 0301 	and.w	r3, sl, #1
 800686a:	46b8      	mov	r8, r7
 800686c:	9304      	str	r3, [sp, #16]
 800686e:	4607      	mov	r7, r0
 8006870:	4631      	mov	r1, r6
 8006872:	ee18 0a10 	vmov	r0, s16
 8006876:	f7ff fa77 	bl	8005d68 <quorem>
 800687a:	4641      	mov	r1, r8
 800687c:	9002      	str	r0, [sp, #8]
 800687e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006882:	ee18 0a10 	vmov	r0, s16
 8006886:	f000 fc7f 	bl	8007188 <__mcmp>
 800688a:	463a      	mov	r2, r7
 800688c:	9003      	str	r0, [sp, #12]
 800688e:	4631      	mov	r1, r6
 8006890:	4620      	mov	r0, r4
 8006892:	f000 fc95 	bl	80071c0 <__mdiff>
 8006896:	68c2      	ldr	r2, [r0, #12]
 8006898:	f109 3bff 	add.w	fp, r9, #4294967295
 800689c:	4605      	mov	r5, r0
 800689e:	bb02      	cbnz	r2, 80068e2 <_dtoa_r+0xa62>
 80068a0:	4601      	mov	r1, r0
 80068a2:	ee18 0a10 	vmov	r0, s16
 80068a6:	f000 fc6f 	bl	8007188 <__mcmp>
 80068aa:	4602      	mov	r2, r0
 80068ac:	4629      	mov	r1, r5
 80068ae:	4620      	mov	r0, r4
 80068b0:	9207      	str	r2, [sp, #28]
 80068b2:	f000 fa27 	bl	8006d04 <_Bfree>
 80068b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80068ba:	ea43 0102 	orr.w	r1, r3, r2
 80068be:	9b04      	ldr	r3, [sp, #16]
 80068c0:	430b      	orrs	r3, r1
 80068c2:	464d      	mov	r5, r9
 80068c4:	d10f      	bne.n	80068e6 <_dtoa_r+0xa66>
 80068c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80068ca:	d02a      	beq.n	8006922 <_dtoa_r+0xaa2>
 80068cc:	9b03      	ldr	r3, [sp, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	dd02      	ble.n	80068d8 <_dtoa_r+0xa58>
 80068d2:	9b02      	ldr	r3, [sp, #8]
 80068d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80068d8:	f88b a000 	strb.w	sl, [fp]
 80068dc:	e775      	b.n	80067ca <_dtoa_r+0x94a>
 80068de:	4638      	mov	r0, r7
 80068e0:	e7ba      	b.n	8006858 <_dtoa_r+0x9d8>
 80068e2:	2201      	movs	r2, #1
 80068e4:	e7e2      	b.n	80068ac <_dtoa_r+0xa2c>
 80068e6:	9b03      	ldr	r3, [sp, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	db04      	blt.n	80068f6 <_dtoa_r+0xa76>
 80068ec:	9906      	ldr	r1, [sp, #24]
 80068ee:	430b      	orrs	r3, r1
 80068f0:	9904      	ldr	r1, [sp, #16]
 80068f2:	430b      	orrs	r3, r1
 80068f4:	d122      	bne.n	800693c <_dtoa_r+0xabc>
 80068f6:	2a00      	cmp	r2, #0
 80068f8:	ddee      	ble.n	80068d8 <_dtoa_r+0xa58>
 80068fa:	ee18 1a10 	vmov	r1, s16
 80068fe:	2201      	movs	r2, #1
 8006900:	4620      	mov	r0, r4
 8006902:	f000 fbd1 	bl	80070a8 <__lshift>
 8006906:	4631      	mov	r1, r6
 8006908:	ee08 0a10 	vmov	s16, r0
 800690c:	f000 fc3c 	bl	8007188 <__mcmp>
 8006910:	2800      	cmp	r0, #0
 8006912:	dc03      	bgt.n	800691c <_dtoa_r+0xa9c>
 8006914:	d1e0      	bne.n	80068d8 <_dtoa_r+0xa58>
 8006916:	f01a 0f01 	tst.w	sl, #1
 800691a:	d0dd      	beq.n	80068d8 <_dtoa_r+0xa58>
 800691c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006920:	d1d7      	bne.n	80068d2 <_dtoa_r+0xa52>
 8006922:	2339      	movs	r3, #57	; 0x39
 8006924:	f88b 3000 	strb.w	r3, [fp]
 8006928:	462b      	mov	r3, r5
 800692a:	461d      	mov	r5, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006932:	2a39      	cmp	r2, #57	; 0x39
 8006934:	d071      	beq.n	8006a1a <_dtoa_r+0xb9a>
 8006936:	3201      	adds	r2, #1
 8006938:	701a      	strb	r2, [r3, #0]
 800693a:	e746      	b.n	80067ca <_dtoa_r+0x94a>
 800693c:	2a00      	cmp	r2, #0
 800693e:	dd07      	ble.n	8006950 <_dtoa_r+0xad0>
 8006940:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006944:	d0ed      	beq.n	8006922 <_dtoa_r+0xaa2>
 8006946:	f10a 0301 	add.w	r3, sl, #1
 800694a:	f88b 3000 	strb.w	r3, [fp]
 800694e:	e73c      	b.n	80067ca <_dtoa_r+0x94a>
 8006950:	9b05      	ldr	r3, [sp, #20]
 8006952:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006956:	4599      	cmp	r9, r3
 8006958:	d047      	beq.n	80069ea <_dtoa_r+0xb6a>
 800695a:	ee18 1a10 	vmov	r1, s16
 800695e:	2300      	movs	r3, #0
 8006960:	220a      	movs	r2, #10
 8006962:	4620      	mov	r0, r4
 8006964:	f000 f9f0 	bl	8006d48 <__multadd>
 8006968:	45b8      	cmp	r8, r7
 800696a:	ee08 0a10 	vmov	s16, r0
 800696e:	f04f 0300 	mov.w	r3, #0
 8006972:	f04f 020a 	mov.w	r2, #10
 8006976:	4641      	mov	r1, r8
 8006978:	4620      	mov	r0, r4
 800697a:	d106      	bne.n	800698a <_dtoa_r+0xb0a>
 800697c:	f000 f9e4 	bl	8006d48 <__multadd>
 8006980:	4680      	mov	r8, r0
 8006982:	4607      	mov	r7, r0
 8006984:	f109 0901 	add.w	r9, r9, #1
 8006988:	e772      	b.n	8006870 <_dtoa_r+0x9f0>
 800698a:	f000 f9dd 	bl	8006d48 <__multadd>
 800698e:	4639      	mov	r1, r7
 8006990:	4680      	mov	r8, r0
 8006992:	2300      	movs	r3, #0
 8006994:	220a      	movs	r2, #10
 8006996:	4620      	mov	r0, r4
 8006998:	f000 f9d6 	bl	8006d48 <__multadd>
 800699c:	4607      	mov	r7, r0
 800699e:	e7f1      	b.n	8006984 <_dtoa_r+0xb04>
 80069a0:	9b03      	ldr	r3, [sp, #12]
 80069a2:	9302      	str	r3, [sp, #8]
 80069a4:	9d01      	ldr	r5, [sp, #4]
 80069a6:	ee18 0a10 	vmov	r0, s16
 80069aa:	4631      	mov	r1, r6
 80069ac:	f7ff f9dc 	bl	8005d68 <quorem>
 80069b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80069b4:	9b01      	ldr	r3, [sp, #4]
 80069b6:	f805 ab01 	strb.w	sl, [r5], #1
 80069ba:	1aea      	subs	r2, r5, r3
 80069bc:	9b02      	ldr	r3, [sp, #8]
 80069be:	4293      	cmp	r3, r2
 80069c0:	dd09      	ble.n	80069d6 <_dtoa_r+0xb56>
 80069c2:	ee18 1a10 	vmov	r1, s16
 80069c6:	2300      	movs	r3, #0
 80069c8:	220a      	movs	r2, #10
 80069ca:	4620      	mov	r0, r4
 80069cc:	f000 f9bc 	bl	8006d48 <__multadd>
 80069d0:	ee08 0a10 	vmov	s16, r0
 80069d4:	e7e7      	b.n	80069a6 <_dtoa_r+0xb26>
 80069d6:	9b02      	ldr	r3, [sp, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	bfc8      	it	gt
 80069dc:	461d      	movgt	r5, r3
 80069de:	9b01      	ldr	r3, [sp, #4]
 80069e0:	bfd8      	it	le
 80069e2:	2501      	movle	r5, #1
 80069e4:	441d      	add	r5, r3
 80069e6:	f04f 0800 	mov.w	r8, #0
 80069ea:	ee18 1a10 	vmov	r1, s16
 80069ee:	2201      	movs	r2, #1
 80069f0:	4620      	mov	r0, r4
 80069f2:	f000 fb59 	bl	80070a8 <__lshift>
 80069f6:	4631      	mov	r1, r6
 80069f8:	ee08 0a10 	vmov	s16, r0
 80069fc:	f000 fbc4 	bl	8007188 <__mcmp>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	dc91      	bgt.n	8006928 <_dtoa_r+0xaa8>
 8006a04:	d102      	bne.n	8006a0c <_dtoa_r+0xb8c>
 8006a06:	f01a 0f01 	tst.w	sl, #1
 8006a0a:	d18d      	bne.n	8006928 <_dtoa_r+0xaa8>
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	461d      	mov	r5, r3
 8006a10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a14:	2a30      	cmp	r2, #48	; 0x30
 8006a16:	d0fa      	beq.n	8006a0e <_dtoa_r+0xb8e>
 8006a18:	e6d7      	b.n	80067ca <_dtoa_r+0x94a>
 8006a1a:	9a01      	ldr	r2, [sp, #4]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d184      	bne.n	800692a <_dtoa_r+0xaaa>
 8006a20:	9b00      	ldr	r3, [sp, #0]
 8006a22:	3301      	adds	r3, #1
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	2331      	movs	r3, #49	; 0x31
 8006a28:	7013      	strb	r3, [r2, #0]
 8006a2a:	e6ce      	b.n	80067ca <_dtoa_r+0x94a>
 8006a2c:	4b09      	ldr	r3, [pc, #36]	; (8006a54 <_dtoa_r+0xbd4>)
 8006a2e:	f7ff ba95 	b.w	8005f5c <_dtoa_r+0xdc>
 8006a32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f47f aa6e 	bne.w	8005f16 <_dtoa_r+0x96>
 8006a3a:	4b07      	ldr	r3, [pc, #28]	; (8006a58 <_dtoa_r+0xbd8>)
 8006a3c:	f7ff ba8e 	b.w	8005f5c <_dtoa_r+0xdc>
 8006a40:	9b02      	ldr	r3, [sp, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	dcae      	bgt.n	80069a4 <_dtoa_r+0xb24>
 8006a46:	9b06      	ldr	r3, [sp, #24]
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	f73f aea8 	bgt.w	800679e <_dtoa_r+0x91e>
 8006a4e:	e7a9      	b.n	80069a4 <_dtoa_r+0xb24>
 8006a50:	08007feb 	.word	0x08007feb
 8006a54:	08007f48 	.word	0x08007f48
 8006a58:	08007f6c 	.word	0x08007f6c

08006a5c <std>:
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	b510      	push	{r4, lr}
 8006a60:	4604      	mov	r4, r0
 8006a62:	e9c0 3300 	strd	r3, r3, [r0]
 8006a66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a6a:	6083      	str	r3, [r0, #8]
 8006a6c:	8181      	strh	r1, [r0, #12]
 8006a6e:	6643      	str	r3, [r0, #100]	; 0x64
 8006a70:	81c2      	strh	r2, [r0, #14]
 8006a72:	6183      	str	r3, [r0, #24]
 8006a74:	4619      	mov	r1, r3
 8006a76:	2208      	movs	r2, #8
 8006a78:	305c      	adds	r0, #92	; 0x5c
 8006a7a:	f7fe fceb 	bl	8005454 <memset>
 8006a7e:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <std+0x38>)
 8006a80:	6263      	str	r3, [r4, #36]	; 0x24
 8006a82:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <std+0x3c>)
 8006a84:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a86:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <std+0x40>)
 8006a88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a8a:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <std+0x44>)
 8006a8c:	6224      	str	r4, [r4, #32]
 8006a8e:	6323      	str	r3, [r4, #48]	; 0x30
 8006a90:	bd10      	pop	{r4, pc}
 8006a92:	bf00      	nop
 8006a94:	0800784d 	.word	0x0800784d
 8006a98:	0800786f 	.word	0x0800786f
 8006a9c:	080078a7 	.word	0x080078a7
 8006aa0:	080078cb 	.word	0x080078cb

08006aa4 <_cleanup_r>:
 8006aa4:	4901      	ldr	r1, [pc, #4]	; (8006aac <_cleanup_r+0x8>)
 8006aa6:	f000 b8af 	b.w	8006c08 <_fwalk_reent>
 8006aaa:	bf00      	nop
 8006aac:	08007be1 	.word	0x08007be1

08006ab0 <__sfmoreglue>:
 8006ab0:	b570      	push	{r4, r5, r6, lr}
 8006ab2:	2268      	movs	r2, #104	; 0x68
 8006ab4:	1e4d      	subs	r5, r1, #1
 8006ab6:	4355      	muls	r5, r2
 8006ab8:	460e      	mov	r6, r1
 8006aba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006abe:	f000 fce7 	bl	8007490 <_malloc_r>
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	b140      	cbz	r0, 8006ad8 <__sfmoreglue+0x28>
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	e9c0 1600 	strd	r1, r6, [r0]
 8006acc:	300c      	adds	r0, #12
 8006ace:	60a0      	str	r0, [r4, #8]
 8006ad0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ad4:	f7fe fcbe 	bl	8005454 <memset>
 8006ad8:	4620      	mov	r0, r4
 8006ada:	bd70      	pop	{r4, r5, r6, pc}

08006adc <__sfp_lock_acquire>:
 8006adc:	4801      	ldr	r0, [pc, #4]	; (8006ae4 <__sfp_lock_acquire+0x8>)
 8006ade:	f000 b8b8 	b.w	8006c52 <__retarget_lock_acquire_recursive>
 8006ae2:	bf00      	nop
 8006ae4:	200002e9 	.word	0x200002e9

08006ae8 <__sfp_lock_release>:
 8006ae8:	4801      	ldr	r0, [pc, #4]	; (8006af0 <__sfp_lock_release+0x8>)
 8006aea:	f000 b8b3 	b.w	8006c54 <__retarget_lock_release_recursive>
 8006aee:	bf00      	nop
 8006af0:	200002e9 	.word	0x200002e9

08006af4 <__sinit_lock_acquire>:
 8006af4:	4801      	ldr	r0, [pc, #4]	; (8006afc <__sinit_lock_acquire+0x8>)
 8006af6:	f000 b8ac 	b.w	8006c52 <__retarget_lock_acquire_recursive>
 8006afa:	bf00      	nop
 8006afc:	200002ea 	.word	0x200002ea

08006b00 <__sinit_lock_release>:
 8006b00:	4801      	ldr	r0, [pc, #4]	; (8006b08 <__sinit_lock_release+0x8>)
 8006b02:	f000 b8a7 	b.w	8006c54 <__retarget_lock_release_recursive>
 8006b06:	bf00      	nop
 8006b08:	200002ea 	.word	0x200002ea

08006b0c <__sinit>:
 8006b0c:	b510      	push	{r4, lr}
 8006b0e:	4604      	mov	r4, r0
 8006b10:	f7ff fff0 	bl	8006af4 <__sinit_lock_acquire>
 8006b14:	69a3      	ldr	r3, [r4, #24]
 8006b16:	b11b      	cbz	r3, 8006b20 <__sinit+0x14>
 8006b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b1c:	f7ff bff0 	b.w	8006b00 <__sinit_lock_release>
 8006b20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b24:	6523      	str	r3, [r4, #80]	; 0x50
 8006b26:	4b13      	ldr	r3, [pc, #76]	; (8006b74 <__sinit+0x68>)
 8006b28:	4a13      	ldr	r2, [pc, #76]	; (8006b78 <__sinit+0x6c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b2e:	42a3      	cmp	r3, r4
 8006b30:	bf04      	itt	eq
 8006b32:	2301      	moveq	r3, #1
 8006b34:	61a3      	streq	r3, [r4, #24]
 8006b36:	4620      	mov	r0, r4
 8006b38:	f000 f820 	bl	8006b7c <__sfp>
 8006b3c:	6060      	str	r0, [r4, #4]
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f000 f81c 	bl	8006b7c <__sfp>
 8006b44:	60a0      	str	r0, [r4, #8]
 8006b46:	4620      	mov	r0, r4
 8006b48:	f000 f818 	bl	8006b7c <__sfp>
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	60e0      	str	r0, [r4, #12]
 8006b50:	2104      	movs	r1, #4
 8006b52:	6860      	ldr	r0, [r4, #4]
 8006b54:	f7ff ff82 	bl	8006a5c <std>
 8006b58:	68a0      	ldr	r0, [r4, #8]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	2109      	movs	r1, #9
 8006b5e:	f7ff ff7d 	bl	8006a5c <std>
 8006b62:	68e0      	ldr	r0, [r4, #12]
 8006b64:	2202      	movs	r2, #2
 8006b66:	2112      	movs	r1, #18
 8006b68:	f7ff ff78 	bl	8006a5c <std>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	61a3      	str	r3, [r4, #24]
 8006b70:	e7d2      	b.n	8006b18 <__sinit+0xc>
 8006b72:	bf00      	nop
 8006b74:	08007f34 	.word	0x08007f34
 8006b78:	08006aa5 	.word	0x08006aa5

08006b7c <__sfp>:
 8006b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7e:	4607      	mov	r7, r0
 8006b80:	f7ff ffac 	bl	8006adc <__sfp_lock_acquire>
 8006b84:	4b1e      	ldr	r3, [pc, #120]	; (8006c00 <__sfp+0x84>)
 8006b86:	681e      	ldr	r6, [r3, #0]
 8006b88:	69b3      	ldr	r3, [r6, #24]
 8006b8a:	b913      	cbnz	r3, 8006b92 <__sfp+0x16>
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	f7ff ffbd 	bl	8006b0c <__sinit>
 8006b92:	3648      	adds	r6, #72	; 0x48
 8006b94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	d503      	bpl.n	8006ba4 <__sfp+0x28>
 8006b9c:	6833      	ldr	r3, [r6, #0]
 8006b9e:	b30b      	cbz	r3, 8006be4 <__sfp+0x68>
 8006ba0:	6836      	ldr	r6, [r6, #0]
 8006ba2:	e7f7      	b.n	8006b94 <__sfp+0x18>
 8006ba4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ba8:	b9d5      	cbnz	r5, 8006be0 <__sfp+0x64>
 8006baa:	4b16      	ldr	r3, [pc, #88]	; (8006c04 <__sfp+0x88>)
 8006bac:	60e3      	str	r3, [r4, #12]
 8006bae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bb2:	6665      	str	r5, [r4, #100]	; 0x64
 8006bb4:	f000 f84c 	bl	8006c50 <__retarget_lock_init_recursive>
 8006bb8:	f7ff ff96 	bl	8006ae8 <__sfp_lock_release>
 8006bbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006bc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bc4:	6025      	str	r5, [r4, #0]
 8006bc6:	61a5      	str	r5, [r4, #24]
 8006bc8:	2208      	movs	r2, #8
 8006bca:	4629      	mov	r1, r5
 8006bcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bd0:	f7fe fc40 	bl	8005454 <memset>
 8006bd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006bd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006bdc:	4620      	mov	r0, r4
 8006bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006be0:	3468      	adds	r4, #104	; 0x68
 8006be2:	e7d9      	b.n	8006b98 <__sfp+0x1c>
 8006be4:	2104      	movs	r1, #4
 8006be6:	4638      	mov	r0, r7
 8006be8:	f7ff ff62 	bl	8006ab0 <__sfmoreglue>
 8006bec:	4604      	mov	r4, r0
 8006bee:	6030      	str	r0, [r6, #0]
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d1d5      	bne.n	8006ba0 <__sfp+0x24>
 8006bf4:	f7ff ff78 	bl	8006ae8 <__sfp_lock_release>
 8006bf8:	230c      	movs	r3, #12
 8006bfa:	603b      	str	r3, [r7, #0]
 8006bfc:	e7ee      	b.n	8006bdc <__sfp+0x60>
 8006bfe:	bf00      	nop
 8006c00:	08007f34 	.word	0x08007f34
 8006c04:	ffff0001 	.word	0xffff0001

08006c08 <_fwalk_reent>:
 8006c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c0c:	4606      	mov	r6, r0
 8006c0e:	4688      	mov	r8, r1
 8006c10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c14:	2700      	movs	r7, #0
 8006c16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c1a:	f1b9 0901 	subs.w	r9, r9, #1
 8006c1e:	d505      	bpl.n	8006c2c <_fwalk_reent+0x24>
 8006c20:	6824      	ldr	r4, [r4, #0]
 8006c22:	2c00      	cmp	r4, #0
 8006c24:	d1f7      	bne.n	8006c16 <_fwalk_reent+0xe>
 8006c26:	4638      	mov	r0, r7
 8006c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c2c:	89ab      	ldrh	r3, [r5, #12]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d907      	bls.n	8006c42 <_fwalk_reent+0x3a>
 8006c32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c36:	3301      	adds	r3, #1
 8006c38:	d003      	beq.n	8006c42 <_fwalk_reent+0x3a>
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	47c0      	blx	r8
 8006c40:	4307      	orrs	r7, r0
 8006c42:	3568      	adds	r5, #104	; 0x68
 8006c44:	e7e9      	b.n	8006c1a <_fwalk_reent+0x12>
	...

08006c48 <_localeconv_r>:
 8006c48:	4800      	ldr	r0, [pc, #0]	; (8006c4c <_localeconv_r+0x4>)
 8006c4a:	4770      	bx	lr
 8006c4c:	20000160 	.word	0x20000160

08006c50 <__retarget_lock_init_recursive>:
 8006c50:	4770      	bx	lr

08006c52 <__retarget_lock_acquire_recursive>:
 8006c52:	4770      	bx	lr

08006c54 <__retarget_lock_release_recursive>:
 8006c54:	4770      	bx	lr
	...

08006c58 <malloc>:
 8006c58:	4b02      	ldr	r3, [pc, #8]	; (8006c64 <malloc+0xc>)
 8006c5a:	4601      	mov	r1, r0
 8006c5c:	6818      	ldr	r0, [r3, #0]
 8006c5e:	f000 bc17 	b.w	8007490 <_malloc_r>
 8006c62:	bf00      	nop
 8006c64:	2000000c 	.word	0x2000000c

08006c68 <memcpy>:
 8006c68:	440a      	add	r2, r1
 8006c6a:	4291      	cmp	r1, r2
 8006c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c70:	d100      	bne.n	8006c74 <memcpy+0xc>
 8006c72:	4770      	bx	lr
 8006c74:	b510      	push	{r4, lr}
 8006c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c7e:	4291      	cmp	r1, r2
 8006c80:	d1f9      	bne.n	8006c76 <memcpy+0xe>
 8006c82:	bd10      	pop	{r4, pc}

08006c84 <_Balloc>:
 8006c84:	b570      	push	{r4, r5, r6, lr}
 8006c86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c88:	4604      	mov	r4, r0
 8006c8a:	460d      	mov	r5, r1
 8006c8c:	b976      	cbnz	r6, 8006cac <_Balloc+0x28>
 8006c8e:	2010      	movs	r0, #16
 8006c90:	f7ff ffe2 	bl	8006c58 <malloc>
 8006c94:	4602      	mov	r2, r0
 8006c96:	6260      	str	r0, [r4, #36]	; 0x24
 8006c98:	b920      	cbnz	r0, 8006ca4 <_Balloc+0x20>
 8006c9a:	4b18      	ldr	r3, [pc, #96]	; (8006cfc <_Balloc+0x78>)
 8006c9c:	4818      	ldr	r0, [pc, #96]	; (8006d00 <_Balloc+0x7c>)
 8006c9e:	2166      	movs	r1, #102	; 0x66
 8006ca0:	f000 feea 	bl	8007a78 <__assert_func>
 8006ca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ca8:	6006      	str	r6, [r0, #0]
 8006caa:	60c6      	str	r6, [r0, #12]
 8006cac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006cae:	68f3      	ldr	r3, [r6, #12]
 8006cb0:	b183      	cbz	r3, 8006cd4 <_Balloc+0x50>
 8006cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006cba:	b9b8      	cbnz	r0, 8006cec <_Balloc+0x68>
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	fa01 f605 	lsl.w	r6, r1, r5
 8006cc2:	1d72      	adds	r2, r6, #5
 8006cc4:	0092      	lsls	r2, r2, #2
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f000 fb60 	bl	800738c <_calloc_r>
 8006ccc:	b160      	cbz	r0, 8006ce8 <_Balloc+0x64>
 8006cce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006cd2:	e00e      	b.n	8006cf2 <_Balloc+0x6e>
 8006cd4:	2221      	movs	r2, #33	; 0x21
 8006cd6:	2104      	movs	r1, #4
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 fb57 	bl	800738c <_calloc_r>
 8006cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ce0:	60f0      	str	r0, [r6, #12]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e4      	bne.n	8006cb2 <_Balloc+0x2e>
 8006ce8:	2000      	movs	r0, #0
 8006cea:	bd70      	pop	{r4, r5, r6, pc}
 8006cec:	6802      	ldr	r2, [r0, #0]
 8006cee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cf8:	e7f7      	b.n	8006cea <_Balloc+0x66>
 8006cfa:	bf00      	nop
 8006cfc:	08007f79 	.word	0x08007f79
 8006d00:	0800805c 	.word	0x0800805c

08006d04 <_Bfree>:
 8006d04:	b570      	push	{r4, r5, r6, lr}
 8006d06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d08:	4605      	mov	r5, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	b976      	cbnz	r6, 8006d2c <_Bfree+0x28>
 8006d0e:	2010      	movs	r0, #16
 8006d10:	f7ff ffa2 	bl	8006c58 <malloc>
 8006d14:	4602      	mov	r2, r0
 8006d16:	6268      	str	r0, [r5, #36]	; 0x24
 8006d18:	b920      	cbnz	r0, 8006d24 <_Bfree+0x20>
 8006d1a:	4b09      	ldr	r3, [pc, #36]	; (8006d40 <_Bfree+0x3c>)
 8006d1c:	4809      	ldr	r0, [pc, #36]	; (8006d44 <_Bfree+0x40>)
 8006d1e:	218a      	movs	r1, #138	; 0x8a
 8006d20:	f000 feaa 	bl	8007a78 <__assert_func>
 8006d24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d28:	6006      	str	r6, [r0, #0]
 8006d2a:	60c6      	str	r6, [r0, #12]
 8006d2c:	b13c      	cbz	r4, 8006d3e <_Bfree+0x3a>
 8006d2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006d30:	6862      	ldr	r2, [r4, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d38:	6021      	str	r1, [r4, #0]
 8006d3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}
 8006d40:	08007f79 	.word	0x08007f79
 8006d44:	0800805c 	.word	0x0800805c

08006d48 <__multadd>:
 8006d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d4c:	690d      	ldr	r5, [r1, #16]
 8006d4e:	4607      	mov	r7, r0
 8006d50:	460c      	mov	r4, r1
 8006d52:	461e      	mov	r6, r3
 8006d54:	f101 0c14 	add.w	ip, r1, #20
 8006d58:	2000      	movs	r0, #0
 8006d5a:	f8dc 3000 	ldr.w	r3, [ip]
 8006d5e:	b299      	uxth	r1, r3
 8006d60:	fb02 6101 	mla	r1, r2, r1, r6
 8006d64:	0c1e      	lsrs	r6, r3, #16
 8006d66:	0c0b      	lsrs	r3, r1, #16
 8006d68:	fb02 3306 	mla	r3, r2, r6, r3
 8006d6c:	b289      	uxth	r1, r1
 8006d6e:	3001      	adds	r0, #1
 8006d70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d74:	4285      	cmp	r5, r0
 8006d76:	f84c 1b04 	str.w	r1, [ip], #4
 8006d7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d7e:	dcec      	bgt.n	8006d5a <__multadd+0x12>
 8006d80:	b30e      	cbz	r6, 8006dc6 <__multadd+0x7e>
 8006d82:	68a3      	ldr	r3, [r4, #8]
 8006d84:	42ab      	cmp	r3, r5
 8006d86:	dc19      	bgt.n	8006dbc <__multadd+0x74>
 8006d88:	6861      	ldr	r1, [r4, #4]
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	3101      	adds	r1, #1
 8006d8e:	f7ff ff79 	bl	8006c84 <_Balloc>
 8006d92:	4680      	mov	r8, r0
 8006d94:	b928      	cbnz	r0, 8006da2 <__multadd+0x5a>
 8006d96:	4602      	mov	r2, r0
 8006d98:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <__multadd+0x84>)
 8006d9a:	480d      	ldr	r0, [pc, #52]	; (8006dd0 <__multadd+0x88>)
 8006d9c:	21b5      	movs	r1, #181	; 0xb5
 8006d9e:	f000 fe6b 	bl	8007a78 <__assert_func>
 8006da2:	6922      	ldr	r2, [r4, #16]
 8006da4:	3202      	adds	r2, #2
 8006da6:	f104 010c 	add.w	r1, r4, #12
 8006daa:	0092      	lsls	r2, r2, #2
 8006dac:	300c      	adds	r0, #12
 8006dae:	f7ff ff5b 	bl	8006c68 <memcpy>
 8006db2:	4621      	mov	r1, r4
 8006db4:	4638      	mov	r0, r7
 8006db6:	f7ff ffa5 	bl	8006d04 <_Bfree>
 8006dba:	4644      	mov	r4, r8
 8006dbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006dc0:	3501      	adds	r5, #1
 8006dc2:	615e      	str	r6, [r3, #20]
 8006dc4:	6125      	str	r5, [r4, #16]
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dcc:	08007feb 	.word	0x08007feb
 8006dd0:	0800805c 	.word	0x0800805c

08006dd4 <__hi0bits>:
 8006dd4:	0c03      	lsrs	r3, r0, #16
 8006dd6:	041b      	lsls	r3, r3, #16
 8006dd8:	b9d3      	cbnz	r3, 8006e10 <__hi0bits+0x3c>
 8006dda:	0400      	lsls	r0, r0, #16
 8006ddc:	2310      	movs	r3, #16
 8006dde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006de2:	bf04      	itt	eq
 8006de4:	0200      	lsleq	r0, r0, #8
 8006de6:	3308      	addeq	r3, #8
 8006de8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006dec:	bf04      	itt	eq
 8006dee:	0100      	lsleq	r0, r0, #4
 8006df0:	3304      	addeq	r3, #4
 8006df2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006df6:	bf04      	itt	eq
 8006df8:	0080      	lsleq	r0, r0, #2
 8006dfa:	3302      	addeq	r3, #2
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	db05      	blt.n	8006e0c <__hi0bits+0x38>
 8006e00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e04:	f103 0301 	add.w	r3, r3, #1
 8006e08:	bf08      	it	eq
 8006e0a:	2320      	moveq	r3, #32
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	4770      	bx	lr
 8006e10:	2300      	movs	r3, #0
 8006e12:	e7e4      	b.n	8006dde <__hi0bits+0xa>

08006e14 <__lo0bits>:
 8006e14:	6803      	ldr	r3, [r0, #0]
 8006e16:	f013 0207 	ands.w	r2, r3, #7
 8006e1a:	4601      	mov	r1, r0
 8006e1c:	d00b      	beq.n	8006e36 <__lo0bits+0x22>
 8006e1e:	07da      	lsls	r2, r3, #31
 8006e20:	d423      	bmi.n	8006e6a <__lo0bits+0x56>
 8006e22:	0798      	lsls	r0, r3, #30
 8006e24:	bf49      	itett	mi
 8006e26:	085b      	lsrmi	r3, r3, #1
 8006e28:	089b      	lsrpl	r3, r3, #2
 8006e2a:	2001      	movmi	r0, #1
 8006e2c:	600b      	strmi	r3, [r1, #0]
 8006e2e:	bf5c      	itt	pl
 8006e30:	600b      	strpl	r3, [r1, #0]
 8006e32:	2002      	movpl	r0, #2
 8006e34:	4770      	bx	lr
 8006e36:	b298      	uxth	r0, r3
 8006e38:	b9a8      	cbnz	r0, 8006e66 <__lo0bits+0x52>
 8006e3a:	0c1b      	lsrs	r3, r3, #16
 8006e3c:	2010      	movs	r0, #16
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	b90a      	cbnz	r2, 8006e46 <__lo0bits+0x32>
 8006e42:	3008      	adds	r0, #8
 8006e44:	0a1b      	lsrs	r3, r3, #8
 8006e46:	071a      	lsls	r2, r3, #28
 8006e48:	bf04      	itt	eq
 8006e4a:	091b      	lsreq	r3, r3, #4
 8006e4c:	3004      	addeq	r0, #4
 8006e4e:	079a      	lsls	r2, r3, #30
 8006e50:	bf04      	itt	eq
 8006e52:	089b      	lsreq	r3, r3, #2
 8006e54:	3002      	addeq	r0, #2
 8006e56:	07da      	lsls	r2, r3, #31
 8006e58:	d403      	bmi.n	8006e62 <__lo0bits+0x4e>
 8006e5a:	085b      	lsrs	r3, r3, #1
 8006e5c:	f100 0001 	add.w	r0, r0, #1
 8006e60:	d005      	beq.n	8006e6e <__lo0bits+0x5a>
 8006e62:	600b      	str	r3, [r1, #0]
 8006e64:	4770      	bx	lr
 8006e66:	4610      	mov	r0, r2
 8006e68:	e7e9      	b.n	8006e3e <__lo0bits+0x2a>
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	4770      	bx	lr
 8006e6e:	2020      	movs	r0, #32
 8006e70:	4770      	bx	lr
	...

08006e74 <__i2b>:
 8006e74:	b510      	push	{r4, lr}
 8006e76:	460c      	mov	r4, r1
 8006e78:	2101      	movs	r1, #1
 8006e7a:	f7ff ff03 	bl	8006c84 <_Balloc>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	b928      	cbnz	r0, 8006e8e <__i2b+0x1a>
 8006e82:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <__i2b+0x24>)
 8006e84:	4805      	ldr	r0, [pc, #20]	; (8006e9c <__i2b+0x28>)
 8006e86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006e8a:	f000 fdf5 	bl	8007a78 <__assert_func>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	6144      	str	r4, [r0, #20]
 8006e92:	6103      	str	r3, [r0, #16]
 8006e94:	bd10      	pop	{r4, pc}
 8006e96:	bf00      	nop
 8006e98:	08007feb 	.word	0x08007feb
 8006e9c:	0800805c 	.word	0x0800805c

08006ea0 <__multiply>:
 8006ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea4:	4691      	mov	r9, r2
 8006ea6:	690a      	ldr	r2, [r1, #16]
 8006ea8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	bfb8      	it	lt
 8006eb0:	460b      	movlt	r3, r1
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	bfbc      	itt	lt
 8006eb6:	464c      	movlt	r4, r9
 8006eb8:	4699      	movlt	r9, r3
 8006eba:	6927      	ldr	r7, [r4, #16]
 8006ebc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ec0:	68a3      	ldr	r3, [r4, #8]
 8006ec2:	6861      	ldr	r1, [r4, #4]
 8006ec4:	eb07 060a 	add.w	r6, r7, sl
 8006ec8:	42b3      	cmp	r3, r6
 8006eca:	b085      	sub	sp, #20
 8006ecc:	bfb8      	it	lt
 8006ece:	3101      	addlt	r1, #1
 8006ed0:	f7ff fed8 	bl	8006c84 <_Balloc>
 8006ed4:	b930      	cbnz	r0, 8006ee4 <__multiply+0x44>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	4b44      	ldr	r3, [pc, #272]	; (8006fec <__multiply+0x14c>)
 8006eda:	4845      	ldr	r0, [pc, #276]	; (8006ff0 <__multiply+0x150>)
 8006edc:	f240 115d 	movw	r1, #349	; 0x15d
 8006ee0:	f000 fdca 	bl	8007a78 <__assert_func>
 8006ee4:	f100 0514 	add.w	r5, r0, #20
 8006ee8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006eec:	462b      	mov	r3, r5
 8006eee:	2200      	movs	r2, #0
 8006ef0:	4543      	cmp	r3, r8
 8006ef2:	d321      	bcc.n	8006f38 <__multiply+0x98>
 8006ef4:	f104 0314 	add.w	r3, r4, #20
 8006ef8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006efc:	f109 0314 	add.w	r3, r9, #20
 8006f00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006f04:	9202      	str	r2, [sp, #8]
 8006f06:	1b3a      	subs	r2, r7, r4
 8006f08:	3a15      	subs	r2, #21
 8006f0a:	f022 0203 	bic.w	r2, r2, #3
 8006f0e:	3204      	adds	r2, #4
 8006f10:	f104 0115 	add.w	r1, r4, #21
 8006f14:	428f      	cmp	r7, r1
 8006f16:	bf38      	it	cc
 8006f18:	2204      	movcc	r2, #4
 8006f1a:	9201      	str	r2, [sp, #4]
 8006f1c:	9a02      	ldr	r2, [sp, #8]
 8006f1e:	9303      	str	r3, [sp, #12]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d80c      	bhi.n	8006f3e <__multiply+0x9e>
 8006f24:	2e00      	cmp	r6, #0
 8006f26:	dd03      	ble.n	8006f30 <__multiply+0x90>
 8006f28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d05a      	beq.n	8006fe6 <__multiply+0x146>
 8006f30:	6106      	str	r6, [r0, #16]
 8006f32:	b005      	add	sp, #20
 8006f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f38:	f843 2b04 	str.w	r2, [r3], #4
 8006f3c:	e7d8      	b.n	8006ef0 <__multiply+0x50>
 8006f3e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f42:	f1ba 0f00 	cmp.w	sl, #0
 8006f46:	d024      	beq.n	8006f92 <__multiply+0xf2>
 8006f48:	f104 0e14 	add.w	lr, r4, #20
 8006f4c:	46a9      	mov	r9, r5
 8006f4e:	f04f 0c00 	mov.w	ip, #0
 8006f52:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006f56:	f8d9 1000 	ldr.w	r1, [r9]
 8006f5a:	fa1f fb82 	uxth.w	fp, r2
 8006f5e:	b289      	uxth	r1, r1
 8006f60:	fb0a 110b 	mla	r1, sl, fp, r1
 8006f64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006f68:	f8d9 2000 	ldr.w	r2, [r9]
 8006f6c:	4461      	add	r1, ip
 8006f6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f72:	fb0a c20b 	mla	r2, sl, fp, ip
 8006f76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f7a:	b289      	uxth	r1, r1
 8006f7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f80:	4577      	cmp	r7, lr
 8006f82:	f849 1b04 	str.w	r1, [r9], #4
 8006f86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f8a:	d8e2      	bhi.n	8006f52 <__multiply+0xb2>
 8006f8c:	9a01      	ldr	r2, [sp, #4]
 8006f8e:	f845 c002 	str.w	ip, [r5, r2]
 8006f92:	9a03      	ldr	r2, [sp, #12]
 8006f94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f98:	3304      	adds	r3, #4
 8006f9a:	f1b9 0f00 	cmp.w	r9, #0
 8006f9e:	d020      	beq.n	8006fe2 <__multiply+0x142>
 8006fa0:	6829      	ldr	r1, [r5, #0]
 8006fa2:	f104 0c14 	add.w	ip, r4, #20
 8006fa6:	46ae      	mov	lr, r5
 8006fa8:	f04f 0a00 	mov.w	sl, #0
 8006fac:	f8bc b000 	ldrh.w	fp, [ip]
 8006fb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006fb4:	fb09 220b 	mla	r2, r9, fp, r2
 8006fb8:	4492      	add	sl, r2
 8006fba:	b289      	uxth	r1, r1
 8006fbc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006fc0:	f84e 1b04 	str.w	r1, [lr], #4
 8006fc4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006fc8:	f8be 1000 	ldrh.w	r1, [lr]
 8006fcc:	0c12      	lsrs	r2, r2, #16
 8006fce:	fb09 1102 	mla	r1, r9, r2, r1
 8006fd2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006fd6:	4567      	cmp	r7, ip
 8006fd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006fdc:	d8e6      	bhi.n	8006fac <__multiply+0x10c>
 8006fde:	9a01      	ldr	r2, [sp, #4]
 8006fe0:	50a9      	str	r1, [r5, r2]
 8006fe2:	3504      	adds	r5, #4
 8006fe4:	e79a      	b.n	8006f1c <__multiply+0x7c>
 8006fe6:	3e01      	subs	r6, #1
 8006fe8:	e79c      	b.n	8006f24 <__multiply+0x84>
 8006fea:	bf00      	nop
 8006fec:	08007feb 	.word	0x08007feb
 8006ff0:	0800805c 	.word	0x0800805c

08006ff4 <__pow5mult>:
 8006ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff8:	4615      	mov	r5, r2
 8006ffa:	f012 0203 	ands.w	r2, r2, #3
 8006ffe:	4606      	mov	r6, r0
 8007000:	460f      	mov	r7, r1
 8007002:	d007      	beq.n	8007014 <__pow5mult+0x20>
 8007004:	4c25      	ldr	r4, [pc, #148]	; (800709c <__pow5mult+0xa8>)
 8007006:	3a01      	subs	r2, #1
 8007008:	2300      	movs	r3, #0
 800700a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800700e:	f7ff fe9b 	bl	8006d48 <__multadd>
 8007012:	4607      	mov	r7, r0
 8007014:	10ad      	asrs	r5, r5, #2
 8007016:	d03d      	beq.n	8007094 <__pow5mult+0xa0>
 8007018:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800701a:	b97c      	cbnz	r4, 800703c <__pow5mult+0x48>
 800701c:	2010      	movs	r0, #16
 800701e:	f7ff fe1b 	bl	8006c58 <malloc>
 8007022:	4602      	mov	r2, r0
 8007024:	6270      	str	r0, [r6, #36]	; 0x24
 8007026:	b928      	cbnz	r0, 8007034 <__pow5mult+0x40>
 8007028:	4b1d      	ldr	r3, [pc, #116]	; (80070a0 <__pow5mult+0xac>)
 800702a:	481e      	ldr	r0, [pc, #120]	; (80070a4 <__pow5mult+0xb0>)
 800702c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007030:	f000 fd22 	bl	8007a78 <__assert_func>
 8007034:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007038:	6004      	str	r4, [r0, #0]
 800703a:	60c4      	str	r4, [r0, #12]
 800703c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007040:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007044:	b94c      	cbnz	r4, 800705a <__pow5mult+0x66>
 8007046:	f240 2171 	movw	r1, #625	; 0x271
 800704a:	4630      	mov	r0, r6
 800704c:	f7ff ff12 	bl	8006e74 <__i2b>
 8007050:	2300      	movs	r3, #0
 8007052:	f8c8 0008 	str.w	r0, [r8, #8]
 8007056:	4604      	mov	r4, r0
 8007058:	6003      	str	r3, [r0, #0]
 800705a:	f04f 0900 	mov.w	r9, #0
 800705e:	07eb      	lsls	r3, r5, #31
 8007060:	d50a      	bpl.n	8007078 <__pow5mult+0x84>
 8007062:	4639      	mov	r1, r7
 8007064:	4622      	mov	r2, r4
 8007066:	4630      	mov	r0, r6
 8007068:	f7ff ff1a 	bl	8006ea0 <__multiply>
 800706c:	4639      	mov	r1, r7
 800706e:	4680      	mov	r8, r0
 8007070:	4630      	mov	r0, r6
 8007072:	f7ff fe47 	bl	8006d04 <_Bfree>
 8007076:	4647      	mov	r7, r8
 8007078:	106d      	asrs	r5, r5, #1
 800707a:	d00b      	beq.n	8007094 <__pow5mult+0xa0>
 800707c:	6820      	ldr	r0, [r4, #0]
 800707e:	b938      	cbnz	r0, 8007090 <__pow5mult+0x9c>
 8007080:	4622      	mov	r2, r4
 8007082:	4621      	mov	r1, r4
 8007084:	4630      	mov	r0, r6
 8007086:	f7ff ff0b 	bl	8006ea0 <__multiply>
 800708a:	6020      	str	r0, [r4, #0]
 800708c:	f8c0 9000 	str.w	r9, [r0]
 8007090:	4604      	mov	r4, r0
 8007092:	e7e4      	b.n	800705e <__pow5mult+0x6a>
 8007094:	4638      	mov	r0, r7
 8007096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800709a:	bf00      	nop
 800709c:	080081a8 	.word	0x080081a8
 80070a0:	08007f79 	.word	0x08007f79
 80070a4:	0800805c 	.word	0x0800805c

080070a8 <__lshift>:
 80070a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ac:	460c      	mov	r4, r1
 80070ae:	6849      	ldr	r1, [r1, #4]
 80070b0:	6923      	ldr	r3, [r4, #16]
 80070b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80070b6:	68a3      	ldr	r3, [r4, #8]
 80070b8:	4607      	mov	r7, r0
 80070ba:	4691      	mov	r9, r2
 80070bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070c0:	f108 0601 	add.w	r6, r8, #1
 80070c4:	42b3      	cmp	r3, r6
 80070c6:	db0b      	blt.n	80070e0 <__lshift+0x38>
 80070c8:	4638      	mov	r0, r7
 80070ca:	f7ff fddb 	bl	8006c84 <_Balloc>
 80070ce:	4605      	mov	r5, r0
 80070d0:	b948      	cbnz	r0, 80070e6 <__lshift+0x3e>
 80070d2:	4602      	mov	r2, r0
 80070d4:	4b2a      	ldr	r3, [pc, #168]	; (8007180 <__lshift+0xd8>)
 80070d6:	482b      	ldr	r0, [pc, #172]	; (8007184 <__lshift+0xdc>)
 80070d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80070dc:	f000 fccc 	bl	8007a78 <__assert_func>
 80070e0:	3101      	adds	r1, #1
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	e7ee      	b.n	80070c4 <__lshift+0x1c>
 80070e6:	2300      	movs	r3, #0
 80070e8:	f100 0114 	add.w	r1, r0, #20
 80070ec:	f100 0210 	add.w	r2, r0, #16
 80070f0:	4618      	mov	r0, r3
 80070f2:	4553      	cmp	r3, sl
 80070f4:	db37      	blt.n	8007166 <__lshift+0xbe>
 80070f6:	6920      	ldr	r0, [r4, #16]
 80070f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070fc:	f104 0314 	add.w	r3, r4, #20
 8007100:	f019 091f 	ands.w	r9, r9, #31
 8007104:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007108:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800710c:	d02f      	beq.n	800716e <__lshift+0xc6>
 800710e:	f1c9 0e20 	rsb	lr, r9, #32
 8007112:	468a      	mov	sl, r1
 8007114:	f04f 0c00 	mov.w	ip, #0
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	fa02 f209 	lsl.w	r2, r2, r9
 800711e:	ea42 020c 	orr.w	r2, r2, ip
 8007122:	f84a 2b04 	str.w	r2, [sl], #4
 8007126:	f853 2b04 	ldr.w	r2, [r3], #4
 800712a:	4298      	cmp	r0, r3
 800712c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007130:	d8f2      	bhi.n	8007118 <__lshift+0x70>
 8007132:	1b03      	subs	r3, r0, r4
 8007134:	3b15      	subs	r3, #21
 8007136:	f023 0303 	bic.w	r3, r3, #3
 800713a:	3304      	adds	r3, #4
 800713c:	f104 0215 	add.w	r2, r4, #21
 8007140:	4290      	cmp	r0, r2
 8007142:	bf38      	it	cc
 8007144:	2304      	movcc	r3, #4
 8007146:	f841 c003 	str.w	ip, [r1, r3]
 800714a:	f1bc 0f00 	cmp.w	ip, #0
 800714e:	d001      	beq.n	8007154 <__lshift+0xac>
 8007150:	f108 0602 	add.w	r6, r8, #2
 8007154:	3e01      	subs	r6, #1
 8007156:	4638      	mov	r0, r7
 8007158:	612e      	str	r6, [r5, #16]
 800715a:	4621      	mov	r1, r4
 800715c:	f7ff fdd2 	bl	8006d04 <_Bfree>
 8007160:	4628      	mov	r0, r5
 8007162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007166:	f842 0f04 	str.w	r0, [r2, #4]!
 800716a:	3301      	adds	r3, #1
 800716c:	e7c1      	b.n	80070f2 <__lshift+0x4a>
 800716e:	3904      	subs	r1, #4
 8007170:	f853 2b04 	ldr.w	r2, [r3], #4
 8007174:	f841 2f04 	str.w	r2, [r1, #4]!
 8007178:	4298      	cmp	r0, r3
 800717a:	d8f9      	bhi.n	8007170 <__lshift+0xc8>
 800717c:	e7ea      	b.n	8007154 <__lshift+0xac>
 800717e:	bf00      	nop
 8007180:	08007feb 	.word	0x08007feb
 8007184:	0800805c 	.word	0x0800805c

08007188 <__mcmp>:
 8007188:	b530      	push	{r4, r5, lr}
 800718a:	6902      	ldr	r2, [r0, #16]
 800718c:	690c      	ldr	r4, [r1, #16]
 800718e:	1b12      	subs	r2, r2, r4
 8007190:	d10e      	bne.n	80071b0 <__mcmp+0x28>
 8007192:	f100 0314 	add.w	r3, r0, #20
 8007196:	3114      	adds	r1, #20
 8007198:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800719c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80071a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80071a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80071a8:	42a5      	cmp	r5, r4
 80071aa:	d003      	beq.n	80071b4 <__mcmp+0x2c>
 80071ac:	d305      	bcc.n	80071ba <__mcmp+0x32>
 80071ae:	2201      	movs	r2, #1
 80071b0:	4610      	mov	r0, r2
 80071b2:	bd30      	pop	{r4, r5, pc}
 80071b4:	4283      	cmp	r3, r0
 80071b6:	d3f3      	bcc.n	80071a0 <__mcmp+0x18>
 80071b8:	e7fa      	b.n	80071b0 <__mcmp+0x28>
 80071ba:	f04f 32ff 	mov.w	r2, #4294967295
 80071be:	e7f7      	b.n	80071b0 <__mcmp+0x28>

080071c0 <__mdiff>:
 80071c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	460c      	mov	r4, r1
 80071c6:	4606      	mov	r6, r0
 80071c8:	4611      	mov	r1, r2
 80071ca:	4620      	mov	r0, r4
 80071cc:	4690      	mov	r8, r2
 80071ce:	f7ff ffdb 	bl	8007188 <__mcmp>
 80071d2:	1e05      	subs	r5, r0, #0
 80071d4:	d110      	bne.n	80071f8 <__mdiff+0x38>
 80071d6:	4629      	mov	r1, r5
 80071d8:	4630      	mov	r0, r6
 80071da:	f7ff fd53 	bl	8006c84 <_Balloc>
 80071de:	b930      	cbnz	r0, 80071ee <__mdiff+0x2e>
 80071e0:	4b3a      	ldr	r3, [pc, #232]	; (80072cc <__mdiff+0x10c>)
 80071e2:	4602      	mov	r2, r0
 80071e4:	f240 2132 	movw	r1, #562	; 0x232
 80071e8:	4839      	ldr	r0, [pc, #228]	; (80072d0 <__mdiff+0x110>)
 80071ea:	f000 fc45 	bl	8007a78 <__assert_func>
 80071ee:	2301      	movs	r3, #1
 80071f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f8:	bfa4      	itt	ge
 80071fa:	4643      	movge	r3, r8
 80071fc:	46a0      	movge	r8, r4
 80071fe:	4630      	mov	r0, r6
 8007200:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007204:	bfa6      	itte	ge
 8007206:	461c      	movge	r4, r3
 8007208:	2500      	movge	r5, #0
 800720a:	2501      	movlt	r5, #1
 800720c:	f7ff fd3a 	bl	8006c84 <_Balloc>
 8007210:	b920      	cbnz	r0, 800721c <__mdiff+0x5c>
 8007212:	4b2e      	ldr	r3, [pc, #184]	; (80072cc <__mdiff+0x10c>)
 8007214:	4602      	mov	r2, r0
 8007216:	f44f 7110 	mov.w	r1, #576	; 0x240
 800721a:	e7e5      	b.n	80071e8 <__mdiff+0x28>
 800721c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007220:	6926      	ldr	r6, [r4, #16]
 8007222:	60c5      	str	r5, [r0, #12]
 8007224:	f104 0914 	add.w	r9, r4, #20
 8007228:	f108 0514 	add.w	r5, r8, #20
 800722c:	f100 0e14 	add.w	lr, r0, #20
 8007230:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007234:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007238:	f108 0210 	add.w	r2, r8, #16
 800723c:	46f2      	mov	sl, lr
 800723e:	2100      	movs	r1, #0
 8007240:	f859 3b04 	ldr.w	r3, [r9], #4
 8007244:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007248:	fa1f f883 	uxth.w	r8, r3
 800724c:	fa11 f18b 	uxtah	r1, r1, fp
 8007250:	0c1b      	lsrs	r3, r3, #16
 8007252:	eba1 0808 	sub.w	r8, r1, r8
 8007256:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800725a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800725e:	fa1f f888 	uxth.w	r8, r8
 8007262:	1419      	asrs	r1, r3, #16
 8007264:	454e      	cmp	r6, r9
 8007266:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800726a:	f84a 3b04 	str.w	r3, [sl], #4
 800726e:	d8e7      	bhi.n	8007240 <__mdiff+0x80>
 8007270:	1b33      	subs	r3, r6, r4
 8007272:	3b15      	subs	r3, #21
 8007274:	f023 0303 	bic.w	r3, r3, #3
 8007278:	3304      	adds	r3, #4
 800727a:	3415      	adds	r4, #21
 800727c:	42a6      	cmp	r6, r4
 800727e:	bf38      	it	cc
 8007280:	2304      	movcc	r3, #4
 8007282:	441d      	add	r5, r3
 8007284:	4473      	add	r3, lr
 8007286:	469e      	mov	lr, r3
 8007288:	462e      	mov	r6, r5
 800728a:	4566      	cmp	r6, ip
 800728c:	d30e      	bcc.n	80072ac <__mdiff+0xec>
 800728e:	f10c 0203 	add.w	r2, ip, #3
 8007292:	1b52      	subs	r2, r2, r5
 8007294:	f022 0203 	bic.w	r2, r2, #3
 8007298:	3d03      	subs	r5, #3
 800729a:	45ac      	cmp	ip, r5
 800729c:	bf38      	it	cc
 800729e:	2200      	movcc	r2, #0
 80072a0:	441a      	add	r2, r3
 80072a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80072a6:	b17b      	cbz	r3, 80072c8 <__mdiff+0x108>
 80072a8:	6107      	str	r7, [r0, #16]
 80072aa:	e7a3      	b.n	80071f4 <__mdiff+0x34>
 80072ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80072b0:	fa11 f288 	uxtah	r2, r1, r8
 80072b4:	1414      	asrs	r4, r2, #16
 80072b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80072ba:	b292      	uxth	r2, r2
 80072bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80072c0:	f84e 2b04 	str.w	r2, [lr], #4
 80072c4:	1421      	asrs	r1, r4, #16
 80072c6:	e7e0      	b.n	800728a <__mdiff+0xca>
 80072c8:	3f01      	subs	r7, #1
 80072ca:	e7ea      	b.n	80072a2 <__mdiff+0xe2>
 80072cc:	08007feb 	.word	0x08007feb
 80072d0:	0800805c 	.word	0x0800805c

080072d4 <__d2b>:
 80072d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072d8:	4689      	mov	r9, r1
 80072da:	2101      	movs	r1, #1
 80072dc:	ec57 6b10 	vmov	r6, r7, d0
 80072e0:	4690      	mov	r8, r2
 80072e2:	f7ff fccf 	bl	8006c84 <_Balloc>
 80072e6:	4604      	mov	r4, r0
 80072e8:	b930      	cbnz	r0, 80072f8 <__d2b+0x24>
 80072ea:	4602      	mov	r2, r0
 80072ec:	4b25      	ldr	r3, [pc, #148]	; (8007384 <__d2b+0xb0>)
 80072ee:	4826      	ldr	r0, [pc, #152]	; (8007388 <__d2b+0xb4>)
 80072f0:	f240 310a 	movw	r1, #778	; 0x30a
 80072f4:	f000 fbc0 	bl	8007a78 <__assert_func>
 80072f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80072fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007300:	bb35      	cbnz	r5, 8007350 <__d2b+0x7c>
 8007302:	2e00      	cmp	r6, #0
 8007304:	9301      	str	r3, [sp, #4]
 8007306:	d028      	beq.n	800735a <__d2b+0x86>
 8007308:	4668      	mov	r0, sp
 800730a:	9600      	str	r6, [sp, #0]
 800730c:	f7ff fd82 	bl	8006e14 <__lo0bits>
 8007310:	9900      	ldr	r1, [sp, #0]
 8007312:	b300      	cbz	r0, 8007356 <__d2b+0x82>
 8007314:	9a01      	ldr	r2, [sp, #4]
 8007316:	f1c0 0320 	rsb	r3, r0, #32
 800731a:	fa02 f303 	lsl.w	r3, r2, r3
 800731e:	430b      	orrs	r3, r1
 8007320:	40c2      	lsrs	r2, r0
 8007322:	6163      	str	r3, [r4, #20]
 8007324:	9201      	str	r2, [sp, #4]
 8007326:	9b01      	ldr	r3, [sp, #4]
 8007328:	61a3      	str	r3, [r4, #24]
 800732a:	2b00      	cmp	r3, #0
 800732c:	bf14      	ite	ne
 800732e:	2202      	movne	r2, #2
 8007330:	2201      	moveq	r2, #1
 8007332:	6122      	str	r2, [r4, #16]
 8007334:	b1d5      	cbz	r5, 800736c <__d2b+0x98>
 8007336:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800733a:	4405      	add	r5, r0
 800733c:	f8c9 5000 	str.w	r5, [r9]
 8007340:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007344:	f8c8 0000 	str.w	r0, [r8]
 8007348:	4620      	mov	r0, r4
 800734a:	b003      	add	sp, #12
 800734c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007354:	e7d5      	b.n	8007302 <__d2b+0x2e>
 8007356:	6161      	str	r1, [r4, #20]
 8007358:	e7e5      	b.n	8007326 <__d2b+0x52>
 800735a:	a801      	add	r0, sp, #4
 800735c:	f7ff fd5a 	bl	8006e14 <__lo0bits>
 8007360:	9b01      	ldr	r3, [sp, #4]
 8007362:	6163      	str	r3, [r4, #20]
 8007364:	2201      	movs	r2, #1
 8007366:	6122      	str	r2, [r4, #16]
 8007368:	3020      	adds	r0, #32
 800736a:	e7e3      	b.n	8007334 <__d2b+0x60>
 800736c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007370:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007374:	f8c9 0000 	str.w	r0, [r9]
 8007378:	6918      	ldr	r0, [r3, #16]
 800737a:	f7ff fd2b 	bl	8006dd4 <__hi0bits>
 800737e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007382:	e7df      	b.n	8007344 <__d2b+0x70>
 8007384:	08007feb 	.word	0x08007feb
 8007388:	0800805c 	.word	0x0800805c

0800738c <_calloc_r>:
 800738c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800738e:	fba1 2402 	umull	r2, r4, r1, r2
 8007392:	b94c      	cbnz	r4, 80073a8 <_calloc_r+0x1c>
 8007394:	4611      	mov	r1, r2
 8007396:	9201      	str	r2, [sp, #4]
 8007398:	f000 f87a 	bl	8007490 <_malloc_r>
 800739c:	9a01      	ldr	r2, [sp, #4]
 800739e:	4605      	mov	r5, r0
 80073a0:	b930      	cbnz	r0, 80073b0 <_calloc_r+0x24>
 80073a2:	4628      	mov	r0, r5
 80073a4:	b003      	add	sp, #12
 80073a6:	bd30      	pop	{r4, r5, pc}
 80073a8:	220c      	movs	r2, #12
 80073aa:	6002      	str	r2, [r0, #0]
 80073ac:	2500      	movs	r5, #0
 80073ae:	e7f8      	b.n	80073a2 <_calloc_r+0x16>
 80073b0:	4621      	mov	r1, r4
 80073b2:	f7fe f84f 	bl	8005454 <memset>
 80073b6:	e7f4      	b.n	80073a2 <_calloc_r+0x16>

080073b8 <_free_r>:
 80073b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073ba:	2900      	cmp	r1, #0
 80073bc:	d044      	beq.n	8007448 <_free_r+0x90>
 80073be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073c2:	9001      	str	r0, [sp, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f1a1 0404 	sub.w	r4, r1, #4
 80073ca:	bfb8      	it	lt
 80073cc:	18e4      	addlt	r4, r4, r3
 80073ce:	f000 fcdf 	bl	8007d90 <__malloc_lock>
 80073d2:	4a1e      	ldr	r2, [pc, #120]	; (800744c <_free_r+0x94>)
 80073d4:	9801      	ldr	r0, [sp, #4]
 80073d6:	6813      	ldr	r3, [r2, #0]
 80073d8:	b933      	cbnz	r3, 80073e8 <_free_r+0x30>
 80073da:	6063      	str	r3, [r4, #4]
 80073dc:	6014      	str	r4, [r2, #0]
 80073de:	b003      	add	sp, #12
 80073e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073e4:	f000 bcda 	b.w	8007d9c <__malloc_unlock>
 80073e8:	42a3      	cmp	r3, r4
 80073ea:	d908      	bls.n	80073fe <_free_r+0x46>
 80073ec:	6825      	ldr	r5, [r4, #0]
 80073ee:	1961      	adds	r1, r4, r5
 80073f0:	428b      	cmp	r3, r1
 80073f2:	bf01      	itttt	eq
 80073f4:	6819      	ldreq	r1, [r3, #0]
 80073f6:	685b      	ldreq	r3, [r3, #4]
 80073f8:	1949      	addeq	r1, r1, r5
 80073fa:	6021      	streq	r1, [r4, #0]
 80073fc:	e7ed      	b.n	80073da <_free_r+0x22>
 80073fe:	461a      	mov	r2, r3
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	b10b      	cbz	r3, 8007408 <_free_r+0x50>
 8007404:	42a3      	cmp	r3, r4
 8007406:	d9fa      	bls.n	80073fe <_free_r+0x46>
 8007408:	6811      	ldr	r1, [r2, #0]
 800740a:	1855      	adds	r5, r2, r1
 800740c:	42a5      	cmp	r5, r4
 800740e:	d10b      	bne.n	8007428 <_free_r+0x70>
 8007410:	6824      	ldr	r4, [r4, #0]
 8007412:	4421      	add	r1, r4
 8007414:	1854      	adds	r4, r2, r1
 8007416:	42a3      	cmp	r3, r4
 8007418:	6011      	str	r1, [r2, #0]
 800741a:	d1e0      	bne.n	80073de <_free_r+0x26>
 800741c:	681c      	ldr	r4, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	6053      	str	r3, [r2, #4]
 8007422:	4421      	add	r1, r4
 8007424:	6011      	str	r1, [r2, #0]
 8007426:	e7da      	b.n	80073de <_free_r+0x26>
 8007428:	d902      	bls.n	8007430 <_free_r+0x78>
 800742a:	230c      	movs	r3, #12
 800742c:	6003      	str	r3, [r0, #0]
 800742e:	e7d6      	b.n	80073de <_free_r+0x26>
 8007430:	6825      	ldr	r5, [r4, #0]
 8007432:	1961      	adds	r1, r4, r5
 8007434:	428b      	cmp	r3, r1
 8007436:	bf04      	itt	eq
 8007438:	6819      	ldreq	r1, [r3, #0]
 800743a:	685b      	ldreq	r3, [r3, #4]
 800743c:	6063      	str	r3, [r4, #4]
 800743e:	bf04      	itt	eq
 8007440:	1949      	addeq	r1, r1, r5
 8007442:	6021      	streq	r1, [r4, #0]
 8007444:	6054      	str	r4, [r2, #4]
 8007446:	e7ca      	b.n	80073de <_free_r+0x26>
 8007448:	b003      	add	sp, #12
 800744a:	bd30      	pop	{r4, r5, pc}
 800744c:	200002ec 	.word	0x200002ec

08007450 <sbrk_aligned>:
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	4e0e      	ldr	r6, [pc, #56]	; (800748c <sbrk_aligned+0x3c>)
 8007454:	460c      	mov	r4, r1
 8007456:	6831      	ldr	r1, [r6, #0]
 8007458:	4605      	mov	r5, r0
 800745a:	b911      	cbnz	r1, 8007462 <sbrk_aligned+0x12>
 800745c:	f000 f9e6 	bl	800782c <_sbrk_r>
 8007460:	6030      	str	r0, [r6, #0]
 8007462:	4621      	mov	r1, r4
 8007464:	4628      	mov	r0, r5
 8007466:	f000 f9e1 	bl	800782c <_sbrk_r>
 800746a:	1c43      	adds	r3, r0, #1
 800746c:	d00a      	beq.n	8007484 <sbrk_aligned+0x34>
 800746e:	1cc4      	adds	r4, r0, #3
 8007470:	f024 0403 	bic.w	r4, r4, #3
 8007474:	42a0      	cmp	r0, r4
 8007476:	d007      	beq.n	8007488 <sbrk_aligned+0x38>
 8007478:	1a21      	subs	r1, r4, r0
 800747a:	4628      	mov	r0, r5
 800747c:	f000 f9d6 	bl	800782c <_sbrk_r>
 8007480:	3001      	adds	r0, #1
 8007482:	d101      	bne.n	8007488 <sbrk_aligned+0x38>
 8007484:	f04f 34ff 	mov.w	r4, #4294967295
 8007488:	4620      	mov	r0, r4
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	200002f0 	.word	0x200002f0

08007490 <_malloc_r>:
 8007490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007494:	1ccd      	adds	r5, r1, #3
 8007496:	f025 0503 	bic.w	r5, r5, #3
 800749a:	3508      	adds	r5, #8
 800749c:	2d0c      	cmp	r5, #12
 800749e:	bf38      	it	cc
 80074a0:	250c      	movcc	r5, #12
 80074a2:	2d00      	cmp	r5, #0
 80074a4:	4607      	mov	r7, r0
 80074a6:	db01      	blt.n	80074ac <_malloc_r+0x1c>
 80074a8:	42a9      	cmp	r1, r5
 80074aa:	d905      	bls.n	80074b8 <_malloc_r+0x28>
 80074ac:	230c      	movs	r3, #12
 80074ae:	603b      	str	r3, [r7, #0]
 80074b0:	2600      	movs	r6, #0
 80074b2:	4630      	mov	r0, r6
 80074b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074b8:	4e2e      	ldr	r6, [pc, #184]	; (8007574 <_malloc_r+0xe4>)
 80074ba:	f000 fc69 	bl	8007d90 <__malloc_lock>
 80074be:	6833      	ldr	r3, [r6, #0]
 80074c0:	461c      	mov	r4, r3
 80074c2:	bb34      	cbnz	r4, 8007512 <_malloc_r+0x82>
 80074c4:	4629      	mov	r1, r5
 80074c6:	4638      	mov	r0, r7
 80074c8:	f7ff ffc2 	bl	8007450 <sbrk_aligned>
 80074cc:	1c43      	adds	r3, r0, #1
 80074ce:	4604      	mov	r4, r0
 80074d0:	d14d      	bne.n	800756e <_malloc_r+0xde>
 80074d2:	6834      	ldr	r4, [r6, #0]
 80074d4:	4626      	mov	r6, r4
 80074d6:	2e00      	cmp	r6, #0
 80074d8:	d140      	bne.n	800755c <_malloc_r+0xcc>
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	4631      	mov	r1, r6
 80074de:	4638      	mov	r0, r7
 80074e0:	eb04 0803 	add.w	r8, r4, r3
 80074e4:	f000 f9a2 	bl	800782c <_sbrk_r>
 80074e8:	4580      	cmp	r8, r0
 80074ea:	d13a      	bne.n	8007562 <_malloc_r+0xd2>
 80074ec:	6821      	ldr	r1, [r4, #0]
 80074ee:	3503      	adds	r5, #3
 80074f0:	1a6d      	subs	r5, r5, r1
 80074f2:	f025 0503 	bic.w	r5, r5, #3
 80074f6:	3508      	adds	r5, #8
 80074f8:	2d0c      	cmp	r5, #12
 80074fa:	bf38      	it	cc
 80074fc:	250c      	movcc	r5, #12
 80074fe:	4629      	mov	r1, r5
 8007500:	4638      	mov	r0, r7
 8007502:	f7ff ffa5 	bl	8007450 <sbrk_aligned>
 8007506:	3001      	adds	r0, #1
 8007508:	d02b      	beq.n	8007562 <_malloc_r+0xd2>
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	442b      	add	r3, r5
 800750e:	6023      	str	r3, [r4, #0]
 8007510:	e00e      	b.n	8007530 <_malloc_r+0xa0>
 8007512:	6822      	ldr	r2, [r4, #0]
 8007514:	1b52      	subs	r2, r2, r5
 8007516:	d41e      	bmi.n	8007556 <_malloc_r+0xc6>
 8007518:	2a0b      	cmp	r2, #11
 800751a:	d916      	bls.n	800754a <_malloc_r+0xba>
 800751c:	1961      	adds	r1, r4, r5
 800751e:	42a3      	cmp	r3, r4
 8007520:	6025      	str	r5, [r4, #0]
 8007522:	bf18      	it	ne
 8007524:	6059      	strne	r1, [r3, #4]
 8007526:	6863      	ldr	r3, [r4, #4]
 8007528:	bf08      	it	eq
 800752a:	6031      	streq	r1, [r6, #0]
 800752c:	5162      	str	r2, [r4, r5]
 800752e:	604b      	str	r3, [r1, #4]
 8007530:	4638      	mov	r0, r7
 8007532:	f104 060b 	add.w	r6, r4, #11
 8007536:	f000 fc31 	bl	8007d9c <__malloc_unlock>
 800753a:	f026 0607 	bic.w	r6, r6, #7
 800753e:	1d23      	adds	r3, r4, #4
 8007540:	1af2      	subs	r2, r6, r3
 8007542:	d0b6      	beq.n	80074b2 <_malloc_r+0x22>
 8007544:	1b9b      	subs	r3, r3, r6
 8007546:	50a3      	str	r3, [r4, r2]
 8007548:	e7b3      	b.n	80074b2 <_malloc_r+0x22>
 800754a:	6862      	ldr	r2, [r4, #4]
 800754c:	42a3      	cmp	r3, r4
 800754e:	bf0c      	ite	eq
 8007550:	6032      	streq	r2, [r6, #0]
 8007552:	605a      	strne	r2, [r3, #4]
 8007554:	e7ec      	b.n	8007530 <_malloc_r+0xa0>
 8007556:	4623      	mov	r3, r4
 8007558:	6864      	ldr	r4, [r4, #4]
 800755a:	e7b2      	b.n	80074c2 <_malloc_r+0x32>
 800755c:	4634      	mov	r4, r6
 800755e:	6876      	ldr	r6, [r6, #4]
 8007560:	e7b9      	b.n	80074d6 <_malloc_r+0x46>
 8007562:	230c      	movs	r3, #12
 8007564:	603b      	str	r3, [r7, #0]
 8007566:	4638      	mov	r0, r7
 8007568:	f000 fc18 	bl	8007d9c <__malloc_unlock>
 800756c:	e7a1      	b.n	80074b2 <_malloc_r+0x22>
 800756e:	6025      	str	r5, [r4, #0]
 8007570:	e7de      	b.n	8007530 <_malloc_r+0xa0>
 8007572:	bf00      	nop
 8007574:	200002ec 	.word	0x200002ec

08007578 <__sfputc_r>:
 8007578:	6893      	ldr	r3, [r2, #8]
 800757a:	3b01      	subs	r3, #1
 800757c:	2b00      	cmp	r3, #0
 800757e:	b410      	push	{r4}
 8007580:	6093      	str	r3, [r2, #8]
 8007582:	da08      	bge.n	8007596 <__sfputc_r+0x1e>
 8007584:	6994      	ldr	r4, [r2, #24]
 8007586:	42a3      	cmp	r3, r4
 8007588:	db01      	blt.n	800758e <__sfputc_r+0x16>
 800758a:	290a      	cmp	r1, #10
 800758c:	d103      	bne.n	8007596 <__sfputc_r+0x1e>
 800758e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007592:	f000 b99f 	b.w	80078d4 <__swbuf_r>
 8007596:	6813      	ldr	r3, [r2, #0]
 8007598:	1c58      	adds	r0, r3, #1
 800759a:	6010      	str	r0, [r2, #0]
 800759c:	7019      	strb	r1, [r3, #0]
 800759e:	4608      	mov	r0, r1
 80075a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <__sfputs_r>:
 80075a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a8:	4606      	mov	r6, r0
 80075aa:	460f      	mov	r7, r1
 80075ac:	4614      	mov	r4, r2
 80075ae:	18d5      	adds	r5, r2, r3
 80075b0:	42ac      	cmp	r4, r5
 80075b2:	d101      	bne.n	80075b8 <__sfputs_r+0x12>
 80075b4:	2000      	movs	r0, #0
 80075b6:	e007      	b.n	80075c8 <__sfputs_r+0x22>
 80075b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075bc:	463a      	mov	r2, r7
 80075be:	4630      	mov	r0, r6
 80075c0:	f7ff ffda 	bl	8007578 <__sfputc_r>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d1f3      	bne.n	80075b0 <__sfputs_r+0xa>
 80075c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075cc <_vfiprintf_r>:
 80075cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d0:	460d      	mov	r5, r1
 80075d2:	b09d      	sub	sp, #116	; 0x74
 80075d4:	4614      	mov	r4, r2
 80075d6:	4698      	mov	r8, r3
 80075d8:	4606      	mov	r6, r0
 80075da:	b118      	cbz	r0, 80075e4 <_vfiprintf_r+0x18>
 80075dc:	6983      	ldr	r3, [r0, #24]
 80075de:	b90b      	cbnz	r3, 80075e4 <_vfiprintf_r+0x18>
 80075e0:	f7ff fa94 	bl	8006b0c <__sinit>
 80075e4:	4b89      	ldr	r3, [pc, #548]	; (800780c <_vfiprintf_r+0x240>)
 80075e6:	429d      	cmp	r5, r3
 80075e8:	d11b      	bne.n	8007622 <_vfiprintf_r+0x56>
 80075ea:	6875      	ldr	r5, [r6, #4]
 80075ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075ee:	07d9      	lsls	r1, r3, #31
 80075f0:	d405      	bmi.n	80075fe <_vfiprintf_r+0x32>
 80075f2:	89ab      	ldrh	r3, [r5, #12]
 80075f4:	059a      	lsls	r2, r3, #22
 80075f6:	d402      	bmi.n	80075fe <_vfiprintf_r+0x32>
 80075f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075fa:	f7ff fb2a 	bl	8006c52 <__retarget_lock_acquire_recursive>
 80075fe:	89ab      	ldrh	r3, [r5, #12]
 8007600:	071b      	lsls	r3, r3, #28
 8007602:	d501      	bpl.n	8007608 <_vfiprintf_r+0x3c>
 8007604:	692b      	ldr	r3, [r5, #16]
 8007606:	b9eb      	cbnz	r3, 8007644 <_vfiprintf_r+0x78>
 8007608:	4629      	mov	r1, r5
 800760a:	4630      	mov	r0, r6
 800760c:	f000 f9c6 	bl	800799c <__swsetup_r>
 8007610:	b1c0      	cbz	r0, 8007644 <_vfiprintf_r+0x78>
 8007612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007614:	07dc      	lsls	r4, r3, #31
 8007616:	d50e      	bpl.n	8007636 <_vfiprintf_r+0x6a>
 8007618:	f04f 30ff 	mov.w	r0, #4294967295
 800761c:	b01d      	add	sp, #116	; 0x74
 800761e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007622:	4b7b      	ldr	r3, [pc, #492]	; (8007810 <_vfiprintf_r+0x244>)
 8007624:	429d      	cmp	r5, r3
 8007626:	d101      	bne.n	800762c <_vfiprintf_r+0x60>
 8007628:	68b5      	ldr	r5, [r6, #8]
 800762a:	e7df      	b.n	80075ec <_vfiprintf_r+0x20>
 800762c:	4b79      	ldr	r3, [pc, #484]	; (8007814 <_vfiprintf_r+0x248>)
 800762e:	429d      	cmp	r5, r3
 8007630:	bf08      	it	eq
 8007632:	68f5      	ldreq	r5, [r6, #12]
 8007634:	e7da      	b.n	80075ec <_vfiprintf_r+0x20>
 8007636:	89ab      	ldrh	r3, [r5, #12]
 8007638:	0598      	lsls	r0, r3, #22
 800763a:	d4ed      	bmi.n	8007618 <_vfiprintf_r+0x4c>
 800763c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800763e:	f7ff fb09 	bl	8006c54 <__retarget_lock_release_recursive>
 8007642:	e7e9      	b.n	8007618 <_vfiprintf_r+0x4c>
 8007644:	2300      	movs	r3, #0
 8007646:	9309      	str	r3, [sp, #36]	; 0x24
 8007648:	2320      	movs	r3, #32
 800764a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800764e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007652:	2330      	movs	r3, #48	; 0x30
 8007654:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007818 <_vfiprintf_r+0x24c>
 8007658:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800765c:	f04f 0901 	mov.w	r9, #1
 8007660:	4623      	mov	r3, r4
 8007662:	469a      	mov	sl, r3
 8007664:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007668:	b10a      	cbz	r2, 800766e <_vfiprintf_r+0xa2>
 800766a:	2a25      	cmp	r2, #37	; 0x25
 800766c:	d1f9      	bne.n	8007662 <_vfiprintf_r+0x96>
 800766e:	ebba 0b04 	subs.w	fp, sl, r4
 8007672:	d00b      	beq.n	800768c <_vfiprintf_r+0xc0>
 8007674:	465b      	mov	r3, fp
 8007676:	4622      	mov	r2, r4
 8007678:	4629      	mov	r1, r5
 800767a:	4630      	mov	r0, r6
 800767c:	f7ff ff93 	bl	80075a6 <__sfputs_r>
 8007680:	3001      	adds	r0, #1
 8007682:	f000 80aa 	beq.w	80077da <_vfiprintf_r+0x20e>
 8007686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007688:	445a      	add	r2, fp
 800768a:	9209      	str	r2, [sp, #36]	; 0x24
 800768c:	f89a 3000 	ldrb.w	r3, [sl]
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 80a2 	beq.w	80077da <_vfiprintf_r+0x20e>
 8007696:	2300      	movs	r3, #0
 8007698:	f04f 32ff 	mov.w	r2, #4294967295
 800769c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076a0:	f10a 0a01 	add.w	sl, sl, #1
 80076a4:	9304      	str	r3, [sp, #16]
 80076a6:	9307      	str	r3, [sp, #28]
 80076a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076ac:	931a      	str	r3, [sp, #104]	; 0x68
 80076ae:	4654      	mov	r4, sl
 80076b0:	2205      	movs	r2, #5
 80076b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b6:	4858      	ldr	r0, [pc, #352]	; (8007818 <_vfiprintf_r+0x24c>)
 80076b8:	f7f8 fd92 	bl	80001e0 <memchr>
 80076bc:	9a04      	ldr	r2, [sp, #16]
 80076be:	b9d8      	cbnz	r0, 80076f8 <_vfiprintf_r+0x12c>
 80076c0:	06d1      	lsls	r1, r2, #27
 80076c2:	bf44      	itt	mi
 80076c4:	2320      	movmi	r3, #32
 80076c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076ca:	0713      	lsls	r3, r2, #28
 80076cc:	bf44      	itt	mi
 80076ce:	232b      	movmi	r3, #43	; 0x2b
 80076d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076d4:	f89a 3000 	ldrb.w	r3, [sl]
 80076d8:	2b2a      	cmp	r3, #42	; 0x2a
 80076da:	d015      	beq.n	8007708 <_vfiprintf_r+0x13c>
 80076dc:	9a07      	ldr	r2, [sp, #28]
 80076de:	4654      	mov	r4, sl
 80076e0:	2000      	movs	r0, #0
 80076e2:	f04f 0c0a 	mov.w	ip, #10
 80076e6:	4621      	mov	r1, r4
 80076e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076ec:	3b30      	subs	r3, #48	; 0x30
 80076ee:	2b09      	cmp	r3, #9
 80076f0:	d94e      	bls.n	8007790 <_vfiprintf_r+0x1c4>
 80076f2:	b1b0      	cbz	r0, 8007722 <_vfiprintf_r+0x156>
 80076f4:	9207      	str	r2, [sp, #28]
 80076f6:	e014      	b.n	8007722 <_vfiprintf_r+0x156>
 80076f8:	eba0 0308 	sub.w	r3, r0, r8
 80076fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007700:	4313      	orrs	r3, r2
 8007702:	9304      	str	r3, [sp, #16]
 8007704:	46a2      	mov	sl, r4
 8007706:	e7d2      	b.n	80076ae <_vfiprintf_r+0xe2>
 8007708:	9b03      	ldr	r3, [sp, #12]
 800770a:	1d19      	adds	r1, r3, #4
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	9103      	str	r1, [sp, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	bfbb      	ittet	lt
 8007714:	425b      	neglt	r3, r3
 8007716:	f042 0202 	orrlt.w	r2, r2, #2
 800771a:	9307      	strge	r3, [sp, #28]
 800771c:	9307      	strlt	r3, [sp, #28]
 800771e:	bfb8      	it	lt
 8007720:	9204      	strlt	r2, [sp, #16]
 8007722:	7823      	ldrb	r3, [r4, #0]
 8007724:	2b2e      	cmp	r3, #46	; 0x2e
 8007726:	d10c      	bne.n	8007742 <_vfiprintf_r+0x176>
 8007728:	7863      	ldrb	r3, [r4, #1]
 800772a:	2b2a      	cmp	r3, #42	; 0x2a
 800772c:	d135      	bne.n	800779a <_vfiprintf_r+0x1ce>
 800772e:	9b03      	ldr	r3, [sp, #12]
 8007730:	1d1a      	adds	r2, r3, #4
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	9203      	str	r2, [sp, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	bfb8      	it	lt
 800773a:	f04f 33ff 	movlt.w	r3, #4294967295
 800773e:	3402      	adds	r4, #2
 8007740:	9305      	str	r3, [sp, #20]
 8007742:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007828 <_vfiprintf_r+0x25c>
 8007746:	7821      	ldrb	r1, [r4, #0]
 8007748:	2203      	movs	r2, #3
 800774a:	4650      	mov	r0, sl
 800774c:	f7f8 fd48 	bl	80001e0 <memchr>
 8007750:	b140      	cbz	r0, 8007764 <_vfiprintf_r+0x198>
 8007752:	2340      	movs	r3, #64	; 0x40
 8007754:	eba0 000a 	sub.w	r0, r0, sl
 8007758:	fa03 f000 	lsl.w	r0, r3, r0
 800775c:	9b04      	ldr	r3, [sp, #16]
 800775e:	4303      	orrs	r3, r0
 8007760:	3401      	adds	r4, #1
 8007762:	9304      	str	r3, [sp, #16]
 8007764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007768:	482c      	ldr	r0, [pc, #176]	; (800781c <_vfiprintf_r+0x250>)
 800776a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800776e:	2206      	movs	r2, #6
 8007770:	f7f8 fd36 	bl	80001e0 <memchr>
 8007774:	2800      	cmp	r0, #0
 8007776:	d03f      	beq.n	80077f8 <_vfiprintf_r+0x22c>
 8007778:	4b29      	ldr	r3, [pc, #164]	; (8007820 <_vfiprintf_r+0x254>)
 800777a:	bb1b      	cbnz	r3, 80077c4 <_vfiprintf_r+0x1f8>
 800777c:	9b03      	ldr	r3, [sp, #12]
 800777e:	3307      	adds	r3, #7
 8007780:	f023 0307 	bic.w	r3, r3, #7
 8007784:	3308      	adds	r3, #8
 8007786:	9303      	str	r3, [sp, #12]
 8007788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800778a:	443b      	add	r3, r7
 800778c:	9309      	str	r3, [sp, #36]	; 0x24
 800778e:	e767      	b.n	8007660 <_vfiprintf_r+0x94>
 8007790:	fb0c 3202 	mla	r2, ip, r2, r3
 8007794:	460c      	mov	r4, r1
 8007796:	2001      	movs	r0, #1
 8007798:	e7a5      	b.n	80076e6 <_vfiprintf_r+0x11a>
 800779a:	2300      	movs	r3, #0
 800779c:	3401      	adds	r4, #1
 800779e:	9305      	str	r3, [sp, #20]
 80077a0:	4619      	mov	r1, r3
 80077a2:	f04f 0c0a 	mov.w	ip, #10
 80077a6:	4620      	mov	r0, r4
 80077a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077ac:	3a30      	subs	r2, #48	; 0x30
 80077ae:	2a09      	cmp	r2, #9
 80077b0:	d903      	bls.n	80077ba <_vfiprintf_r+0x1ee>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d0c5      	beq.n	8007742 <_vfiprintf_r+0x176>
 80077b6:	9105      	str	r1, [sp, #20]
 80077b8:	e7c3      	b.n	8007742 <_vfiprintf_r+0x176>
 80077ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80077be:	4604      	mov	r4, r0
 80077c0:	2301      	movs	r3, #1
 80077c2:	e7f0      	b.n	80077a6 <_vfiprintf_r+0x1da>
 80077c4:	ab03      	add	r3, sp, #12
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	462a      	mov	r2, r5
 80077ca:	4b16      	ldr	r3, [pc, #88]	; (8007824 <_vfiprintf_r+0x258>)
 80077cc:	a904      	add	r1, sp, #16
 80077ce:	4630      	mov	r0, r6
 80077d0:	f7fd fee8 	bl	80055a4 <_printf_float>
 80077d4:	4607      	mov	r7, r0
 80077d6:	1c78      	adds	r0, r7, #1
 80077d8:	d1d6      	bne.n	8007788 <_vfiprintf_r+0x1bc>
 80077da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077dc:	07d9      	lsls	r1, r3, #31
 80077de:	d405      	bmi.n	80077ec <_vfiprintf_r+0x220>
 80077e0:	89ab      	ldrh	r3, [r5, #12]
 80077e2:	059a      	lsls	r2, r3, #22
 80077e4:	d402      	bmi.n	80077ec <_vfiprintf_r+0x220>
 80077e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077e8:	f7ff fa34 	bl	8006c54 <__retarget_lock_release_recursive>
 80077ec:	89ab      	ldrh	r3, [r5, #12]
 80077ee:	065b      	lsls	r3, r3, #25
 80077f0:	f53f af12 	bmi.w	8007618 <_vfiprintf_r+0x4c>
 80077f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077f6:	e711      	b.n	800761c <_vfiprintf_r+0x50>
 80077f8:	ab03      	add	r3, sp, #12
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	462a      	mov	r2, r5
 80077fe:	4b09      	ldr	r3, [pc, #36]	; (8007824 <_vfiprintf_r+0x258>)
 8007800:	a904      	add	r1, sp, #16
 8007802:	4630      	mov	r0, r6
 8007804:	f7fe f972 	bl	8005aec <_printf_i>
 8007808:	e7e4      	b.n	80077d4 <_vfiprintf_r+0x208>
 800780a:	bf00      	nop
 800780c:	0800801c 	.word	0x0800801c
 8007810:	0800803c 	.word	0x0800803c
 8007814:	08007ffc 	.word	0x08007ffc
 8007818:	080081b4 	.word	0x080081b4
 800781c:	080081be 	.word	0x080081be
 8007820:	080055a5 	.word	0x080055a5
 8007824:	080075a7 	.word	0x080075a7
 8007828:	080081ba 	.word	0x080081ba

0800782c <_sbrk_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4d06      	ldr	r5, [pc, #24]	; (8007848 <_sbrk_r+0x1c>)
 8007830:	2300      	movs	r3, #0
 8007832:	4604      	mov	r4, r0
 8007834:	4608      	mov	r0, r1
 8007836:	602b      	str	r3, [r5, #0]
 8007838:	f7f9 fe86 	bl	8001548 <_sbrk>
 800783c:	1c43      	adds	r3, r0, #1
 800783e:	d102      	bne.n	8007846 <_sbrk_r+0x1a>
 8007840:	682b      	ldr	r3, [r5, #0]
 8007842:	b103      	cbz	r3, 8007846 <_sbrk_r+0x1a>
 8007844:	6023      	str	r3, [r4, #0]
 8007846:	bd38      	pop	{r3, r4, r5, pc}
 8007848:	200002f4 	.word	0x200002f4

0800784c <__sread>:
 800784c:	b510      	push	{r4, lr}
 800784e:	460c      	mov	r4, r1
 8007850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007854:	f000 faa8 	bl	8007da8 <_read_r>
 8007858:	2800      	cmp	r0, #0
 800785a:	bfab      	itete	ge
 800785c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800785e:	89a3      	ldrhlt	r3, [r4, #12]
 8007860:	181b      	addge	r3, r3, r0
 8007862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007866:	bfac      	ite	ge
 8007868:	6563      	strge	r3, [r4, #84]	; 0x54
 800786a:	81a3      	strhlt	r3, [r4, #12]
 800786c:	bd10      	pop	{r4, pc}

0800786e <__swrite>:
 800786e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007872:	461f      	mov	r7, r3
 8007874:	898b      	ldrh	r3, [r1, #12]
 8007876:	05db      	lsls	r3, r3, #23
 8007878:	4605      	mov	r5, r0
 800787a:	460c      	mov	r4, r1
 800787c:	4616      	mov	r6, r2
 800787e:	d505      	bpl.n	800788c <__swrite+0x1e>
 8007880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007884:	2302      	movs	r3, #2
 8007886:	2200      	movs	r2, #0
 8007888:	f000 f9f8 	bl	8007c7c <_lseek_r>
 800788c:	89a3      	ldrh	r3, [r4, #12]
 800788e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007896:	81a3      	strh	r3, [r4, #12]
 8007898:	4632      	mov	r2, r6
 800789a:	463b      	mov	r3, r7
 800789c:	4628      	mov	r0, r5
 800789e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078a2:	f000 b869 	b.w	8007978 <_write_r>

080078a6 <__sseek>:
 80078a6:	b510      	push	{r4, lr}
 80078a8:	460c      	mov	r4, r1
 80078aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ae:	f000 f9e5 	bl	8007c7c <_lseek_r>
 80078b2:	1c43      	adds	r3, r0, #1
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	bf15      	itete	ne
 80078b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80078ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078c2:	81a3      	strheq	r3, [r4, #12]
 80078c4:	bf18      	it	ne
 80078c6:	81a3      	strhne	r3, [r4, #12]
 80078c8:	bd10      	pop	{r4, pc}

080078ca <__sclose>:
 80078ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ce:	f000 b8f1 	b.w	8007ab4 <_close_r>
	...

080078d4 <__swbuf_r>:
 80078d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d6:	460e      	mov	r6, r1
 80078d8:	4614      	mov	r4, r2
 80078da:	4605      	mov	r5, r0
 80078dc:	b118      	cbz	r0, 80078e6 <__swbuf_r+0x12>
 80078de:	6983      	ldr	r3, [r0, #24]
 80078e0:	b90b      	cbnz	r3, 80078e6 <__swbuf_r+0x12>
 80078e2:	f7ff f913 	bl	8006b0c <__sinit>
 80078e6:	4b21      	ldr	r3, [pc, #132]	; (800796c <__swbuf_r+0x98>)
 80078e8:	429c      	cmp	r4, r3
 80078ea:	d12b      	bne.n	8007944 <__swbuf_r+0x70>
 80078ec:	686c      	ldr	r4, [r5, #4]
 80078ee:	69a3      	ldr	r3, [r4, #24]
 80078f0:	60a3      	str	r3, [r4, #8]
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	071a      	lsls	r2, r3, #28
 80078f6:	d52f      	bpl.n	8007958 <__swbuf_r+0x84>
 80078f8:	6923      	ldr	r3, [r4, #16]
 80078fa:	b36b      	cbz	r3, 8007958 <__swbuf_r+0x84>
 80078fc:	6923      	ldr	r3, [r4, #16]
 80078fe:	6820      	ldr	r0, [r4, #0]
 8007900:	1ac0      	subs	r0, r0, r3
 8007902:	6963      	ldr	r3, [r4, #20]
 8007904:	b2f6      	uxtb	r6, r6
 8007906:	4283      	cmp	r3, r0
 8007908:	4637      	mov	r7, r6
 800790a:	dc04      	bgt.n	8007916 <__swbuf_r+0x42>
 800790c:	4621      	mov	r1, r4
 800790e:	4628      	mov	r0, r5
 8007910:	f000 f966 	bl	8007be0 <_fflush_r>
 8007914:	bb30      	cbnz	r0, 8007964 <__swbuf_r+0x90>
 8007916:	68a3      	ldr	r3, [r4, #8]
 8007918:	3b01      	subs	r3, #1
 800791a:	60a3      	str	r3, [r4, #8]
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	1c5a      	adds	r2, r3, #1
 8007920:	6022      	str	r2, [r4, #0]
 8007922:	701e      	strb	r6, [r3, #0]
 8007924:	6963      	ldr	r3, [r4, #20]
 8007926:	3001      	adds	r0, #1
 8007928:	4283      	cmp	r3, r0
 800792a:	d004      	beq.n	8007936 <__swbuf_r+0x62>
 800792c:	89a3      	ldrh	r3, [r4, #12]
 800792e:	07db      	lsls	r3, r3, #31
 8007930:	d506      	bpl.n	8007940 <__swbuf_r+0x6c>
 8007932:	2e0a      	cmp	r6, #10
 8007934:	d104      	bne.n	8007940 <__swbuf_r+0x6c>
 8007936:	4621      	mov	r1, r4
 8007938:	4628      	mov	r0, r5
 800793a:	f000 f951 	bl	8007be0 <_fflush_r>
 800793e:	b988      	cbnz	r0, 8007964 <__swbuf_r+0x90>
 8007940:	4638      	mov	r0, r7
 8007942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007944:	4b0a      	ldr	r3, [pc, #40]	; (8007970 <__swbuf_r+0x9c>)
 8007946:	429c      	cmp	r4, r3
 8007948:	d101      	bne.n	800794e <__swbuf_r+0x7a>
 800794a:	68ac      	ldr	r4, [r5, #8]
 800794c:	e7cf      	b.n	80078ee <__swbuf_r+0x1a>
 800794e:	4b09      	ldr	r3, [pc, #36]	; (8007974 <__swbuf_r+0xa0>)
 8007950:	429c      	cmp	r4, r3
 8007952:	bf08      	it	eq
 8007954:	68ec      	ldreq	r4, [r5, #12]
 8007956:	e7ca      	b.n	80078ee <__swbuf_r+0x1a>
 8007958:	4621      	mov	r1, r4
 800795a:	4628      	mov	r0, r5
 800795c:	f000 f81e 	bl	800799c <__swsetup_r>
 8007960:	2800      	cmp	r0, #0
 8007962:	d0cb      	beq.n	80078fc <__swbuf_r+0x28>
 8007964:	f04f 37ff 	mov.w	r7, #4294967295
 8007968:	e7ea      	b.n	8007940 <__swbuf_r+0x6c>
 800796a:	bf00      	nop
 800796c:	0800801c 	.word	0x0800801c
 8007970:	0800803c 	.word	0x0800803c
 8007974:	08007ffc 	.word	0x08007ffc

08007978 <_write_r>:
 8007978:	b538      	push	{r3, r4, r5, lr}
 800797a:	4d07      	ldr	r5, [pc, #28]	; (8007998 <_write_r+0x20>)
 800797c:	4604      	mov	r4, r0
 800797e:	4608      	mov	r0, r1
 8007980:	4611      	mov	r1, r2
 8007982:	2200      	movs	r2, #0
 8007984:	602a      	str	r2, [r5, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	f7f9 fd8d 	bl	80014a6 <_write>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d102      	bne.n	8007996 <_write_r+0x1e>
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	b103      	cbz	r3, 8007996 <_write_r+0x1e>
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	200002f4 	.word	0x200002f4

0800799c <__swsetup_r>:
 800799c:	4b32      	ldr	r3, [pc, #200]	; (8007a68 <__swsetup_r+0xcc>)
 800799e:	b570      	push	{r4, r5, r6, lr}
 80079a0:	681d      	ldr	r5, [r3, #0]
 80079a2:	4606      	mov	r6, r0
 80079a4:	460c      	mov	r4, r1
 80079a6:	b125      	cbz	r5, 80079b2 <__swsetup_r+0x16>
 80079a8:	69ab      	ldr	r3, [r5, #24]
 80079aa:	b913      	cbnz	r3, 80079b2 <__swsetup_r+0x16>
 80079ac:	4628      	mov	r0, r5
 80079ae:	f7ff f8ad 	bl	8006b0c <__sinit>
 80079b2:	4b2e      	ldr	r3, [pc, #184]	; (8007a6c <__swsetup_r+0xd0>)
 80079b4:	429c      	cmp	r4, r3
 80079b6:	d10f      	bne.n	80079d8 <__swsetup_r+0x3c>
 80079b8:	686c      	ldr	r4, [r5, #4]
 80079ba:	89a3      	ldrh	r3, [r4, #12]
 80079bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079c0:	0719      	lsls	r1, r3, #28
 80079c2:	d42c      	bmi.n	8007a1e <__swsetup_r+0x82>
 80079c4:	06dd      	lsls	r5, r3, #27
 80079c6:	d411      	bmi.n	80079ec <__swsetup_r+0x50>
 80079c8:	2309      	movs	r3, #9
 80079ca:	6033      	str	r3, [r6, #0]
 80079cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079d0:	81a3      	strh	r3, [r4, #12]
 80079d2:	f04f 30ff 	mov.w	r0, #4294967295
 80079d6:	e03e      	b.n	8007a56 <__swsetup_r+0xba>
 80079d8:	4b25      	ldr	r3, [pc, #148]	; (8007a70 <__swsetup_r+0xd4>)
 80079da:	429c      	cmp	r4, r3
 80079dc:	d101      	bne.n	80079e2 <__swsetup_r+0x46>
 80079de:	68ac      	ldr	r4, [r5, #8]
 80079e0:	e7eb      	b.n	80079ba <__swsetup_r+0x1e>
 80079e2:	4b24      	ldr	r3, [pc, #144]	; (8007a74 <__swsetup_r+0xd8>)
 80079e4:	429c      	cmp	r4, r3
 80079e6:	bf08      	it	eq
 80079e8:	68ec      	ldreq	r4, [r5, #12]
 80079ea:	e7e6      	b.n	80079ba <__swsetup_r+0x1e>
 80079ec:	0758      	lsls	r0, r3, #29
 80079ee:	d512      	bpl.n	8007a16 <__swsetup_r+0x7a>
 80079f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079f2:	b141      	cbz	r1, 8007a06 <__swsetup_r+0x6a>
 80079f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079f8:	4299      	cmp	r1, r3
 80079fa:	d002      	beq.n	8007a02 <__swsetup_r+0x66>
 80079fc:	4630      	mov	r0, r6
 80079fe:	f7ff fcdb 	bl	80073b8 <_free_r>
 8007a02:	2300      	movs	r3, #0
 8007a04:	6363      	str	r3, [r4, #52]	; 0x34
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a0c:	81a3      	strh	r3, [r4, #12]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	6063      	str	r3, [r4, #4]
 8007a12:	6923      	ldr	r3, [r4, #16]
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	89a3      	ldrh	r3, [r4, #12]
 8007a18:	f043 0308 	orr.w	r3, r3, #8
 8007a1c:	81a3      	strh	r3, [r4, #12]
 8007a1e:	6923      	ldr	r3, [r4, #16]
 8007a20:	b94b      	cbnz	r3, 8007a36 <__swsetup_r+0x9a>
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a2c:	d003      	beq.n	8007a36 <__swsetup_r+0x9a>
 8007a2e:	4621      	mov	r1, r4
 8007a30:	4630      	mov	r0, r6
 8007a32:	f000 f95b 	bl	8007cec <__smakebuf_r>
 8007a36:	89a0      	ldrh	r0, [r4, #12]
 8007a38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a3c:	f010 0301 	ands.w	r3, r0, #1
 8007a40:	d00a      	beq.n	8007a58 <__swsetup_r+0xbc>
 8007a42:	2300      	movs	r3, #0
 8007a44:	60a3      	str	r3, [r4, #8]
 8007a46:	6963      	ldr	r3, [r4, #20]
 8007a48:	425b      	negs	r3, r3
 8007a4a:	61a3      	str	r3, [r4, #24]
 8007a4c:	6923      	ldr	r3, [r4, #16]
 8007a4e:	b943      	cbnz	r3, 8007a62 <__swsetup_r+0xc6>
 8007a50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a54:	d1ba      	bne.n	80079cc <__swsetup_r+0x30>
 8007a56:	bd70      	pop	{r4, r5, r6, pc}
 8007a58:	0781      	lsls	r1, r0, #30
 8007a5a:	bf58      	it	pl
 8007a5c:	6963      	ldrpl	r3, [r4, #20]
 8007a5e:	60a3      	str	r3, [r4, #8]
 8007a60:	e7f4      	b.n	8007a4c <__swsetup_r+0xb0>
 8007a62:	2000      	movs	r0, #0
 8007a64:	e7f7      	b.n	8007a56 <__swsetup_r+0xba>
 8007a66:	bf00      	nop
 8007a68:	2000000c 	.word	0x2000000c
 8007a6c:	0800801c 	.word	0x0800801c
 8007a70:	0800803c 	.word	0x0800803c
 8007a74:	08007ffc 	.word	0x08007ffc

08007a78 <__assert_func>:
 8007a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a7a:	4614      	mov	r4, r2
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <__assert_func+0x2c>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4605      	mov	r5, r0
 8007a84:	68d8      	ldr	r0, [r3, #12]
 8007a86:	b14c      	cbz	r4, 8007a9c <__assert_func+0x24>
 8007a88:	4b07      	ldr	r3, [pc, #28]	; (8007aa8 <__assert_func+0x30>)
 8007a8a:	9100      	str	r1, [sp, #0]
 8007a8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a90:	4906      	ldr	r1, [pc, #24]	; (8007aac <__assert_func+0x34>)
 8007a92:	462b      	mov	r3, r5
 8007a94:	f000 f8e0 	bl	8007c58 <fiprintf>
 8007a98:	f000 f9a5 	bl	8007de6 <abort>
 8007a9c:	4b04      	ldr	r3, [pc, #16]	; (8007ab0 <__assert_func+0x38>)
 8007a9e:	461c      	mov	r4, r3
 8007aa0:	e7f3      	b.n	8007a8a <__assert_func+0x12>
 8007aa2:	bf00      	nop
 8007aa4:	2000000c 	.word	0x2000000c
 8007aa8:	080081c5 	.word	0x080081c5
 8007aac:	080081d2 	.word	0x080081d2
 8007ab0:	08008200 	.word	0x08008200

08007ab4 <_close_r>:
 8007ab4:	b538      	push	{r3, r4, r5, lr}
 8007ab6:	4d06      	ldr	r5, [pc, #24]	; (8007ad0 <_close_r+0x1c>)
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4604      	mov	r4, r0
 8007abc:	4608      	mov	r0, r1
 8007abe:	602b      	str	r3, [r5, #0]
 8007ac0:	f7f9 fd0d 	bl	80014de <_close>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d102      	bne.n	8007ace <_close_r+0x1a>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	b103      	cbz	r3, 8007ace <_close_r+0x1a>
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	200002f4 	.word	0x200002f4

08007ad4 <__sflush_r>:
 8007ad4:	898a      	ldrh	r2, [r1, #12]
 8007ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ada:	4605      	mov	r5, r0
 8007adc:	0710      	lsls	r0, r2, #28
 8007ade:	460c      	mov	r4, r1
 8007ae0:	d458      	bmi.n	8007b94 <__sflush_r+0xc0>
 8007ae2:	684b      	ldr	r3, [r1, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	dc05      	bgt.n	8007af4 <__sflush_r+0x20>
 8007ae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	dc02      	bgt.n	8007af4 <__sflush_r+0x20>
 8007aee:	2000      	movs	r0, #0
 8007af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007af6:	2e00      	cmp	r6, #0
 8007af8:	d0f9      	beq.n	8007aee <__sflush_r+0x1a>
 8007afa:	2300      	movs	r3, #0
 8007afc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b00:	682f      	ldr	r7, [r5, #0]
 8007b02:	602b      	str	r3, [r5, #0]
 8007b04:	d032      	beq.n	8007b6c <__sflush_r+0x98>
 8007b06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	075a      	lsls	r2, r3, #29
 8007b0c:	d505      	bpl.n	8007b1a <__sflush_r+0x46>
 8007b0e:	6863      	ldr	r3, [r4, #4]
 8007b10:	1ac0      	subs	r0, r0, r3
 8007b12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b14:	b10b      	cbz	r3, 8007b1a <__sflush_r+0x46>
 8007b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b18:	1ac0      	subs	r0, r0, r3
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b20:	6a21      	ldr	r1, [r4, #32]
 8007b22:	4628      	mov	r0, r5
 8007b24:	47b0      	blx	r6
 8007b26:	1c43      	adds	r3, r0, #1
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	d106      	bne.n	8007b3a <__sflush_r+0x66>
 8007b2c:	6829      	ldr	r1, [r5, #0]
 8007b2e:	291d      	cmp	r1, #29
 8007b30:	d82c      	bhi.n	8007b8c <__sflush_r+0xb8>
 8007b32:	4a2a      	ldr	r2, [pc, #168]	; (8007bdc <__sflush_r+0x108>)
 8007b34:	40ca      	lsrs	r2, r1
 8007b36:	07d6      	lsls	r6, r2, #31
 8007b38:	d528      	bpl.n	8007b8c <__sflush_r+0xb8>
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	6062      	str	r2, [r4, #4]
 8007b3e:	04d9      	lsls	r1, r3, #19
 8007b40:	6922      	ldr	r2, [r4, #16]
 8007b42:	6022      	str	r2, [r4, #0]
 8007b44:	d504      	bpl.n	8007b50 <__sflush_r+0x7c>
 8007b46:	1c42      	adds	r2, r0, #1
 8007b48:	d101      	bne.n	8007b4e <__sflush_r+0x7a>
 8007b4a:	682b      	ldr	r3, [r5, #0]
 8007b4c:	b903      	cbnz	r3, 8007b50 <__sflush_r+0x7c>
 8007b4e:	6560      	str	r0, [r4, #84]	; 0x54
 8007b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b52:	602f      	str	r7, [r5, #0]
 8007b54:	2900      	cmp	r1, #0
 8007b56:	d0ca      	beq.n	8007aee <__sflush_r+0x1a>
 8007b58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b5c:	4299      	cmp	r1, r3
 8007b5e:	d002      	beq.n	8007b66 <__sflush_r+0x92>
 8007b60:	4628      	mov	r0, r5
 8007b62:	f7ff fc29 	bl	80073b8 <_free_r>
 8007b66:	2000      	movs	r0, #0
 8007b68:	6360      	str	r0, [r4, #52]	; 0x34
 8007b6a:	e7c1      	b.n	8007af0 <__sflush_r+0x1c>
 8007b6c:	6a21      	ldr	r1, [r4, #32]
 8007b6e:	2301      	movs	r3, #1
 8007b70:	4628      	mov	r0, r5
 8007b72:	47b0      	blx	r6
 8007b74:	1c41      	adds	r1, r0, #1
 8007b76:	d1c7      	bne.n	8007b08 <__sflush_r+0x34>
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0c4      	beq.n	8007b08 <__sflush_r+0x34>
 8007b7e:	2b1d      	cmp	r3, #29
 8007b80:	d001      	beq.n	8007b86 <__sflush_r+0xb2>
 8007b82:	2b16      	cmp	r3, #22
 8007b84:	d101      	bne.n	8007b8a <__sflush_r+0xb6>
 8007b86:	602f      	str	r7, [r5, #0]
 8007b88:	e7b1      	b.n	8007aee <__sflush_r+0x1a>
 8007b8a:	89a3      	ldrh	r3, [r4, #12]
 8007b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b90:	81a3      	strh	r3, [r4, #12]
 8007b92:	e7ad      	b.n	8007af0 <__sflush_r+0x1c>
 8007b94:	690f      	ldr	r7, [r1, #16]
 8007b96:	2f00      	cmp	r7, #0
 8007b98:	d0a9      	beq.n	8007aee <__sflush_r+0x1a>
 8007b9a:	0793      	lsls	r3, r2, #30
 8007b9c:	680e      	ldr	r6, [r1, #0]
 8007b9e:	bf08      	it	eq
 8007ba0:	694b      	ldreq	r3, [r1, #20]
 8007ba2:	600f      	str	r7, [r1, #0]
 8007ba4:	bf18      	it	ne
 8007ba6:	2300      	movne	r3, #0
 8007ba8:	eba6 0807 	sub.w	r8, r6, r7
 8007bac:	608b      	str	r3, [r1, #8]
 8007bae:	f1b8 0f00 	cmp.w	r8, #0
 8007bb2:	dd9c      	ble.n	8007aee <__sflush_r+0x1a>
 8007bb4:	6a21      	ldr	r1, [r4, #32]
 8007bb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bb8:	4643      	mov	r3, r8
 8007bba:	463a      	mov	r2, r7
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	47b0      	blx	r6
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	dc06      	bgt.n	8007bd2 <__sflush_r+0xfe>
 8007bc4:	89a3      	ldrh	r3, [r4, #12]
 8007bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bca:	81a3      	strh	r3, [r4, #12]
 8007bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd0:	e78e      	b.n	8007af0 <__sflush_r+0x1c>
 8007bd2:	4407      	add	r7, r0
 8007bd4:	eba8 0800 	sub.w	r8, r8, r0
 8007bd8:	e7e9      	b.n	8007bae <__sflush_r+0xda>
 8007bda:	bf00      	nop
 8007bdc:	20400001 	.word	0x20400001

08007be0 <_fflush_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	690b      	ldr	r3, [r1, #16]
 8007be4:	4605      	mov	r5, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	b913      	cbnz	r3, 8007bf0 <_fflush_r+0x10>
 8007bea:	2500      	movs	r5, #0
 8007bec:	4628      	mov	r0, r5
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	b118      	cbz	r0, 8007bfa <_fflush_r+0x1a>
 8007bf2:	6983      	ldr	r3, [r0, #24]
 8007bf4:	b90b      	cbnz	r3, 8007bfa <_fflush_r+0x1a>
 8007bf6:	f7fe ff89 	bl	8006b0c <__sinit>
 8007bfa:	4b14      	ldr	r3, [pc, #80]	; (8007c4c <_fflush_r+0x6c>)
 8007bfc:	429c      	cmp	r4, r3
 8007bfe:	d11b      	bne.n	8007c38 <_fflush_r+0x58>
 8007c00:	686c      	ldr	r4, [r5, #4]
 8007c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0ef      	beq.n	8007bea <_fflush_r+0xa>
 8007c0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c0c:	07d0      	lsls	r0, r2, #31
 8007c0e:	d404      	bmi.n	8007c1a <_fflush_r+0x3a>
 8007c10:	0599      	lsls	r1, r3, #22
 8007c12:	d402      	bmi.n	8007c1a <_fflush_r+0x3a>
 8007c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c16:	f7ff f81c 	bl	8006c52 <__retarget_lock_acquire_recursive>
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	f7ff ff59 	bl	8007ad4 <__sflush_r>
 8007c22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c24:	07da      	lsls	r2, r3, #31
 8007c26:	4605      	mov	r5, r0
 8007c28:	d4e0      	bmi.n	8007bec <_fflush_r+0xc>
 8007c2a:	89a3      	ldrh	r3, [r4, #12]
 8007c2c:	059b      	lsls	r3, r3, #22
 8007c2e:	d4dd      	bmi.n	8007bec <_fflush_r+0xc>
 8007c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c32:	f7ff f80f 	bl	8006c54 <__retarget_lock_release_recursive>
 8007c36:	e7d9      	b.n	8007bec <_fflush_r+0xc>
 8007c38:	4b05      	ldr	r3, [pc, #20]	; (8007c50 <_fflush_r+0x70>)
 8007c3a:	429c      	cmp	r4, r3
 8007c3c:	d101      	bne.n	8007c42 <_fflush_r+0x62>
 8007c3e:	68ac      	ldr	r4, [r5, #8]
 8007c40:	e7df      	b.n	8007c02 <_fflush_r+0x22>
 8007c42:	4b04      	ldr	r3, [pc, #16]	; (8007c54 <_fflush_r+0x74>)
 8007c44:	429c      	cmp	r4, r3
 8007c46:	bf08      	it	eq
 8007c48:	68ec      	ldreq	r4, [r5, #12]
 8007c4a:	e7da      	b.n	8007c02 <_fflush_r+0x22>
 8007c4c:	0800801c 	.word	0x0800801c
 8007c50:	0800803c 	.word	0x0800803c
 8007c54:	08007ffc 	.word	0x08007ffc

08007c58 <fiprintf>:
 8007c58:	b40e      	push	{r1, r2, r3}
 8007c5a:	b503      	push	{r0, r1, lr}
 8007c5c:	4601      	mov	r1, r0
 8007c5e:	ab03      	add	r3, sp, #12
 8007c60:	4805      	ldr	r0, [pc, #20]	; (8007c78 <fiprintf+0x20>)
 8007c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c66:	6800      	ldr	r0, [r0, #0]
 8007c68:	9301      	str	r3, [sp, #4]
 8007c6a:	f7ff fcaf 	bl	80075cc <_vfiprintf_r>
 8007c6e:	b002      	add	sp, #8
 8007c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c74:	b003      	add	sp, #12
 8007c76:	4770      	bx	lr
 8007c78:	2000000c 	.word	0x2000000c

08007c7c <_lseek_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4d07      	ldr	r5, [pc, #28]	; (8007c9c <_lseek_r+0x20>)
 8007c80:	4604      	mov	r4, r0
 8007c82:	4608      	mov	r0, r1
 8007c84:	4611      	mov	r1, r2
 8007c86:	2200      	movs	r2, #0
 8007c88:	602a      	str	r2, [r5, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f7f9 fc4e 	bl	800152c <_lseek>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_lseek_r+0x1e>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_lseek_r+0x1e>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	200002f4 	.word	0x200002f4

08007ca0 <__swhatbuf_r>:
 8007ca0:	b570      	push	{r4, r5, r6, lr}
 8007ca2:	460e      	mov	r6, r1
 8007ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca8:	2900      	cmp	r1, #0
 8007caa:	b096      	sub	sp, #88	; 0x58
 8007cac:	4614      	mov	r4, r2
 8007cae:	461d      	mov	r5, r3
 8007cb0:	da08      	bge.n	8007cc4 <__swhatbuf_r+0x24>
 8007cb2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	602a      	str	r2, [r5, #0]
 8007cba:	061a      	lsls	r2, r3, #24
 8007cbc:	d410      	bmi.n	8007ce0 <__swhatbuf_r+0x40>
 8007cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cc2:	e00e      	b.n	8007ce2 <__swhatbuf_r+0x42>
 8007cc4:	466a      	mov	r2, sp
 8007cc6:	f000 f895 	bl	8007df4 <_fstat_r>
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	dbf1      	blt.n	8007cb2 <__swhatbuf_r+0x12>
 8007cce:	9a01      	ldr	r2, [sp, #4]
 8007cd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007cd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007cd8:	425a      	negs	r2, r3
 8007cda:	415a      	adcs	r2, r3
 8007cdc:	602a      	str	r2, [r5, #0]
 8007cde:	e7ee      	b.n	8007cbe <__swhatbuf_r+0x1e>
 8007ce0:	2340      	movs	r3, #64	; 0x40
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	b016      	add	sp, #88	; 0x58
 8007ce8:	bd70      	pop	{r4, r5, r6, pc}
	...

08007cec <__smakebuf_r>:
 8007cec:	898b      	ldrh	r3, [r1, #12]
 8007cee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007cf0:	079d      	lsls	r5, r3, #30
 8007cf2:	4606      	mov	r6, r0
 8007cf4:	460c      	mov	r4, r1
 8007cf6:	d507      	bpl.n	8007d08 <__smakebuf_r+0x1c>
 8007cf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	6123      	str	r3, [r4, #16]
 8007d00:	2301      	movs	r3, #1
 8007d02:	6163      	str	r3, [r4, #20]
 8007d04:	b002      	add	sp, #8
 8007d06:	bd70      	pop	{r4, r5, r6, pc}
 8007d08:	ab01      	add	r3, sp, #4
 8007d0a:	466a      	mov	r2, sp
 8007d0c:	f7ff ffc8 	bl	8007ca0 <__swhatbuf_r>
 8007d10:	9900      	ldr	r1, [sp, #0]
 8007d12:	4605      	mov	r5, r0
 8007d14:	4630      	mov	r0, r6
 8007d16:	f7ff fbbb 	bl	8007490 <_malloc_r>
 8007d1a:	b948      	cbnz	r0, 8007d30 <__smakebuf_r+0x44>
 8007d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d20:	059a      	lsls	r2, r3, #22
 8007d22:	d4ef      	bmi.n	8007d04 <__smakebuf_r+0x18>
 8007d24:	f023 0303 	bic.w	r3, r3, #3
 8007d28:	f043 0302 	orr.w	r3, r3, #2
 8007d2c:	81a3      	strh	r3, [r4, #12]
 8007d2e:	e7e3      	b.n	8007cf8 <__smakebuf_r+0xc>
 8007d30:	4b0d      	ldr	r3, [pc, #52]	; (8007d68 <__smakebuf_r+0x7c>)
 8007d32:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d34:	89a3      	ldrh	r3, [r4, #12]
 8007d36:	6020      	str	r0, [r4, #0]
 8007d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d3c:	81a3      	strh	r3, [r4, #12]
 8007d3e:	9b00      	ldr	r3, [sp, #0]
 8007d40:	6163      	str	r3, [r4, #20]
 8007d42:	9b01      	ldr	r3, [sp, #4]
 8007d44:	6120      	str	r0, [r4, #16]
 8007d46:	b15b      	cbz	r3, 8007d60 <__smakebuf_r+0x74>
 8007d48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	f000 f863 	bl	8007e18 <_isatty_r>
 8007d52:	b128      	cbz	r0, 8007d60 <__smakebuf_r+0x74>
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	f023 0303 	bic.w	r3, r3, #3
 8007d5a:	f043 0301 	orr.w	r3, r3, #1
 8007d5e:	81a3      	strh	r3, [r4, #12]
 8007d60:	89a0      	ldrh	r0, [r4, #12]
 8007d62:	4305      	orrs	r5, r0
 8007d64:	81a5      	strh	r5, [r4, #12]
 8007d66:	e7cd      	b.n	8007d04 <__smakebuf_r+0x18>
 8007d68:	08006aa5 	.word	0x08006aa5

08007d6c <__ascii_mbtowc>:
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	b901      	cbnz	r1, 8007d72 <__ascii_mbtowc+0x6>
 8007d70:	a901      	add	r1, sp, #4
 8007d72:	b142      	cbz	r2, 8007d86 <__ascii_mbtowc+0x1a>
 8007d74:	b14b      	cbz	r3, 8007d8a <__ascii_mbtowc+0x1e>
 8007d76:	7813      	ldrb	r3, [r2, #0]
 8007d78:	600b      	str	r3, [r1, #0]
 8007d7a:	7812      	ldrb	r2, [r2, #0]
 8007d7c:	1e10      	subs	r0, r2, #0
 8007d7e:	bf18      	it	ne
 8007d80:	2001      	movne	r0, #1
 8007d82:	b002      	add	sp, #8
 8007d84:	4770      	bx	lr
 8007d86:	4610      	mov	r0, r2
 8007d88:	e7fb      	b.n	8007d82 <__ascii_mbtowc+0x16>
 8007d8a:	f06f 0001 	mvn.w	r0, #1
 8007d8e:	e7f8      	b.n	8007d82 <__ascii_mbtowc+0x16>

08007d90 <__malloc_lock>:
 8007d90:	4801      	ldr	r0, [pc, #4]	; (8007d98 <__malloc_lock+0x8>)
 8007d92:	f7fe bf5e 	b.w	8006c52 <__retarget_lock_acquire_recursive>
 8007d96:	bf00      	nop
 8007d98:	200002e8 	.word	0x200002e8

08007d9c <__malloc_unlock>:
 8007d9c:	4801      	ldr	r0, [pc, #4]	; (8007da4 <__malloc_unlock+0x8>)
 8007d9e:	f7fe bf59 	b.w	8006c54 <__retarget_lock_release_recursive>
 8007da2:	bf00      	nop
 8007da4:	200002e8 	.word	0x200002e8

08007da8 <_read_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4d07      	ldr	r5, [pc, #28]	; (8007dc8 <_read_r+0x20>)
 8007dac:	4604      	mov	r4, r0
 8007dae:	4608      	mov	r0, r1
 8007db0:	4611      	mov	r1, r2
 8007db2:	2200      	movs	r2, #0
 8007db4:	602a      	str	r2, [r5, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	f7f9 fb58 	bl	800146c <_read>
 8007dbc:	1c43      	adds	r3, r0, #1
 8007dbe:	d102      	bne.n	8007dc6 <_read_r+0x1e>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	b103      	cbz	r3, 8007dc6 <_read_r+0x1e>
 8007dc4:	6023      	str	r3, [r4, #0]
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
 8007dc8:	200002f4 	.word	0x200002f4

08007dcc <__ascii_wctomb>:
 8007dcc:	b149      	cbz	r1, 8007de2 <__ascii_wctomb+0x16>
 8007dce:	2aff      	cmp	r2, #255	; 0xff
 8007dd0:	bf85      	ittet	hi
 8007dd2:	238a      	movhi	r3, #138	; 0x8a
 8007dd4:	6003      	strhi	r3, [r0, #0]
 8007dd6:	700a      	strbls	r2, [r1, #0]
 8007dd8:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ddc:	bf98      	it	ls
 8007dde:	2001      	movls	r0, #1
 8007de0:	4770      	bx	lr
 8007de2:	4608      	mov	r0, r1
 8007de4:	4770      	bx	lr

08007de6 <abort>:
 8007de6:	b508      	push	{r3, lr}
 8007de8:	2006      	movs	r0, #6
 8007dea:	f000 f84d 	bl	8007e88 <raise>
 8007dee:	2001      	movs	r0, #1
 8007df0:	f7f9 fb32 	bl	8001458 <_exit>

08007df4 <_fstat_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4d07      	ldr	r5, [pc, #28]	; (8007e14 <_fstat_r+0x20>)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	4608      	mov	r0, r1
 8007dfe:	4611      	mov	r1, r2
 8007e00:	602b      	str	r3, [r5, #0]
 8007e02:	f7f9 fb78 	bl	80014f6 <_fstat>
 8007e06:	1c43      	adds	r3, r0, #1
 8007e08:	d102      	bne.n	8007e10 <_fstat_r+0x1c>
 8007e0a:	682b      	ldr	r3, [r5, #0]
 8007e0c:	b103      	cbz	r3, 8007e10 <_fstat_r+0x1c>
 8007e0e:	6023      	str	r3, [r4, #0]
 8007e10:	bd38      	pop	{r3, r4, r5, pc}
 8007e12:	bf00      	nop
 8007e14:	200002f4 	.word	0x200002f4

08007e18 <_isatty_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	4d06      	ldr	r5, [pc, #24]	; (8007e34 <_isatty_r+0x1c>)
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	4604      	mov	r4, r0
 8007e20:	4608      	mov	r0, r1
 8007e22:	602b      	str	r3, [r5, #0]
 8007e24:	f7f9 fb77 	bl	8001516 <_isatty>
 8007e28:	1c43      	adds	r3, r0, #1
 8007e2a:	d102      	bne.n	8007e32 <_isatty_r+0x1a>
 8007e2c:	682b      	ldr	r3, [r5, #0]
 8007e2e:	b103      	cbz	r3, 8007e32 <_isatty_r+0x1a>
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	bd38      	pop	{r3, r4, r5, pc}
 8007e34:	200002f4 	.word	0x200002f4

08007e38 <_raise_r>:
 8007e38:	291f      	cmp	r1, #31
 8007e3a:	b538      	push	{r3, r4, r5, lr}
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	460d      	mov	r5, r1
 8007e40:	d904      	bls.n	8007e4c <_raise_r+0x14>
 8007e42:	2316      	movs	r3, #22
 8007e44:	6003      	str	r3, [r0, #0]
 8007e46:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e4e:	b112      	cbz	r2, 8007e56 <_raise_r+0x1e>
 8007e50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e54:	b94b      	cbnz	r3, 8007e6a <_raise_r+0x32>
 8007e56:	4620      	mov	r0, r4
 8007e58:	f000 f830 	bl	8007ebc <_getpid_r>
 8007e5c:	462a      	mov	r2, r5
 8007e5e:	4601      	mov	r1, r0
 8007e60:	4620      	mov	r0, r4
 8007e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e66:	f000 b817 	b.w	8007e98 <_kill_r>
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d00a      	beq.n	8007e84 <_raise_r+0x4c>
 8007e6e:	1c59      	adds	r1, r3, #1
 8007e70:	d103      	bne.n	8007e7a <_raise_r+0x42>
 8007e72:	2316      	movs	r3, #22
 8007e74:	6003      	str	r3, [r0, #0]
 8007e76:	2001      	movs	r0, #1
 8007e78:	e7e7      	b.n	8007e4a <_raise_r+0x12>
 8007e7a:	2400      	movs	r4, #0
 8007e7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e80:	4628      	mov	r0, r5
 8007e82:	4798      	blx	r3
 8007e84:	2000      	movs	r0, #0
 8007e86:	e7e0      	b.n	8007e4a <_raise_r+0x12>

08007e88 <raise>:
 8007e88:	4b02      	ldr	r3, [pc, #8]	; (8007e94 <raise+0xc>)
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	6818      	ldr	r0, [r3, #0]
 8007e8e:	f7ff bfd3 	b.w	8007e38 <_raise_r>
 8007e92:	bf00      	nop
 8007e94:	2000000c 	.word	0x2000000c

08007e98 <_kill_r>:
 8007e98:	b538      	push	{r3, r4, r5, lr}
 8007e9a:	4d07      	ldr	r5, [pc, #28]	; (8007eb8 <_kill_r+0x20>)
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	4608      	mov	r0, r1
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	602b      	str	r3, [r5, #0]
 8007ea6:	f7f9 fac7 	bl	8001438 <_kill>
 8007eaa:	1c43      	adds	r3, r0, #1
 8007eac:	d102      	bne.n	8007eb4 <_kill_r+0x1c>
 8007eae:	682b      	ldr	r3, [r5, #0]
 8007eb0:	b103      	cbz	r3, 8007eb4 <_kill_r+0x1c>
 8007eb2:	6023      	str	r3, [r4, #0]
 8007eb4:	bd38      	pop	{r3, r4, r5, pc}
 8007eb6:	bf00      	nop
 8007eb8:	200002f4 	.word	0x200002f4

08007ebc <_getpid_r>:
 8007ebc:	f7f9 bab4 	b.w	8001428 <_getpid>

08007ec0 <_init>:
 8007ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec2:	bf00      	nop
 8007ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ec6:	bc08      	pop	{r3}
 8007ec8:	469e      	mov	lr, r3
 8007eca:	4770      	bx	lr

08007ecc <_fini>:
 8007ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ece:	bf00      	nop
 8007ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ed2:	bc08      	pop	{r3}
 8007ed4:	469e      	mov	lr, r3
 8007ed6:	4770      	bx	lr
